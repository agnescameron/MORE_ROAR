
ROAR_DIY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000701c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  080070d8  080070d8  000080d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a0  080076a0  00009870  2**0
                  CONTENTS
  4 .ARM          00000000  080076a0  080076a0  00009870  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076a0  080076a0  00009870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076a4  080076a4  000086a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000870  20000000  080076a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  20000870  08007f18  00009870  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fac  08007f18  00009fac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000deb0  00000000  00000000  00009898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248a  00000000  00000000  00017748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00019bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bca  00000000  00000000  0001ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001822e  00000000  00000000  0001b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fd1  00000000  00000000  00033920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009967e  00000000  00000000  000448f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddf6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  000ddfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e20c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000870 	.word	0x20000870
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080070c0 	.word	0x080070c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000874 	.word	0x20000874
 8000100:	080070c0 	.word	0x080070c0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_lmul>:
 8000404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000406:	46ce      	mov	lr, r9
 8000408:	4699      	mov	r9, r3
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	469c      	mov	ip, r3
 800040e:	0413      	lsls	r3, r2, #16
 8000410:	4647      	mov	r7, r8
 8000412:	0c1b      	lsrs	r3, r3, #16
 8000414:	001d      	movs	r5, r3
 8000416:	000e      	movs	r6, r1
 8000418:	4661      	mov	r1, ip
 800041a:	0404      	lsls	r4, r0, #16
 800041c:	0c24      	lsrs	r4, r4, #16
 800041e:	b580      	push	{r7, lr}
 8000420:	0007      	movs	r7, r0
 8000422:	0c10      	lsrs	r0, r2, #16
 8000424:	434b      	muls	r3, r1
 8000426:	4365      	muls	r5, r4
 8000428:	4341      	muls	r1, r0
 800042a:	4360      	muls	r0, r4
 800042c:	0c2c      	lsrs	r4, r5, #16
 800042e:	18c0      	adds	r0, r0, r3
 8000430:	1824      	adds	r4, r4, r0
 8000432:	468c      	mov	ip, r1
 8000434:	42a3      	cmp	r3, r4
 8000436:	d903      	bls.n	8000440 <__aeabi_lmul+0x3c>
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	025b      	lsls	r3, r3, #9
 800043c:	4698      	mov	r8, r3
 800043e:	44c4      	add	ip, r8
 8000440:	4649      	mov	r1, r9
 8000442:	4379      	muls	r1, r7
 8000444:	4356      	muls	r6, r2
 8000446:	0c23      	lsrs	r3, r4, #16
 8000448:	042d      	lsls	r5, r5, #16
 800044a:	0c2d      	lsrs	r5, r5, #16
 800044c:	1989      	adds	r1, r1, r6
 800044e:	4463      	add	r3, ip
 8000450:	0424      	lsls	r4, r4, #16
 8000452:	1960      	adds	r0, r4, r5
 8000454:	18c9      	adds	r1, r1, r3
 8000456:	bcc0      	pop	{r6, r7}
 8000458:	46b9      	mov	r9, r7
 800045a:	46b0      	mov	r8, r6
 800045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000464:	f3bf 8f4f 	dsb	sy
}
 8000468:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800046a:	4b04      	ldr	r3, [pc, #16]	@ (800047c <__NVIC_SystemReset+0x1c>)
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <__NVIC_SystemReset+0x20>)
 800046e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000470:	f3bf 8f4f 	dsb	sy
}
 8000474:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	e7fd      	b.n	8000476 <__NVIC_SystemReset+0x16>
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	05fa0004 	.word	0x05fa0004

08000484 <triangle_smash_func>:
//1 -- clip
//0 -- shuffle

//
void triangle_smash_func(uint32_t dest[], uint32_t src[], uint32_t triangle[],
		int length, int entropy) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
 8000490:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < length; i++) {
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
 8000496:	e00c      	b.n	80004b2 <triangle_smash_func+0x2e>
		dest[i] = src[i];
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	18d2      	adds	r2, r2, r3
 80004a0:	69fb      	ldr	r3, [r7, #28]
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	68f9      	ldr	r1, [r7, #12]
 80004a6:	18cb      	adds	r3, r1, r3
 80004a8:	6812      	ldr	r2, [r2, #0]
 80004aa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	3301      	adds	r3, #1
 80004b0:	61fb      	str	r3, [r7, #28]
 80004b2:	69fa      	ldr	r2, [r7, #28]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dbee      	blt.n	8000498 <triangle_smash_func+0x14>
	}

	if (entropy < 4)
 80004ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004bc:	2b03      	cmp	r3, #3
 80004be:	dc01      	bgt.n	80004c4 <triangle_smash_func+0x40>
		entropy = 4;
 80004c0:	2304      	movs	r3, #4
 80004c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (int i = rand() % length; i < entropy; i++) {
 80004c4:	f005 fdda 	bl	800607c <rand>
 80004c8:	0003      	movs	r3, r0
 80004ca:	6839      	ldr	r1, [r7, #0]
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ff93 	bl	80003f8 <__aeabi_idivmod>
 80004d2:	000b      	movs	r3, r1
 80004d4:	61bb      	str	r3, [r7, #24]
 80004d6:	e01b      	b.n	8000510 <triangle_smash_func+0x8c>
		uint32_t idx = i % length;
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	6839      	ldr	r1, [r7, #0]
 80004dc:	0018      	movs	r0, r3
 80004de:	f7ff ff8b 	bl	80003f8 <__aeabi_idivmod>
 80004e2:	000b      	movs	r3, r1
 80004e4:	617b      	str	r3, [r7, #20]
		dest[idx] = triangle[(idx + entropy) % length];
 80004e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	18d3      	adds	r3, r2, r3
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff fe97 	bl	8000224 <__aeabi_uidivmod>
 80004f6:	000b      	movs	r3, r1
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	18d2      	adds	r2, r2, r3
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	68f9      	ldr	r1, [r7, #12]
 8000504:	18cb      	adds	r3, r1, r3
 8000506:	6812      	ldr	r2, [r2, #0]
 8000508:	601a      	str	r2, [r3, #0]
	for (int i = rand() % length; i < entropy; i++) {
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	3301      	adds	r3, #1
 800050e:	61bb      	str	r3, [r7, #24]
 8000510:	69ba      	ldr	r2, [r7, #24]
 8000512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000514:	429a      	cmp	r2, r3
 8000516:	dbdf      	blt.n	80004d8 <triangle_smash_func+0x54>
	}
}
 8000518:	46c0      	nop			@ (mov r8, r8)
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b008      	add	sp, #32
 8000520:	bd80      	pop	{r7, pc}

08000522 <XOR_func>:

void XOR_func(uint32_t dest[], uint32_t src[], uint16_t length,
		uint16_t entropy) {
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	0019      	movs	r1, r3
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	801a      	strh	r2, [r3, #0]
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	1c0a      	adds	r2, r1, #0
 8000536:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e034      	b.n	80005a8 <XOR_func+0x86>
		dest[i] = src[i];
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	18d2      	adds	r2, r2, r3
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	009b      	lsls	r3, r3, #2
 800054a:	68f9      	ldr	r1, [r7, #12]
 800054c:	18cb      	adds	r3, r1, r3
 800054e:	6812      	ldr	r2, [r2, #0]
 8000550:	601a      	str	r2, [r3, #0]
		dest[i] ^= entropy;
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	18d3      	adds	r3, r2, r3
 800055a:	6819      	ldr	r1, [r3, #0]
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	881a      	ldrh	r2, [r3, #0]
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	18c3      	adds	r3, r0, r3
 8000568:	404a      	eors	r2, r1
 800056a:	601a      	str	r2, [r3, #0]

		if (dest[i] > 240)
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	18d3      	adds	r3, r2, r3
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2bf0      	cmp	r3, #240	@ 0xf0
 8000578:	d906      	bls.n	8000588 <XOR_func+0x66>
			dest[i] = 240;
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	18d3      	adds	r3, r2, r3
 8000582:	22f0      	movs	r2, #240	@ 0xf0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e00c      	b.n	80005a2 <XOR_func+0x80>
		else if (dest[i] < 1)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	18d3      	adds	r3, r2, r3
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d105      	bne.n	80005a2 <XOR_func+0x80>
			dest[i] = 1;
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	1dbb      	adds	r3, r7, #6
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dbc5      	blt.n	800053e <XOR_func+0x1c>
	}
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46c0      	nop			@ (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b006      	add	sp, #24
 80005ba:	bd80      	pop	{r7, pc}

080005bc <top2bottom_func>:
//
void top2bottom_func(uint32_t dest[], uint32_t src[], uint16_t length,
		uint16_t entropy) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	0019      	movs	r1, r3
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	1c0a      	adds	r2, r1, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
 80005d6:	e016      	b.n	8000606 <top2bottom_func+0x4a>
		uint8_t new_val = src[i] - entropy;
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	68ba      	ldr	r2, [r7, #8]
 80005de:	18d3      	adds	r3, r2, r3
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	b2d9      	uxtb	r1, r3
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	2013      	movs	r0, #19
 80005ec:	183b      	adds	r3, r7, r0
 80005ee:	1a8a      	subs	r2, r1, r2
 80005f0:	701a      	strb	r2, [r3, #0]
		if (new_val < 0)
			new_val = 0;
		dest[i] = new_val;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	18d3      	adds	r3, r2, r3
 80005fa:	183a      	adds	r2, r7, r0
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	1dbb      	adds	r3, r7, #6
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	697a      	ldr	r2, [r7, #20]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbe3      	blt.n	80005d8 <top2bottom_func+0x1c>
	}
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b006      	add	sp, #24
 8000618:	bd80      	pop	{r7, pc}

0800061a <bitcrush_func>:
//
void bitcrush_func(uint32_t dest[], uint32_t src[], uint16_t length,
		uint16_t entropy) {
 800061a:	b580      	push	{r7, lr}
 800061c:	b088      	sub	sp, #32
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	0019      	movs	r1, r3
 8000626:	1dbb      	adds	r3, r7, #6
 8000628:	801a      	strh	r2, [r3, #0]
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	1c0a      	adds	r2, r1, #0
 800062e:	801a      	strh	r2, [r3, #0]
	if (entropy > 1) {
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d800      	bhi.n	800063a <bitcrush_func+0x20>
 8000638:	e085      	b.n	8000746 <bitcrush_func+0x12c>

		uint8_t num_steps = length / entropy;
 800063a:	1dba      	adds	r2, r7, #6
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	8812      	ldrh	r2, [r2, #0]
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	0019      	movs	r1, r3
 8000644:	0010      	movs	r0, r2
 8000646:	f7ff fd67 	bl	8000118 <__udivsi3>
 800064a:	0003      	movs	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	2317      	movs	r3, #23
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	701a      	strb	r2, [r3, #0]

		//this gets the first entropy*num_steps elements of the array
		for (uint8_t i = 0; i < num_steps; i++) {
 8000654:	231f      	movs	r3, #31
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e035      	b.n	80006ca <bitcrush_func+0xb0>
			uint8_t first_el = src[entropy * i];
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	221f      	movs	r2, #31
 8000664:	18ba      	adds	r2, r7, r2
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	4353      	muls	r3, r2
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	68ba      	ldr	r2, [r7, #8]
 800066e:	18d3      	adds	r3, r2, r3
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	2313      	movs	r3, #19
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < entropy; j++) {
 8000678:	231e      	movs	r3, #30
 800067a:	18fb      	adds	r3, r7, r3
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e015      	b.n	80006ae <bitcrush_func+0x94>
				dest[j + entropy * i] = first_el;
 8000682:	201e      	movs	r0, #30
 8000684:	183b      	adds	r3, r7, r0
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	211f      	movs	r1, #31
 800068e:	1879      	adds	r1, r7, r1
 8000690:	7809      	ldrb	r1, [r1, #0]
 8000692:	434b      	muls	r3, r1
 8000694:	18d3      	adds	r3, r2, r3
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	18d3      	adds	r3, r2, r3
 800069c:	2213      	movs	r2, #19
 800069e:	18ba      	adds	r2, r7, r2
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	601a      	str	r2, [r3, #0]
			for (uint8_t j = 0; j < entropy; j++) {
 80006a4:	183b      	adds	r3, r7, r0
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	183b      	adds	r3, r7, r0
 80006aa:	3201      	adds	r2, #1
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	231e      	movs	r3, #30
 80006b0:	18fb      	adds	r3, r7, r3
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	1d3a      	adds	r2, r7, #4
 80006b8:	8812      	ldrh	r2, [r2, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d8e1      	bhi.n	8000682 <bitcrush_func+0x68>
		for (uint8_t i = 0; i < num_steps; i++) {
 80006be:	211f      	movs	r1, #31
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	3201      	adds	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	231f      	movs	r3, #31
 80006cc:	18fa      	adds	r2, r7, r3
 80006ce:	2117      	movs	r1, #23
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	7812      	ldrb	r2, [r2, #0]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3c1      	bcc.n	800065e <bitcrush_func+0x44>
			}
		}

		if (num_steps * entropy < length) {
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	8812      	ldrh	r2, [r2, #0]
 80006e2:	435a      	muls	r2, r3
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	da41      	bge.n	8000770 <bitcrush_func+0x156>
			uint16_t leftover_el = src[num_steps * entropy];
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	1d3a      	adds	r2, r7, #4
 80006f2:	8812      	ldrh	r2, [r2, #0]
 80006f4:	4353      	muls	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	18d3      	adds	r3, r2, r3
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	2314      	movs	r3, #20
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	801a      	strh	r2, [r3, #0]

			for (uint16_t i = num_steps * entropy; i < length; i++) {
 8000704:	187b      	adds	r3, r7, r1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b29a      	uxth	r2, r3
 800070a:	231c      	movs	r3, #28
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	1d39      	adds	r1, r7, #4
 8000710:	8809      	ldrh	r1, [r1, #0]
 8000712:	434a      	muls	r2, r1
 8000714:	801a      	strh	r2, [r3, #0]
 8000716:	e00e      	b.n	8000736 <bitcrush_func+0x11c>
				dest[i] = leftover_el;
 8000718:	211c      	movs	r1, #28
 800071a:	187b      	adds	r3, r7, r1
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	18d3      	adds	r3, r2, r3
 8000724:	2214      	movs	r2, #20
 8000726:	18ba      	adds	r2, r7, r2
 8000728:	8812      	ldrh	r2, [r2, #0]
 800072a:	601a      	str	r2, [r3, #0]
			for (uint16_t i = num_steps * entropy; i < length; i++) {
 800072c:	187b      	adds	r3, r7, r1
 800072e:	881a      	ldrh	r2, [r3, #0]
 8000730:	187b      	adds	r3, r7, r1
 8000732:	3201      	adds	r2, #1
 8000734:	801a      	strh	r2, [r3, #0]
 8000736:	231c      	movs	r3, #28
 8000738:	18fa      	adds	r2, r7, r3
 800073a:	1dbb      	adds	r3, r7, #6
 800073c:	8812      	ldrh	r2, [r2, #0]
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d3e9      	bcc.n	8000718 <bitcrush_func+0xfe>
	else {
		for (int i = 0; i < length; i++) {
			dest[i] = src[i];
		}
	}
}
 8000744:	e014      	b.n	8000770 <bitcrush_func+0x156>
		for (int i = 0; i < length; i++) {
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	e00c      	b.n	8000766 <bitcrush_func+0x14c>
			dest[i] = src[i];
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	18d2      	adds	r2, r2, r3
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	68f9      	ldr	r1, [r7, #12]
 800075a:	18cb      	adds	r3, r1, r3
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < length; i++) {
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	3301      	adds	r3, #1
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	1dbb      	adds	r3, r7, #6
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	69ba      	ldr	r2, [r7, #24]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbed      	blt.n	800074c <bitcrush_func+0x132>
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b008      	add	sp, #32
 8000776:	bd80      	pop	{r7, pc}

08000778 <clip_func>:
//
void clip_func(uint32_t dest[], uint32_t src[], uint16_t length,
		uint16_t entropy) {
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	0019      	movs	r1, r3
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	801a      	strh	r2, [r3, #0]
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	1c0a      	adds	r2, r1, #0
 800078c:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i++) {
 800078e:	2316      	movs	r3, #22
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	2200      	movs	r2, #0
 8000794:	801a      	strh	r2, [r3, #0]
 8000796:	e021      	b.n	80007dc <clip_func+0x64>
		dest[i] = src[i];
 8000798:	2016      	movs	r0, #22
 800079a:	183b      	adds	r3, r7, r0
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	68ba      	ldr	r2, [r7, #8]
 80007a2:	18d2      	adds	r2, r2, r3
 80007a4:	183b      	adds	r3, r7, r0
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	68f9      	ldr	r1, [r7, #12]
 80007ac:	18cb      	adds	r3, r1, r3
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	601a      	str	r2, [r3, #0]
		dest[i] += entropy;
 80007b2:	183b      	adds	r3, r7, r0
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	18d3      	adds	r3, r2, r3
 80007bc:	6819      	ldr	r1, [r3, #0]
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	0004      	movs	r4, r0
 80007c4:	183b      	adds	r3, r7, r0
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	18c3      	adds	r3, r0, r3
 80007ce:	188a      	adds	r2, r1, r2
 80007d0:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i++) {
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	881a      	ldrh	r2, [r3, #0]
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	3201      	adds	r2, #1
 80007da:	801a      	strh	r2, [r3, #0]
 80007dc:	2316      	movs	r3, #22
 80007de:	18fa      	adds	r2, r7, r3
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d3d6      	bcc.n	8000798 <clip_func+0x20>
	}
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b007      	add	sp, #28
 80007f2:	bd90      	pop	{r4, r7, pc}

080007f4 <shuffle_func>:
//
void shuffle_func(uint32_t dest[], uint32_t src[], int length, int entropy) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
 8000800:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < length; i++) {
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	e00c      	b.n	8000822 <shuffle_func+0x2e>
		dest[i] = src[i];
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	18d2      	adds	r2, r2, r3
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	68f9      	ldr	r1, [r7, #12]
 8000816:	18cb      	adds	r3, r1, r3
 8000818:	6812      	ldr	r2, [r2, #0]
 800081a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	3301      	adds	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	69fa      	ldr	r2, [r7, #28]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dbee      	blt.n	8000808 <shuffle_func+0x14>
	}

	for (int i = 0; i < entropy; i++) {
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	e031      	b.n	8000894 <shuffle_func+0xa0>
		uint32_t rand_idx_1 = rand() % length;
 8000830:	f005 fc24 	bl	800607c <rand>
 8000834:	0003      	movs	r3, r0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fddd 	bl	80003f8 <__aeabi_idivmod>
 800083e:	000b      	movs	r3, r1
 8000840:	617b      	str	r3, [r7, #20]
		uint32_t rand_idx_2 = (rand_idx_1 + rand() % entropy) % length;
 8000842:	f005 fc1b 	bl	800607c <rand>
 8000846:	0003      	movs	r3, r0
 8000848:	6839      	ldr	r1, [r7, #0]
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff fdd4 	bl	80003f8 <__aeabi_idivmod>
 8000850:	000b      	movs	r3, r1
 8000852:	001a      	movs	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	18d3      	adds	r3, r2, r3
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fce1 	bl	8000224 <__aeabi_uidivmod>
 8000862:	000b      	movs	r3, r1
 8000864:	613b      	str	r3, [r7, #16]

		dest[rand_idx_1] = src[rand_idx_2];
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	18d2      	adds	r2, r2, r3
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	68f9      	ldr	r1, [r7, #12]
 8000874:	18cb      	adds	r3, r1, r3
 8000876:	6812      	ldr	r2, [r2, #0]
 8000878:	601a      	str	r2, [r3, #0]
		dest[rand_idx_2] = src[rand_idx_1];
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	18d2      	adds	r2, r2, r3
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	68f9      	ldr	r1, [r7, #12]
 8000888:	18cb      	adds	r3, r1, r3
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < entropy; i++) {
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	3301      	adds	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69ba      	ldr	r2, [r7, #24]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbc9      	blt.n	8000830 <shuffle_func+0x3c>
	}
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b008      	add	sp, #32
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_GPIO_EXTI_Falling_Callback>:
 * @brief  The application entry point.
 * @retval int
 */

// EXTI Line9 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dbb      	adds	r3, r7, #6
 80008b2:	801a      	strh	r2, [r3, #0]
	currentMillis = HAL_GetTick(); // debounce
 80008b4:	f001 fe22 	bl	80024fc <HAL_GetTick>
 80008b8:	0002      	movs	r2, r0
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]

	if (GPIO_Pin == GPIO_PIN_9 && (currentMillis - previousMillis > 80)) { // 80 ms debounce
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d111      	bne.n	80008ee <HAL_GPIO_EXTI_Falling_Callback+0x46>
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	2b50      	cmp	r3, #80	@ 0x50
 80008d6:	d90a      	bls.n	80008ee <HAL_GPIO_EXTI_Falling_Callback+0x46>

		if (currentMillis - reset_timer > 2000) { // reset function - hold greater than 2 secs
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	1ad2      	subs	r2, r2, r3
 80008e2:	23fa      	movs	r3, #250	@ 0xfa
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d901      	bls.n	80008ee <HAL_GPIO_EXTI_Falling_Callback+0x46>
			NVIC_SystemReset();
 80008ea:	f7ff fdb9 	bl	8000460 <__NVIC_SystemReset>
			reset_timer = currentMillis;
		}
	}
}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	20000e48 	.word	0x20000e48
 80008fc:	20000e44 	.word	0x20000e44
 8000900:	20000e4c 	.word	0x20000e4c

08000904 <HAL_GPIO_EXTI_Rising_Callback>:

// EXTI Line9 External Interrupt ISR Handler CallBackFun
// modified for rising and falling callback
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	4c63      	ldr	r4, [pc, #396]	@ (8000a94 <HAL_GPIO_EXTI_Rising_Callback+0x190>)
 8000908:	44a5      	add	sp, r4
 800090a:	af02      	add	r7, sp, #8
 800090c:	0002      	movs	r2, r0
 800090e:	4b62      	ldr	r3, [pc, #392]	@ (8000a98 <HAL_GPIO_EXTI_Rising_Callback+0x194>)
 8000910:	2481      	movs	r4, #129	@ 0x81
 8000912:	00e4      	lsls	r4, r4, #3
 8000914:	191b      	adds	r3, r3, r4
 8000916:	19db      	adds	r3, r3, r7
 8000918:	801a      	strh	r2, [r3, #0]
	currentMillis = HAL_GetTick(); // debounce
 800091a:	f001 fdef 	bl	80024fc <HAL_GetTick>
 800091e:	0002      	movs	r2, r0
 8000920:	4b5e      	ldr	r3, [pc, #376]	@ (8000a9c <HAL_GPIO_EXTI_Rising_Callback+0x198>)
 8000922:	601a      	str	r2, [r3, #0]

//	&& HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)

	if (GPIO_Pin == GPIO_PIN_9 && (currentMillis - previousMillis > 80)) { // 80 ms debounce
 8000924:	4b5c      	ldr	r3, [pc, #368]	@ (8000a98 <HAL_GPIO_EXTI_Rising_Callback+0x194>)
 8000926:	191b      	adds	r3, r3, r4
 8000928:	19db      	adds	r3, r3, r7
 800092a:	881a      	ldrh	r2, [r3, #0]
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	429a      	cmp	r2, r3
 8000932:	d000      	beq.n	8000936 <HAL_GPIO_EXTI_Rising_Callback+0x32>
 8000934:	e0a9      	b.n	8000a8a <HAL_GPIO_EXTI_Rising_Callback+0x186>
 8000936:	4b59      	ldr	r3, [pc, #356]	@ (8000a9c <HAL_GPIO_EXTI_Rising_Callback+0x198>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	4b59      	ldr	r3, [pc, #356]	@ (8000aa0 <HAL_GPIO_EXTI_Rising_Callback+0x19c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b50      	cmp	r3, #80	@ 0x50
 8000942:	d800      	bhi.n	8000946 <HAL_GPIO_EXTI_Rising_Callback+0x42>
 8000944:	e0a1      	b.n	8000a8a <HAL_GPIO_EXTI_Rising_Callback+0x186>
		previousMillis = currentMillis;
 8000946:	4b55      	ldr	r3, [pc, #340]	@ (8000a9c <HAL_GPIO_EXTI_Rising_Callback+0x198>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b55      	ldr	r3, [pc, #340]	@ (8000aa0 <HAL_GPIO_EXTI_Rising_Callback+0x19c>)
 800094c:	601a      	str	r2, [r3, #0]
		reset_timer = currentMillis; // separate timer for press and release
 800094e:	4b53      	ldr	r3, [pc, #332]	@ (8000a9c <HAL_GPIO_EXTI_Rising_Callback+0x198>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b54      	ldr	r3, [pc, #336]	@ (8000aa4 <HAL_GPIO_EXTI_Rising_Callback+0x1a0>)
 8000954:	601a      	str	r2, [r3, #0]

		// tmp array
		uint32_t tmp_wav[NS];
		program_sel += 1;
 8000956:	4b54      	ldr	r3, [pc, #336]	@ (8000aa8 <HAL_GPIO_EXTI_Rising_Callback+0x1a4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4b52      	ldr	r3, [pc, #328]	@ (8000aa8 <HAL_GPIO_EXTI_Rising_Callback+0x1a4>)
 8000960:	701a      	strb	r2, [r3, #0]

		if (program_sel > PROGRAMS) {
 8000962:	4b51      	ldr	r3, [pc, #324]	@ (8000aa8 <HAL_GPIO_EXTI_Rising_Callback+0x1a4>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d800      	bhi.n	800096c <HAL_GPIO_EXTI_Rising_Callback+0x68>
 800096a:	e08e      	b.n	8000a8a <HAL_GPIO_EXTI_Rising_Callback+0x186>

			program_sel = 1;
 800096c:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa8 <HAL_GPIO_EXTI_Rising_Callback+0x1a4>)
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
			entropy_multiplier += 1;
 8000972:	4b4e      	ldr	r3, [pc, #312]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b4c      	ldr	r3, [pc, #304]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 800097c:	701a      	strb	r2, [r3, #0]

			// ENTROPY CHANGE
			if (entropy == 5) {
 800097e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab0 <HAL_GPIO_EXTI_Rising_Callback+0x1ac>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	2b05      	cmp	r3, #5
 8000986:	d111      	bne.n	80009ac <HAL_GPIO_EXTI_Rising_Callback+0xa8>
				triangle_smash_func(tmp_wav, sine, triangle, NS,
 8000988:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab4 <HAL_GPIO_EXTI_Rising_Callback+0x1b0>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	001a      	movs	r2, r3
 8000990:	4b46      	ldr	r3, [pc, #280]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4353      	muls	r3, r2
 8000996:	2280      	movs	r2, #128	@ 0x80
 8000998:	0054      	lsls	r4, r2, #1
 800099a:	4a47      	ldr	r2, [pc, #284]	@ (8000ab8 <HAL_GPIO_EXTI_Rising_Callback+0x1b4>)
 800099c:	4947      	ldr	r1, [pc, #284]	@ (8000abc <HAL_GPIO_EXTI_Rising_Callback+0x1b8>)
 800099e:	2008      	movs	r0, #8
 80009a0:	1838      	adds	r0, r7, r0
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	0023      	movs	r3, r4
 80009a6:	f7ff fd6d 	bl	8000484 <triangle_smash_func>
 80009aa:	e061      	b.n	8000a70 <HAL_GPIO_EXTI_Rising_Callback+0x16c>
						entropy_rate * entropy_multiplier);
			}

			else if (entropy == 4) {
 80009ac:	4b40      	ldr	r3, [pc, #256]	@ (8000ab0 <HAL_GPIO_EXTI_Rising_Callback+0x1ac>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d10f      	bne.n	80009d6 <HAL_GPIO_EXTI_Rising_Callback+0xd2>
				XOR_func(tmp_wav, sine, NS, entropy_rate * entropy_multiplier); // kind of artificial/sickly
 80009b6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab4 <HAL_GPIO_EXTI_Rising_Callback+0x1b0>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	001a      	movs	r2, r3
 80009be:	4b3b      	ldr	r3, [pc, #236]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4353      	muls	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	0052      	lsls	r2, r2, #1
 80009ca:	493c      	ldr	r1, [pc, #240]	@ (8000abc <HAL_GPIO_EXTI_Rising_Callback+0x1b8>)
 80009cc:	2008      	movs	r0, #8
 80009ce:	1838      	adds	r0, r7, r0
 80009d0:	f7ff fda7 	bl	8000522 <XOR_func>
 80009d4:	e04c      	b.n	8000a70 <HAL_GPIO_EXTI_Rising_Callback+0x16c>
			}

			else if (entropy == 3) {
 80009d6:	4b36      	ldr	r3, [pc, #216]	@ (8000ab0 <HAL_GPIO_EXTI_Rising_Callback+0x1ac>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d10f      	bne.n	8000a00 <HAL_GPIO_EXTI_Rising_Callback+0xfc>
				top2bottom_func(tmp_wav, sine, NS,
 80009e0:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <HAL_GPIO_EXTI_Rising_Callback+0x1b0>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	001a      	movs	r2, r3
 80009e8:	4b30      	ldr	r3, [pc, #192]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4353      	muls	r3, r2
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	2280      	movs	r2, #128	@ 0x80
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	4931      	ldr	r1, [pc, #196]	@ (8000abc <HAL_GPIO_EXTI_Rising_Callback+0x1b8>)
 80009f6:	2008      	movs	r0, #8
 80009f8:	1838      	adds	r0, r7, r0
 80009fa:	f7ff fddf 	bl	80005bc <top2bottom_func>
 80009fe:	e037      	b.n	8000a70 <HAL_GPIO_EXTI_Rising_Callback+0x16c>
						entropy_rate * entropy_multiplier); // nastyy
			}

			else if (entropy == 2) {
 8000a00:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <HAL_GPIO_EXTI_Rising_Callback+0x1ac>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d10f      	bne.n	8000a2a <HAL_GPIO_EXTI_Rising_Callback+0x126>
				bitcrush_func(tmp_wav, sine, NS,
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab4 <HAL_GPIO_EXTI_Rising_Callback+0x1b0>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4353      	muls	r3, r2
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	4927      	ldr	r1, [pc, #156]	@ (8000abc <HAL_GPIO_EXTI_Rising_Callback+0x1b8>)
 8000a20:	2008      	movs	r0, #8
 8000a22:	1838      	adds	r0, r7, r0
 8000a24:	f7ff fdf9 	bl	800061a <bitcrush_func>
 8000a28:	e022      	b.n	8000a70 <HAL_GPIO_EXTI_Rising_Callback+0x16c>
						entropy_rate * entropy_multiplier); // beep beep
			}

			else if (entropy == 1) {
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <HAL_GPIO_EXTI_Rising_Callback+0x1ac>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10f      	bne.n	8000a54 <HAL_GPIO_EXTI_Rising_Callback+0x150>
				clip_func(tmp_wav, sine, NS, entropy_rate * entropy_multiplier); // tonal, bell-like - swanny whistle
 8000a34:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab4 <HAL_GPIO_EXTI_Rising_Callback+0x1b0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4353      	muls	r3, r2
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	0052      	lsls	r2, r2, #1
 8000a48:	491c      	ldr	r1, [pc, #112]	@ (8000abc <HAL_GPIO_EXTI_Rising_Callback+0x1b8>)
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	1838      	adds	r0, r7, r0
 8000a4e:	f7ff fe93 	bl	8000778 <clip_func>
 8000a52:	e00d      	b.n	8000a70 <HAL_GPIO_EXTI_Rising_Callback+0x16c>
			}

			else {
				shuffle_func(tmp_wav, sine, NS,
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_GPIO_EXTI_Rising_Callback+0x1b0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_GPIO_EXTI_Rising_Callback+0x1a8>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4353      	muls	r3, r2
 8000a62:	2280      	movs	r2, #128	@ 0x80
 8000a64:	0052      	lsls	r2, r2, #1
 8000a66:	4915      	ldr	r1, [pc, #84]	@ (8000abc <HAL_GPIO_EXTI_Rising_Callback+0x1b8>)
 8000a68:	2008      	movs	r0, #8
 8000a6a:	1838      	adds	r0, r7, r0
 8000a6c:	f7ff fec2 	bl	80007f4 <shuffle_func>
						entropy_rate * entropy_multiplier); // classic crackly static
			}

			memcpy(wave_LUT, tmp_wav, sizeof(tmp_wav));
 8000a70:	4a13      	ldr	r2, [pc, #76]	@ (8000ac0 <HAL_GPIO_EXTI_Rising_Callback+0x1bc>)
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <HAL_GPIO_EXTI_Rising_Callback+0x1c0>)
 8000a74:	2181      	movs	r1, #129	@ 0x81
 8000a76:	00c9      	lsls	r1, r1, #3
 8000a78:	185b      	adds	r3, r3, r1
 8000a7a:	19db      	adds	r3, r3, r7
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	0019      	movs	r1, r3
 8000a80:	2380      	movs	r3, #128	@ 0x80
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	001a      	movs	r2, r3
 8000a86:	f005 fc30 	bl	80062ea <memcpy>
		}
	}
	//ENDS HERE
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_GPIO_EXTI_Rising_Callback+0x1c4>)
 8000a90:	449d      	add	sp, r3
 8000a92:	bd90      	pop	{r4, r7, pc}
 8000a94:	fffffbec 	.word	0xfffffbec
 8000a98:	fffffbfe 	.word	0xfffffbfe
 8000a9c:	20000e48 	.word	0x20000e48
 8000aa0:	20000e44 	.word	0x20000e44
 8000aa4:	20000e4c 	.word	0x20000e4c
 8000aa8:	20000804 	.word	0x20000804
 8000aac:	20000e40 	.word	0x20000e40
 8000ab0:	20000806 	.word	0x20000806
 8000ab4:	20000e41 	.word	0x20000e41
 8000ab8:	20000400 	.word	0x20000400
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	2000088c 	.word	0x2000088c
 8000ac4:	fffffc00 	.word	0xfffffc00
 8000ac8:	0000040c 	.word	0x0000040c

08000acc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000acc:	b5b0      	push	{r4, r5, r7, lr}
 8000ace:	4ce5      	ldr	r4, [pc, #916]	@ (8000e64 <main+0x398>)
 8000ad0:	44a5      	add	sp, r4
 8000ad2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ad4:	f001 fc96 	bl	8002404 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ad8:	f000 ff7a 	bl	80019d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000adc:	f001 f9c0 	bl	8001e60 <MX_GPIO_Init>
	MX_DMA_Init();
 8000ae0:	f001 f998 	bl	8001e14 <MX_DMA_Init>
	MX_TIM1_Init();
 8000ae4:	f001 f852 	bl	8001b8c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ae8:	f001 f91a 	bl	8001d20 <MX_TIM2_Init>
	MX_ADC1_Init();
 8000aec:	f000 ffce 	bl	8001a8c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

// TIM1->CCR1 = 128; // PWM test
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000af0:	4bdd      	ldr	r3, [pc, #884]	@ (8000e68 <main+0x39c>)
 8000af2:	2100      	movs	r1, #0
 8000af4:	0018      	movs	r0, r3
 8000af6:	f004 fa99 	bl	800502c <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000afa:	4bdc      	ldr	r3, [pc, #880]	@ (8000e6c <main+0x3a0>)
 8000afc:	2100      	movs	r1, #0
 8000afe:	0018      	movs	r0, r3
 8000b00:	f004 f956 	bl	8004db0 <HAL_TIM_OC_Start>
	HAL_DMA_Start_IT(&hdma_tim2_ch1, (uint32_t) sine, DstAddress, NS);
 8000b04:	49da      	ldr	r1, [pc, #872]	@ (8000e70 <main+0x3a4>)
 8000b06:	4bdb      	ldr	r3, [pc, #876]	@ (8000e74 <main+0x3a8>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	2380      	movs	r3, #128	@ 0x80
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	48da      	ldr	r0, [pc, #872]	@ (8000e78 <main+0x3ac>)
 8000b10:	f002 fee2 	bl	80038d8 <HAL_DMA_Start_IT>
	__HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 8000b14:	4bd5      	ldr	r3, [pc, #852]	@ (8000e6c <main+0x3a0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	4bd4      	ldr	r3, [pc, #848]	@ (8000e6c <main+0x3a0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2180      	movs	r1, #128	@ 0x80
 8000b20:	0089      	lsls	r1, r1, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	60da      	str	r2, [r3, #12]
// Calibrate The ADC On Power-Up For Better Accuracy
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000b26:	4bd5      	ldr	r3, [pc, #852]	@ (8000e7c <main+0x3b0>)
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 fc71 	bl	8003410 <HAL_ADCEx_Calibration_Start>

	//get first adc results to initialise entropy cores
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount);
 8000b2e:	2302      	movs	r3, #2
 8000b30:	001a      	movs	r2, r3
 8000b32:	49d3      	ldr	r1, [pc, #844]	@ (8000e80 <main+0x3b4>)
 8000b34:	4bd1      	ldr	r3, [pc, #836]	@ (8000e7c <main+0x3b0>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 ffea 	bl	8002b10 <HAL_ADC_Start_DMA>
	while (adcConversionComplete == 0) {
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	4bd1      	ldr	r3, [pc, #836]	@ (8000e84 <main+0x3b8>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0fa      	beq.n	8000b3e <main+0x72>

	}
	adcConversionComplete = 0;
 8000b48:	4bce      	ldr	r3, [pc, #824]	@ (8000e84 <main+0x3b8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]

	// noise
	uint32_t noise[NS];

	// saw_xmax wave tilted 0.96 - 8 bit resolution scaled to 94% max val
	uint32_t saw_xmax[NS] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13,
 8000b4e:	4bce      	ldr	r3, [pc, #824]	@ (8000e88 <main+0x3bc>)
 8000b50:	4ace      	ldr	r2, [pc, #824]	@ (8000e8c <main+0x3c0>)
 8000b52:	189b      	adds	r3, r3, r2
 8000b54:	19da      	adds	r2, r3, r7
 8000b56:	4bce      	ldr	r3, [pc, #824]	@ (8000e90 <main+0x3c4>)
 8000b58:	0010      	movs	r0, r2
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	001a      	movs	r2, r3
 8000b62:	f005 fbc2 	bl	80062ea <memcpy>
			209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
			222, 223, 224, 225, 226, 227, 228, 229, 230, 230, 231, 232, 233,
			234, 235, 236, 237, 238, 239, 235, 188, 141, 94, 47, 0 };

	//set up variables
	memcpy(wave_LUT, sine, sizeof(sine));
 8000b66:	4acb      	ldr	r2, [pc, #812]	@ (8000e94 <main+0x3c8>)
 8000b68:	4bc1      	ldr	r3, [pc, #772]	@ (8000e70 <main+0x3a4>)
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	2380      	movs	r3, #128	@ 0x80
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	001a      	movs	r2, r3
 8000b74:	f005 fbb9 	bl	80062ea <memcpy>
	srand(adcResultsDMA[1]); // set random seed
 8000b78:	4bc1      	ldr	r3, [pc, #772]	@ (8000e80 <main+0x3b4>)
 8000b7a:	885b      	ldrh	r3, [r3, #2]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f005 fa4c 	bl	800601c <srand>

	entropy_rate = 1 + rand() % ENTROPY_RANGE;
 8000b84:	f005 fa7a 	bl	800607c <rand>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	2114      	movs	r1, #20
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff fc33 	bl	80003f8 <__aeabi_idivmod>
 8000b92:	000b      	movs	r3, r1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	3301      	adds	r3, #1
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4bbf      	ldr	r3, [pc, #764]	@ (8000e98 <main+0x3cc>)
 8000b9c:	701a      	strb	r2, [r3, #0]
	uint32_t ctr = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	4abe      	ldr	r2, [pc, #760]	@ (8000e9c <main+0x3d0>)
 8000ba2:	18ba      	adds	r2, r7, r2
 8000ba4:	6013      	str	r3, [r2, #0]
	uint16_t phase = 0;
 8000ba6:	4bbe      	ldr	r3, [pc, #760]	@ (8000ea0 <main+0x3d4>)
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
	uint8_t phase_add = 15;
 8000bae:	4bbd      	ldr	r3, [pc, #756]	@ (8000ea4 <main+0x3d8>)
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	701a      	strb	r2, [r3, #0]
	uint32_t freq = 1000;
 8000bb6:	23fa      	movs	r3, #250	@ 0xfa
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4abb      	ldr	r2, [pc, #748]	@ (8000ea8 <main+0x3dc>)
 8000bbc:	18ba      	adds	r2, r7, r2
 8000bbe:	6013      	str	r3, [r2, #0]
	uint32_t ctr_scale = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4aba      	ldr	r2, [pc, #744]	@ (8000eac <main+0x3e0>)
 8000bc4:	18ba      	adds	r2, r7, r2
 8000bc6:	6013      	str	r3, [r2, #0]
	uint32_t table_lookup = 1000;
 8000bc8:	23fa      	movs	r3, #250	@ 0xfa
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	22c1      	movs	r2, #193	@ 0xc1
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	18ba      	adds	r2, r7, r2
 8000bd2:	6013      	str	r3, [r2, #0]
	uint32_t ad0_bitshift = 1000;
 8000bd4:	23fa      	movs	r3, #250	@ 0xfa
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4ab5      	ldr	r2, [pc, #724]	@ (8000eb0 <main+0x3e4>)
 8000bda:	18ba      	adds	r2, r7, r2
 8000bdc:	6013      	str	r3, [r2, #0]
	uint16_t period = 100;
 8000bde:	4bb5      	ldr	r3, [pc, #724]	@ (8000eb4 <main+0x3e8>)
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	2264      	movs	r2, #100	@ 0x64
 8000be4:	801a      	strh	r2, [r3, #0]

	entropy = rand() % 6;
 8000be6:	f005 fa49 	bl	800607c <rand>
 8000bea:	0003      	movs	r3, r0
 8000bec:	2106      	movs	r1, #6
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fc02 	bl	80003f8 <__aeabi_idivmod>
 8000bf4:	000b      	movs	r3, r1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4baf      	ldr	r3, [pc, #700]	@ (8000eb8 <main+0x3ec>)
 8000bfa:	701a      	strb	r2, [r3, #0]
	group = rand() % 3 + 1;
 8000bfc:	f005 fa3e 	bl	800607c <rand>
 8000c00:	0003      	movs	r3, r0
 8000c02:	2103      	movs	r1, #3
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fbf7 	bl	80003f8 <__aeabi_idivmod>
 8000c0a:	000b      	movs	r3, r1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4baa      	ldr	r3, [pc, #680]	@ (8000ebc <main+0x3f0>)
 8000c14:	701a      	strb	r2, [r3, #0]

	while (1) {

		///// GROUP 1
		///// WEATHERED
		if (group == 1) {
 8000c16:	4ba9      	ldr	r3, [pc, #676]	@ (8000ebc <main+0x3f0>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d000      	beq.n	8000c20 <main+0x154>
 8000c1e:	e1b1      	b.n	8000f84 <main+0x4b8>

			// DMA
			DMA1_Channel1->CMAR = (uint32_t) wave_LUT; // SrcAddress
 8000c20:	4ba7      	ldr	r3, [pc, #668]	@ (8000ec0 <main+0x3f4>)
 8000c22:	4a9c      	ldr	r2, [pc, #624]	@ (8000e94 <main+0x3c8>)
 8000c24:	60da      	str	r2, [r3, #12]

			if (program_sel == 1) {
 8000c26:	4ba7      	ldr	r3, [pc, #668]	@ (8000ec4 <main+0x3f8>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d000      	beq.n	8000c30 <main+0x164>
 8000c2e:	e085      	b.n	8000d3c <main+0x270>
				/////////////
				// PROGRAM 1

				ctr_scale = (adcResultsDMA[1] >> 9) + 1;
 8000c30:	4b93      	ldr	r3, [pc, #588]	@ (8000e80 <main+0x3b4>)
 8000c32:	885b      	ldrh	r3, [r3, #2]
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	0a5b      	lsrs	r3, r3, #9
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	4a9b      	ldr	r2, [pc, #620]	@ (8000eac <main+0x3e0>)
 8000c3e:	18ba      	adds	r2, r7, r2
 8000c40:	6013      	str	r3, [r2, #0]

				for (int i = 0; i < NS; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	22c3      	movs	r2, #195	@ 0xc3
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	18ba      	adds	r2, r7, r2
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e019      	b.n	8000c82 <main+0x1b6>
					noise[i] = (rand() % 240) + 1;
 8000c4e:	f005 fa15 	bl	800607c <rand>
 8000c52:	0003      	movs	r3, r0
 8000c54:	21f0      	movs	r1, #240	@ 0xf0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff fbce 	bl	80003f8 <__aeabi_idivmod>
 8000c5c:	000b      	movs	r3, r1
 8000c5e:	3301      	adds	r3, #1
 8000c60:	0019      	movs	r1, r3
 8000c62:	4b99      	ldr	r3, [pc, #612]	@ (8000ec8 <main+0x3fc>)
 8000c64:	4a89      	ldr	r2, [pc, #548]	@ (8000e8c <main+0x3c0>)
 8000c66:	189b      	adds	r3, r3, r2
 8000c68:	19db      	adds	r3, r3, r7
 8000c6a:	20c3      	movs	r0, #195	@ 0xc3
 8000c6c:	0100      	lsls	r0, r0, #4
 8000c6e:	183a      	adds	r2, r7, r0
 8000c70:	6812      	ldr	r2, [r2, #0]
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	50d1      	str	r1, [r2, r3]
				for (int i = 0; i < NS; i++) {
 8000c76:	0002      	movs	r2, r0
 8000c78:	18bb      	adds	r3, r7, r2
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	18ba      	adds	r2, r7, r2
 8000c80:	6013      	str	r3, [r2, #0]
 8000c82:	23c3      	movs	r3, #195	@ 0xc3
 8000c84:	011b      	lsls	r3, r3, #4
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2bff      	cmp	r3, #255	@ 0xff
 8000c8c:	dddf      	ble.n	8000c4e <main+0x182>
				}

				table_lookup = noise[phase];
 8000c8e:	4b84      	ldr	r3, [pc, #528]	@ (8000ea0 <main+0x3d4>)
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	881a      	ldrh	r2, [r3, #0]
 8000c94:	4b8c      	ldr	r3, [pc, #560]	@ (8000ec8 <main+0x3fc>)
 8000c96:	497d      	ldr	r1, [pc, #500]	@ (8000e8c <main+0x3c0>)
 8000c98:	185b      	adds	r3, r3, r1
 8000c9a:	19db      	adds	r3, r3, r7
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	58d3      	ldr	r3, [r2, r3]
 8000ca0:	21c1      	movs	r1, #193	@ 0xc1
 8000ca2:	0109      	lsls	r1, r1, #4
 8000ca4:	187a      	adds	r2, r7, r1
 8000ca6:	6013      	str	r3, [r2, #0]
				ad0_bitshift = (adcResultsDMA[0] >> 3);
 8000ca8:	4b75      	ldr	r3, [pc, #468]	@ (8000e80 <main+0x3b4>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	487f      	ldr	r0, [pc, #508]	@ (8000eb0 <main+0x3e4>)
 8000cb4:	183a      	adds	r2, r7, r0
 8000cb6:	6013      	str	r3, [r2, #0]
				freq = ad0_bitshift
						+ (table_lookup) * ((adcResultsDMA[1] >> 10) + 1);
 8000cb8:	4b71      	ldr	r3, [pc, #452]	@ (8000e80 <main+0x3b4>)
 8000cba:	885b      	ldrh	r3, [r3, #2]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	0a9b      	lsrs	r3, r3, #10
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4353      	muls	r3, r2
				freq = ad0_bitshift
 8000ccc:	183a      	adds	r2, r7, r0
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	4a75      	ldr	r2, [pc, #468]	@ (8000ea8 <main+0x3dc>)
 8000cd4:	18b9      	adds	r1, r7, r2
 8000cd6:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 8000cd8:	18bb      	adds	r3, r7, r2
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <main+0x21a>
					freq = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	18ba      	adds	r2, r7, r2
 8000ce4:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 8000ce6:	2380      	movs	r3, #128	@ 0x80
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	4a6f      	ldr	r2, [pc, #444]	@ (8000ea8 <main+0x3dc>)
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 8000cf2:	4a6a      	ldr	r2, [pc, #424]	@ (8000e9c <main+0x3d0>)
 8000cf4:	18bb      	adds	r3, r7, r2
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	18b9      	adds	r1, r7, r2
 8000cfc:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 8000cfe:	18bb      	adds	r3, r7, r2
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a6a      	ldr	r2, [pc, #424]	@ (8000eac <main+0x3e0>)
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	6811      	ldr	r1, [r2, #0]
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff fa8b 	bl	8000224 <__aeabi_uidivmod>
 8000d0e:	1e0b      	subs	r3, r1, #0
 8000d10:	d105      	bne.n	8000d1e <main+0x252>
					phase += 10;
 8000d12:	4a63      	ldr	r2, [pc, #396]	@ (8000ea0 <main+0x3d4>)
 8000d14:	18bb      	adds	r3, r7, r2
 8000d16:	18ba      	adds	r2, r7, r2
 8000d18:	8812      	ldrh	r2, [r2, #0]
 8000d1a:	320a      	adds	r2, #10
 8000d1c:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 8000d1e:	4a60      	ldr	r2, [pc, #384]	@ (8000ea0 <main+0x3d4>)
 8000d20:	18bb      	adds	r3, r7, r2
 8000d22:	18ba      	adds	r2, r7, r2
 8000d24:	8812      	ldrh	r2, [r2, #0]
 8000d26:	21ff      	movs	r1, #255	@ 0xff
 8000d28:	400a      	ands	r2, r1
 8000d2a:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 8000d2c:	495b      	ldr	r1, [pc, #364]	@ (8000e9c <main+0x3d0>)
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	22ff      	movs	r2, #255	@ 0xff
 8000d34:	4013      	ands	r3, r2
 8000d36:	187a      	adds	r2, r7, r1
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e123      	b.n	8000f84 <main+0x4b8>
			}

			else if (program_sel == 2) {
 8000d3c:	4b61      	ldr	r3, [pc, #388]	@ (8000ec4 <main+0x3f8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d167      	bne.n	8000e14 <main+0x348>
				/////////////
				// PROGRAM 2

				ctr_scale = (adcResultsDMA[1] >> 9) + 1;
 8000d44:	4b4e      	ldr	r3, [pc, #312]	@ (8000e80 <main+0x3b4>)
 8000d46:	885b      	ldrh	r3, [r3, #2]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	0a5b      	lsrs	r3, r3, #9
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a56      	ldr	r2, [pc, #344]	@ (8000eac <main+0x3e0>)
 8000d52:	18ba      	adds	r2, r7, r2
 8000d54:	6013      	str	r3, [r2, #0]
				table_lookup = sine[phase];
 8000d56:	4b52      	ldr	r3, [pc, #328]	@ (8000ea0 <main+0x3d4>)
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	881a      	ldrh	r2, [r3, #0]
 8000d5c:	4b44      	ldr	r3, [pc, #272]	@ (8000e70 <main+0x3a4>)
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	58d3      	ldr	r3, [r2, r3]
 8000d62:	24c1      	movs	r4, #193	@ 0xc1
 8000d64:	0124      	lsls	r4, r4, #4
 8000d66:	193a      	adds	r2, r7, r4
 8000d68:	6013      	str	r3, [r2, #0]
				ad0_bitshift = (adcResultsDMA[0] >> 3); // Counter Period (ARR) random length
 8000d6a:	4b45      	ldr	r3, [pc, #276]	@ (8000e80 <main+0x3b4>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4d4e      	ldr	r5, [pc, #312]	@ (8000eb0 <main+0x3e4>)
 8000d76:	197a      	adds	r2, r7, r5
 8000d78:	6013      	str	r3, [r2, #0]
				freq = ad0_bitshift + (table_lookup) * ((rand() % 100) + 1);
 8000d7a:	f005 f97f 	bl	800607c <rand>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	2164      	movs	r1, #100	@ 0x64
 8000d82:	0018      	movs	r0, r3
 8000d84:	f7ff fb38 	bl	80003f8 <__aeabi_idivmod>
 8000d88:	000b      	movs	r3, r1
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4353      	muls	r3, r2
 8000d94:	197a      	adds	r2, r7, r5
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	18d3      	adds	r3, r2, r3
 8000d9a:	4a43      	ldr	r2, [pc, #268]	@ (8000ea8 <main+0x3dc>)
 8000d9c:	18b9      	adds	r1, r7, r2
 8000d9e:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 8000da0:	18bb      	adds	r3, r7, r2
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <main+0x2e2>
					freq = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	18ba      	adds	r2, r7, r2
 8000dac:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 8000dae:	2380      	movs	r3, #128	@ 0x80
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ea8 <main+0x3dc>)
 8000db4:	18ba      	adds	r2, r7, r2
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 8000dba:	4a38      	ldr	r2, [pc, #224]	@ (8000e9c <main+0x3d0>)
 8000dbc:	18bb      	adds	r3, r7, r2
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	18b9      	adds	r1, r7, r2
 8000dc4:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 8000dc6:	18bb      	adds	r3, r7, r2
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a38      	ldr	r2, [pc, #224]	@ (8000eac <main+0x3e0>)
 8000dcc:	18ba      	adds	r2, r7, r2
 8000dce:	6811      	ldr	r1, [r2, #0]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff fa27 	bl	8000224 <__aeabi_uidivmod>
 8000dd6:	1e0b      	subs	r3, r1, #0
 8000dd8:	d10d      	bne.n	8000df6 <main+0x32a>
					phase ^= (adcResultsDMA[1] >> 3);
 8000dda:	4b29      	ldr	r3, [pc, #164]	@ (8000e80 <main+0x3b4>)
 8000ddc:	885b      	ldrh	r3, [r3, #2]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	08db      	lsrs	r3, r3, #3
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b21a      	sxth	r2, r3
 8000de6:	492e      	ldr	r1, [pc, #184]	@ (8000ea0 <main+0x3d4>)
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2000      	movs	r0, #0
 8000dec:	5e1b      	ldrsh	r3, [r3, r0]
 8000dee:	4053      	eors	r3, r2
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 8000df6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ea0 <main+0x3d4>)
 8000df8:	18bb      	adds	r3, r7, r2
 8000dfa:	18ba      	adds	r2, r7, r2
 8000dfc:	8812      	ldrh	r2, [r2, #0]
 8000dfe:	21ff      	movs	r1, #255	@ 0xff
 8000e00:	400a      	ands	r2, r1
 8000e02:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 8000e04:	4925      	ldr	r1, [pc, #148]	@ (8000e9c <main+0x3d0>)
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	22ff      	movs	r2, #255	@ 0xff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	187a      	adds	r2, r7, r1
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e0b7      	b.n	8000f84 <main+0x4b8>
			}

			else if (program_sel == 3) {
 8000e14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <main+0x3f8>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d000      	beq.n	8000e1e <main+0x352>
 8000e1c:	e0b2      	b.n	8000f84 <main+0x4b8>
				/////////////
				// PROGRAM 3

				ctr_scale = (adcResultsDMA[1] >> 9) + 1;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <main+0x3b4>)
 8000e20:	885b      	ldrh	r3, [r3, #2]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	0a5b      	lsrs	r3, r3, #9
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a20      	ldr	r2, [pc, #128]	@ (8000eac <main+0x3e0>)
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	6013      	str	r3, [r2, #0]
				table_lookup = sine[phase];
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <main+0x3d4>)
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	881a      	ldrh	r2, [r3, #0]
 8000e36:	4b0e      	ldr	r3, [pc, #56]	@ (8000e70 <main+0x3a4>)
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	58d3      	ldr	r3, [r2, r3]
 8000e3c:	22c1      	movs	r2, #193	@ 0xc1
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	18ba      	adds	r2, r7, r2
 8000e42:	6013      	str	r3, [r2, #0]
				uint32_t rand_mod = (adcResultsDMA[1] >> 9);
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <main+0x3b4>)
 8000e46:	885b      	ldrh	r3, [r3, #2]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	0a5b      	lsrs	r3, r3, #9
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ecc <main+0x400>)
 8000e50:	18b9      	adds	r1, r7, r2
 8000e52:	600b      	str	r3, [r1, #0]
				if (rand_mod > 100)
 8000e54:	18bb      	adds	r3, r7, r2
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b64      	cmp	r3, #100	@ 0x64
 8000e5a:	d939      	bls.n	8000ed0 <main+0x404>
					rand_mod = 100;
 8000e5c:	2364      	movs	r3, #100	@ 0x64
 8000e5e:	18ba      	adds	r2, r7, r2
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e03d      	b.n	8000ee0 <main+0x414>
 8000e64:	fffff3b8 	.word	0xfffff3b8
 8000e68:	20000d4c 	.word	0x20000d4c
 8000e6c:	20000d98 	.word	0x20000d98
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000800 	.word	0x20000800
 8000e78:	20000de4 	.word	0x20000de4
 8000e7c:	20000c8c 	.word	0x20000c8c
 8000e80:	20000e50 	.word	0x20000e50
 8000e84:	20000e54 	.word	0x20000e54
 8000e88:	fffff7b8 	.word	0xfffff7b8
 8000e8c:	00000c48 	.word	0x00000c48
 8000e90:	080070d8 	.word	0x080070d8
 8000e94:	2000088c 	.word	0x2000088c
 8000e98:	20000e41 	.word	0x20000e41
 8000e9c:	00000c44 	.word	0x00000c44
 8000ea0:	00000c42 	.word	0x00000c42
 8000ea4:	00000c17 	.word	0x00000c17
 8000ea8:	00000c3c 	.word	0x00000c3c
 8000eac:	00000c38 	.word	0x00000c38
 8000eb0:	00000c0c 	.word	0x00000c0c
 8000eb4:	00000c36 	.word	0x00000c36
 8000eb8:	20000806 	.word	0x20000806
 8000ebc:	20000805 	.word	0x20000805
 8000ec0:	40020008 	.word	0x40020008
 8000ec4:	20000804 	.word	0x20000804
 8000ec8:	fffffbb8 	.word	0xfffffbb8
 8000ecc:	00000c2c 	.word	0x00000c2c
				else if (rand_mod < 1)
 8000ed0:	4a90      	ldr	r2, [pc, #576]	@ (8001114 <main+0x648>)
 8000ed2:	18bb      	adds	r3, r7, r2
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <main+0x414>
					rand_mod = 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	18ba      	adds	r2, r7, r2
 8000ede:	6013      	str	r3, [r2, #0]

				ad0_bitshift = ((adcResultsDMA[0] >> 5) + 10)
 8000ee0:	4b8d      	ldr	r3, [pc, #564]	@ (8001118 <main+0x64c>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	330a      	adds	r3, #10
 8000eec:	001c      	movs	r4, r3
						* (rand() % rand_mod + 1);
 8000eee:	f005 f8c5 	bl	800607c <rand>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	4a87      	ldr	r2, [pc, #540]	@ (8001114 <main+0x648>)
 8000ef6:	18ba      	adds	r2, r7, r2
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff f992 	bl	8000224 <__aeabi_uidivmod>
 8000f00:	000b      	movs	r3, r1
 8000f02:	3301      	adds	r3, #1
				ad0_bitshift = ((adcResultsDMA[0] >> 5) + 10)
 8000f04:	4363      	muls	r3, r4
 8000f06:	4a85      	ldr	r2, [pc, #532]	@ (800111c <main+0x650>)
 8000f08:	18b9      	adds	r1, r7, r2
 8000f0a:	600b      	str	r3, [r1, #0]
				freq = ad0_bitshift + (table_lookup) * 2;
 8000f0c:	23c1      	movs	r3, #193	@ 0xc1
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	18ba      	adds	r2, r7, r2
 8000f18:	6812      	ldr	r2, [r2, #0]
 8000f1a:	18d3      	adds	r3, r2, r3
 8000f1c:	4a80      	ldr	r2, [pc, #512]	@ (8001120 <main+0x654>)
 8000f1e:	18b9      	adds	r1, r7, r2
 8000f20:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 8000f22:	18bb      	adds	r3, r7, r2
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <main+0x464>
					freq = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	18ba      	adds	r2, r7, r2
 8000f2e:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 8000f30:	2380      	movs	r3, #128	@ 0x80
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	4a7a      	ldr	r2, [pc, #488]	@ (8001120 <main+0x654>)
 8000f36:	18ba      	adds	r2, r7, r2
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 8000f3c:	4a79      	ldr	r2, [pc, #484]	@ (8001124 <main+0x658>)
 8000f3e:	18bb      	adds	r3, r7, r2
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	18b9      	adds	r1, r7, r2
 8000f46:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 8000f48:	18bb      	adds	r3, r7, r2
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a76      	ldr	r2, [pc, #472]	@ (8001128 <main+0x65c>)
 8000f4e:	18ba      	adds	r2, r7, r2
 8000f50:	6811      	ldr	r1, [r2, #0]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff f966 	bl	8000224 <__aeabi_uidivmod>
 8000f58:	1e0b      	subs	r3, r1, #0
 8000f5a:	d105      	bne.n	8000f68 <main+0x49c>
					phase += 1;
 8000f5c:	4a73      	ldr	r2, [pc, #460]	@ (800112c <main+0x660>)
 8000f5e:	18bb      	adds	r3, r7, r2
 8000f60:	18ba      	adds	r2, r7, r2
 8000f62:	8812      	ldrh	r2, [r2, #0]
 8000f64:	3201      	adds	r2, #1
 8000f66:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 8000f68:	4a70      	ldr	r2, [pc, #448]	@ (800112c <main+0x660>)
 8000f6a:	18bb      	adds	r3, r7, r2
 8000f6c:	18ba      	adds	r2, r7, r2
 8000f6e:	8812      	ldrh	r2, [r2, #0]
 8000f70:	21ff      	movs	r1, #255	@ 0xff
 8000f72:	400a      	ands	r2, r1
 8000f74:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 8000f76:	496b      	ldr	r1, [pc, #428]	@ (8001124 <main+0x658>)
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	22ff      	movs	r2, #255	@ 0xff
 8000f7e:	4013      	ands	r3, r2
 8000f80:	187a      	adds	r2, r7, r1
 8000f82:	6013      	str	r3, [r2, #0]
		}

		///// GROUP 2
		///// PITCHED

		if (group == 2) {
 8000f84:	4b6a      	ldr	r3, [pc, #424]	@ (8001130 <main+0x664>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d000      	beq.n	8000f8e <main+0x4c2>
 8000f8c:	e138      	b.n	8001200 <main+0x734>

			// DMA
			DMA1_Channel1->CMAR = (uint32_t) wave_LUT; // SrcAddress
 8000f8e:	4b69      	ldr	r3, [pc, #420]	@ (8001134 <main+0x668>)
 8000f90:	4a69      	ldr	r2, [pc, #420]	@ (8001138 <main+0x66c>)
 8000f92:	60da      	str	r2, [r3, #12]

			if (program_sel == 1) {
 8000f94:	4b69      	ldr	r3, [pc, #420]	@ (800113c <main+0x670>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d15c      	bne.n	8001056 <main+0x58a>
				////////////////
				// PROGRAM 1 (4)

				ctr_scale = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4a62      	ldr	r2, [pc, #392]	@ (8001128 <main+0x65c>)
 8000fa0:	18ba      	adds	r2, r7, r2
 8000fa2:	6013      	str	r3, [r2, #0]
				phase_add = (adcResultsDMA[1] >> 9);
 8000fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8001118 <main+0x64c>)
 8000fa6:	885b      	ldrh	r3, [r3, #2]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	4b64      	ldr	r3, [pc, #400]	@ (8001140 <main+0x674>)
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	701a      	strb	r2, [r3, #0]
				table_lookup = sine[phase];
 8000fb4:	4b5d      	ldr	r3, [pc, #372]	@ (800112c <main+0x660>)
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	881a      	ldrh	r2, [r3, #0]
 8000fba:	4b62      	ldr	r3, [pc, #392]	@ (8001144 <main+0x678>)
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	58d3      	ldr	r3, [r2, r3]
 8000fc0:	22c1      	movs	r2, #193	@ 0xc1
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	18b9      	adds	r1, r7, r2
 8000fc6:	600b      	str	r3, [r1, #0]
				ad0_bitshift = (adcResultsDMA[0] >> 3);
 8000fc8:	4b53      	ldr	r3, [pc, #332]	@ (8001118 <main+0x64c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	4952      	ldr	r1, [pc, #328]	@ (800111c <main+0x650>)
 8000fd4:	1878      	adds	r0, r7, r1
 8000fd6:	6003      	str	r3, [r0, #0]
				freq = ad0_bitshift + (table_lookup) * 2;
 8000fd8:	18bb      	adds	r3, r7, r2
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	187a      	adds	r2, r7, r1
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	18d3      	adds	r3, r2, r3
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	@ (8001120 <main+0x654>)
 8000fe6:	18b9      	adds	r1, r7, r2
 8000fe8:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 8000fea:	18bb      	adds	r3, r7, r2
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <main+0x52c>
					freq = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 8000ff8:	2380      	movs	r3, #128	@ 0x80
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	4a48      	ldr	r2, [pc, #288]	@ (8001120 <main+0x654>)
 8000ffe:	18ba      	adds	r2, r7, r2
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 8001004:	4a47      	ldr	r2, [pc, #284]	@ (8001124 <main+0x658>)
 8001006:	18bb      	adds	r3, r7, r2
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	18b9      	adds	r1, r7, r2
 800100e:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 8001010:	18bb      	adds	r3, r7, r2
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a44      	ldr	r2, [pc, #272]	@ (8001128 <main+0x65c>)
 8001016:	18ba      	adds	r2, r7, r2
 8001018:	6811      	ldr	r1, [r2, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff f902 	bl	8000224 <__aeabi_uidivmod>
 8001020:	1e0b      	subs	r3, r1, #0
 8001022:	d109      	bne.n	8001038 <main+0x56c>
					phase += phase_add; // note!
 8001024:	4b46      	ldr	r3, [pc, #280]	@ (8001140 <main+0x674>)
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b299      	uxth	r1, r3
 800102c:	4a3f      	ldr	r2, [pc, #252]	@ (800112c <main+0x660>)
 800102e:	18bb      	adds	r3, r7, r2
 8001030:	18ba      	adds	r2, r7, r2
 8001032:	8812      	ldrh	r2, [r2, #0]
 8001034:	188a      	adds	r2, r1, r2
 8001036:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 8001038:	4a3c      	ldr	r2, [pc, #240]	@ (800112c <main+0x660>)
 800103a:	18bb      	adds	r3, r7, r2
 800103c:	18ba      	adds	r2, r7, r2
 800103e:	8812      	ldrh	r2, [r2, #0]
 8001040:	21ff      	movs	r1, #255	@ 0xff
 8001042:	400a      	ands	r2, r1
 8001044:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 8001046:	4937      	ldr	r1, [pc, #220]	@ (8001124 <main+0x658>)
 8001048:	187b      	adds	r3, r7, r1
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	22ff      	movs	r2, #255	@ 0xff
 800104e:	4013      	ands	r3, r2
 8001050:	187a      	adds	r2, r7, r1
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e0d4      	b.n	8001200 <main+0x734>
			}

			else if (program_sel == 2) {
 8001056:	4b39      	ldr	r3, [pc, #228]	@ (800113c <main+0x670>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d000      	beq.n	8001060 <main+0x594>
 800105e:	e073      	b.n	8001148 <main+0x67c>
				////////////////
				// PROGRAM 2 (5)

				ctr_scale = (adcResultsDMA[1] >> 9) + 1;
 8001060:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <main+0x64c>)
 8001062:	885b      	ldrh	r3, [r3, #2]
 8001064:	b29b      	uxth	r3, r3
 8001066:	0a5b      	lsrs	r3, r3, #9
 8001068:	b29b      	uxth	r3, r3
 800106a:	3301      	adds	r3, #1
 800106c:	4a2e      	ldr	r2, [pc, #184]	@ (8001128 <main+0x65c>)
 800106e:	18ba      	adds	r2, r7, r2
 8001070:	6013      	str	r3, [r2, #0]
				table_lookup = sine[phase];
 8001072:	4b2e      	ldr	r3, [pc, #184]	@ (800112c <main+0x660>)
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	881a      	ldrh	r2, [r3, #0]
 8001078:	4b32      	ldr	r3, [pc, #200]	@ (8001144 <main+0x678>)
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	58d3      	ldr	r3, [r2, r3]
 800107e:	22c1      	movs	r2, #193	@ 0xc1
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	18b9      	adds	r1, r7, r2
 8001084:	600b      	str	r3, [r1, #0]
				ad0_bitshift = (adcResultsDMA[0] >> 2); // edited
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <main+0x64c>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	b29b      	uxth	r3, r3
 8001090:	4922      	ldr	r1, [pc, #136]	@ (800111c <main+0x650>)
 8001092:	1878      	adds	r0, r7, r1
 8001094:	6003      	str	r3, [r0, #0]
				freq = ad0_bitshift + (table_lookup) * 30;
 8001096:	18bb      	adds	r3, r7, r2
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	0013      	movs	r3, r2
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	001a      	movs	r2, r3
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	189b      	adds	r3, r3, r2
 80010aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <main+0x654>)
 80010ac:	18b9      	adds	r1, r7, r2
 80010ae:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 80010b0:	18bb      	adds	r3, r7, r2
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <main+0x5f2>
					freq = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	18ba      	adds	r2, r7, r2
 80010bc:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <main+0x654>)
 80010c4:	18ba      	adds	r2, r7, r2
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <main+0x658>)
 80010cc:	18bb      	adds	r3, r7, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	18b9      	adds	r1, r7, r2
 80010d4:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 80010d6:	18bb      	adds	r3, r7, r2
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <main+0x65c>)
 80010dc:	18ba      	adds	r2, r7, r2
 80010de:	6811      	ldr	r1, [r2, #0]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff f89f 	bl	8000224 <__aeabi_uidivmod>
 80010e6:	1e0b      	subs	r3, r1, #0
 80010e8:	d105      	bne.n	80010f6 <main+0x62a>
					phase += 10;
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <main+0x660>)
 80010ec:	18bb      	adds	r3, r7, r2
 80010ee:	18ba      	adds	r2, r7, r2
 80010f0:	8812      	ldrh	r2, [r2, #0]
 80010f2:	320a      	adds	r2, #10
 80010f4:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 80010f6:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <main+0x660>)
 80010f8:	18bb      	adds	r3, r7, r2
 80010fa:	18ba      	adds	r2, r7, r2
 80010fc:	8812      	ldrh	r2, [r2, #0]
 80010fe:	21ff      	movs	r1, #255	@ 0xff
 8001100:	400a      	ands	r2, r1
 8001102:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 8001104:	4907      	ldr	r1, [pc, #28]	@ (8001124 <main+0x658>)
 8001106:	187b      	adds	r3, r7, r1
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22ff      	movs	r2, #255	@ 0xff
 800110c:	4013      	ands	r3, r2
 800110e:	187a      	adds	r2, r7, r1
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e075      	b.n	8001200 <main+0x734>
 8001114:	00000c2c 	.word	0x00000c2c
 8001118:	20000e50 	.word	0x20000e50
 800111c:	00000c0c 	.word	0x00000c0c
 8001120:	00000c3c 	.word	0x00000c3c
 8001124:	00000c44 	.word	0x00000c44
 8001128:	00000c38 	.word	0x00000c38
 800112c:	00000c42 	.word	0x00000c42
 8001130:	20000805 	.word	0x20000805
 8001134:	40020008 	.word	0x40020008
 8001138:	2000088c 	.word	0x2000088c
 800113c:	20000804 	.word	0x20000804
 8001140:	00000c17 	.word	0x00000c17
 8001144:	20000000 	.word	0x20000000
			}

			else if (program_sel == 3) {
 8001148:	4ba8      	ldr	r3, [pc, #672]	@ (80013ec <main+0x920>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d157      	bne.n	8001200 <main+0x734>
				////////////////
				// PROGRAM 3 (6)

				ctr_scale = (adcResultsDMA[1] >> 9) + 1;
 8001150:	4ba7      	ldr	r3, [pc, #668]	@ (80013f0 <main+0x924>)
 8001152:	885b      	ldrh	r3, [r3, #2]
 8001154:	b29b      	uxth	r3, r3
 8001156:	0a5b      	lsrs	r3, r3, #9
 8001158:	b29b      	uxth	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	4aa5      	ldr	r2, [pc, #660]	@ (80013f4 <main+0x928>)
 800115e:	18ba      	adds	r2, r7, r2
 8001160:	6013      	str	r3, [r2, #0]
				table_lookup = saw_xmax[phase];
 8001162:	4ba5      	ldr	r3, [pc, #660]	@ (80013f8 <main+0x92c>)
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	881a      	ldrh	r2, [r3, #0]
 8001168:	4ba4      	ldr	r3, [pc, #656]	@ (80013fc <main+0x930>)
 800116a:	49a5      	ldr	r1, [pc, #660]	@ (8001400 <main+0x934>)
 800116c:	185b      	adds	r3, r3, r1
 800116e:	19db      	adds	r3, r3, r7
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	58d3      	ldr	r3, [r2, r3]
 8001174:	22c1      	movs	r2, #193	@ 0xc1
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	18b9      	adds	r1, r7, r2
 800117a:	600b      	str	r3, [r1, #0]
				freq = (adcResultsDMA[0] >> 3) + ((table_lookup) * 11);
 800117c:	4b9c      	ldr	r3, [pc, #624]	@ (80013f0 <main+0x924>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	08db      	lsrs	r3, r3, #3
 8001184:	b29b      	uxth	r3, r3
 8001186:	0019      	movs	r1, r3
 8001188:	18bb      	adds	r3, r7, r2
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	0013      	movs	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	189b      	adds	r3, r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	189b      	adds	r3, r3, r2
 8001196:	18cb      	adds	r3, r1, r3
 8001198:	4a9a      	ldr	r2, [pc, #616]	@ (8001404 <main+0x938>)
 800119a:	18b9      	adds	r1, r7, r2
 800119c:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 800119e:	18bb      	adds	r3, r7, r2
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <main+0x6e0>
					freq = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	18ba      	adds	r2, r7, r2
 80011aa:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	05db      	lsls	r3, r3, #23
 80011b0:	4a94      	ldr	r2, [pc, #592]	@ (8001404 <main+0x938>)
 80011b2:	18ba      	adds	r2, r7, r2
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 80011b8:	4a93      	ldr	r2, [pc, #588]	@ (8001408 <main+0x93c>)
 80011ba:	18bb      	adds	r3, r7, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	18b9      	adds	r1, r7, r2
 80011c2:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 80011c4:	18bb      	adds	r3, r7, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a8a      	ldr	r2, [pc, #552]	@ (80013f4 <main+0x928>)
 80011ca:	18ba      	adds	r2, r7, r2
 80011cc:	6811      	ldr	r1, [r2, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff f828 	bl	8000224 <__aeabi_uidivmod>
 80011d4:	1e0b      	subs	r3, r1, #0
 80011d6:	d105      	bne.n	80011e4 <main+0x718>
					phase += 1;
 80011d8:	4a87      	ldr	r2, [pc, #540]	@ (80013f8 <main+0x92c>)
 80011da:	18bb      	adds	r3, r7, r2
 80011dc:	18ba      	adds	r2, r7, r2
 80011de:	8812      	ldrh	r2, [r2, #0]
 80011e0:	3201      	adds	r2, #1
 80011e2:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 80011e4:	4a84      	ldr	r2, [pc, #528]	@ (80013f8 <main+0x92c>)
 80011e6:	18bb      	adds	r3, r7, r2
 80011e8:	18ba      	adds	r2, r7, r2
 80011ea:	8812      	ldrh	r2, [r2, #0]
 80011ec:	21ff      	movs	r1, #255	@ 0xff
 80011ee:	400a      	ands	r2, r1
 80011f0:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 80011f2:	4985      	ldr	r1, [pc, #532]	@ (8001408 <main+0x93c>)
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	22ff      	movs	r2, #255	@ 0xff
 80011fa:	4013      	ands	r3, r2
 80011fc:	187a      	adds	r2, r7, r1
 80011fe:	6013      	str	r3, [r2, #0]
		}

		///// GROUP 3
		///// SCATTERED

		if (group == 3) {
 8001200:	4b82      	ldr	r3, [pc, #520]	@ (800140c <main+0x940>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d001      	beq.n	800120c <main+0x740>
 8001208:	f000 fb7b 	bl	8001902 <main+0xe36>
			if (program_sel == 1) {
 800120c:	4b77      	ldr	r3, [pc, #476]	@ (80013ec <main+0x920>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d000      	beq.n	8001216 <main+0x74a>
 8001214:	e1b0      	b.n	8001578 <main+0xaac>
				////////////////
				// PROGRAM 1 (7)

				uint16_t envelope_clock = HAL_GetTick() % period; // debounce
 8001216:	f001 f971 	bl	80024fc <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	4c7c      	ldr	r4, [pc, #496]	@ (8001410 <main+0x944>)
 800121e:	193b      	adds	r3, r7, r4
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	0019      	movs	r1, r3
 8001224:	0010      	movs	r0, r2
 8001226:	f7fe fffd 	bl	8000224 <__aeabi_uidivmod>
 800122a:	000b      	movs	r3, r1
 800122c:	001a      	movs	r2, r3
 800122e:	4b79      	ldr	r3, [pc, #484]	@ (8001414 <main+0x948>)
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	801a      	strh	r2, [r3, #0]
				uint16_t multiplier = 1; // period/4;
 8001234:	4b78      	ldr	r3, [pc, #480]	@ (8001418 <main+0x94c>)
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2201      	movs	r2, #1
 800123a:	801a      	strh	r2, [r3, #0]
				uint16_t marker_1 = period / 4;
 800123c:	4b77      	ldr	r3, [pc, #476]	@ (800141c <main+0x950>)
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	193a      	adds	r2, r7, r4
 8001242:	8812      	ldrh	r2, [r2, #0]
 8001244:	0892      	lsrs	r2, r2, #2
 8001246:	801a      	strh	r2, [r3, #0]
				uint16_t marker_2 = period / 2;
 8001248:	23c0      	movs	r3, #192	@ 0xc0
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	193a      	adds	r2, r7, r4
 8001250:	8812      	ldrh	r2, [r2, #0]
 8001252:	0852      	lsrs	r2, r2, #1
 8001254:	801a      	strh	r2, [r3, #0]
				uint16_t marker_3 = 3 * period / 4;
 8001256:	193b      	adds	r3, r7, r4
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	0013      	movs	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	189b      	adds	r3, r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	da00      	bge.n	8001266 <main+0x79a>
 8001264:	3303      	adds	r3, #3
 8001266:	109b      	asrs	r3, r3, #2
 8001268:	001a      	movs	r2, r3
 800126a:	4b6d      	ldr	r3, [pc, #436]	@ (8001420 <main+0x954>)
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	801a      	strh	r2, [r3, #0]

				if (envelope_clock == 0) { // only reset the period every cycle, stops noise
 8001270:	4b68      	ldr	r3, [pc, #416]	@ (8001414 <main+0x948>)
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d15e      	bne.n	8001338 <main+0x86c>
					period = 300 + adcResultsDMA[1] / 500
 800127a:	4b5d      	ldr	r3, [pc, #372]	@ (80013f0 <main+0x924>)
 800127c:	885b      	ldrh	r3, [r3, #2]
 800127e:	b29b      	uxth	r3, r3
							+ adcResultsDMA[0] / 800;
 8001280:	22fa      	movs	r2, #250	@ 0xfa
 8001282:	0051      	lsls	r1, r2, #1
 8001284:	0018      	movs	r0, r3
 8001286:	f7fe ff47 	bl	8000118 <__udivsi3>
 800128a:	0003      	movs	r3, r0
 800128c:	b29c      	uxth	r4, r3
 800128e:	4b58      	ldr	r3, [pc, #352]	@ (80013f0 <main+0x924>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	22c8      	movs	r2, #200	@ 0xc8
 8001296:	0091      	lsls	r1, r2, #2
 8001298:	0018      	movs	r0, r3
 800129a:	f7fe ff3d 	bl	8000118 <__udivsi3>
 800129e:	0003      	movs	r3, r0
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	18e3      	adds	r3, r4, r3
 80012a4:	b29a      	uxth	r2, r3
					period = 300 + adcResultsDMA[1] / 500
 80012a6:	495a      	ldr	r1, [pc, #360]	@ (8001410 <main+0x944>)
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	322d      	adds	r2, #45	@ 0x2d
 80012ac:	32ff      	adds	r2, #255	@ 0xff
 80012ae:	801a      	strh	r2, [r3, #0]
					if (period < 60)
 80012b0:	000a      	movs	r2, r1
 80012b2:	18bb      	adds	r3, r7, r2
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	2b3b      	cmp	r3, #59	@ 0x3b
 80012b8:	d803      	bhi.n	80012c2 <main+0x7f6>
						period = 60;
 80012ba:	18bb      	adds	r3, r7, r2
 80012bc:	223c      	movs	r2, #60	@ 0x3c
 80012be:	801a      	strh	r2, [r3, #0]
 80012c0:	e00a      	b.n	80012d8 <main+0x80c>
					else if (period > 600)
 80012c2:	4953      	ldr	r1, [pc, #332]	@ (8001410 <main+0x944>)
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	881a      	ldrh	r2, [r3, #0]
 80012c8:	2396      	movs	r3, #150	@ 0x96
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d903      	bls.n	80012d8 <main+0x80c>
						period = 600;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2296      	movs	r2, #150	@ 0x96
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	801a      	strh	r2, [r3, #0]
					period = period - period % 4; // must divide by 4
 80012d8:	484d      	ldr	r0, [pc, #308]	@ (8001410 <main+0x944>)
 80012da:	183b      	adds	r3, r7, r0
 80012dc:	183a      	adds	r2, r7, r0
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	2103      	movs	r1, #3
 80012e2:	438a      	bics	r2, r1
 80012e4:	801a      	strh	r2, [r3, #0]

					// marker 1 between 0 and 0.5 * period
					marker_1 = ((adcResultsDMA[0] % ADC_RANGE) * period)
 80012e6:	4b42      	ldr	r3, [pc, #264]	@ (80013f0 <main+0x924>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	001a      	movs	r2, r3
 80012ee:	183b      	adds	r3, r7, r0
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	4353      	muls	r3, r2
							/ (ADC_RANGE * 2);
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da02      	bge.n	80012fe <main+0x832>
 80012f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001424 <main+0x958>)
 80012fa:	4694      	mov	ip, r2
 80012fc:	4463      	add	r3, ip
 80012fe:	145b      	asrs	r3, r3, #17
 8001300:	001a      	movs	r2, r3
					marker_1 = ((adcResultsDMA[0] % ADC_RANGE) * period)
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <main+0x950>)
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	801a      	strh	r2, [r3, #0]

					// marker 3 between 0.5 and 1.0 * period
					marker_3 = ((adcResultsDMA[1] % ADC_RANGE) * period)
 8001308:	4b39      	ldr	r3, [pc, #228]	@ (80013f0 <main+0x924>)
 800130a:	885b      	ldrh	r3, [r3, #2]
 800130c:	b29b      	uxth	r3, r3
 800130e:	001a      	movs	r2, r3
 8001310:	4b3f      	ldr	r3, [pc, #252]	@ (8001410 <main+0x944>)
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4353      	muls	r3, r2
							/ (ADC_RANGE * 2) + period / 2;
 8001318:	2b00      	cmp	r3, #0
 800131a:	da02      	bge.n	8001322 <main+0x856>
 800131c:	4a41      	ldr	r2, [pc, #260]	@ (8001424 <main+0x958>)
 800131e:	4694      	mov	ip, r2
 8001320:	4463      	add	r3, ip
 8001322:	145b      	asrs	r3, r3, #17
 8001324:	b299      	uxth	r1, r3
 8001326:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <main+0x944>)
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	085b      	lsrs	r3, r3, #1
 800132e:	b29a      	uxth	r2, r3
					marker_3 = ((adcResultsDMA[1] % ADC_RANGE) * period)
 8001330:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <main+0x954>)
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	188a      	adds	r2, r1, r2
 8001336:	801a      	strh	r2, [r3, #0]
				}

				// ATTACK -- ramp up
				if (envelope_clock < marker_1) {
 8001338:	4c36      	ldr	r4, [pc, #216]	@ (8001414 <main+0x948>)
 800133a:	193a      	adds	r2, r7, r4
 800133c:	4937      	ldr	r1, [pc, #220]	@ (800141c <main+0x950>)
 800133e:	187b      	adds	r3, r7, r1
 8001340:	8812      	ldrh	r2, [r2, #0]
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d214      	bcs.n	8001372 <main+0x8a6>
					multiplier = envelope_clock * ((period / 4) / marker_1);
 8001348:	4b31      	ldr	r3, [pc, #196]	@ (8001410 <main+0x944>)
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	b29b      	uxth	r3, r3
 8001352:	001a      	movs	r2, r3
 8001354:	187b      	adds	r3, r7, r1
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f7fe ff66 	bl	800022c <__divsi3>
 8001360:	0003      	movs	r3, r0
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b2c      	ldr	r3, [pc, #176]	@ (8001418 <main+0x94c>)
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	1939      	adds	r1, r7, r4
 800136a:	8809      	ldrh	r1, [r1, #0]
 800136c:	434a      	muls	r2, r1
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	e037      	b.n	80013e2 <main+0x916>
				}

				// SUSTAIN
				else if (envelope_clock < marker_2) {
 8001372:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <main+0x948>)
 8001374:	18fa      	adds	r2, r7, r3
 8001376:	23c0      	movs	r3, #192	@ 0xc0
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	8812      	ldrh	r2, [r2, #0]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d207      	bcs.n	8001394 <main+0x8c8>
					multiplier = period / 4;
 8001384:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <main+0x94c>)
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	4a21      	ldr	r2, [pc, #132]	@ (8001410 <main+0x944>)
 800138a:	18ba      	adds	r2, r7, r2
 800138c:	8812      	ldrh	r2, [r2, #0]
 800138e:	0892      	lsrs	r2, r2, #2
 8001390:	801a      	strh	r2, [r3, #0]
 8001392:	e026      	b.n	80013e2 <main+0x916>
				}

				// DECAY -- ramp down
				else if (envelope_clock < 3 * marker_3) {
 8001394:	481f      	ldr	r0, [pc, #124]	@ (8001414 <main+0x948>)
 8001396:	183b      	adds	r3, r7, r0
 8001398:	8819      	ldrh	r1, [r3, #0]
 800139a:	4d21      	ldr	r5, [pc, #132]	@ (8001420 <main+0x954>)
 800139c:	197b      	adds	r3, r7, r5
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	0013      	movs	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	189b      	adds	r3, r3, r2
 80013a6:	4299      	cmp	r1, r3
 80013a8:	da1b      	bge.n	80013e2 <main+0x916>
					multiplier = (period - envelope_clock)
 80013aa:	4919      	ldr	r1, [pc, #100]	@ (8001410 <main+0x944>)
 80013ac:	187a      	adds	r2, r7, r1
 80013ae:	183b      	adds	r3, r7, r0
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	b29c      	uxth	r4, r3
							* ((period / 4) / (marker_3 - marker_2));
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	0018      	movs	r0, r3
 80013c2:	197b      	adds	r3, r7, r5
 80013c4:	881a      	ldrh	r2, [r3, #0]
 80013c6:	23c0      	movs	r3, #192	@ 0xc0
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	0019      	movs	r1, r3
 80013d2:	f7fe ff2b 	bl	800022c <__divsi3>
 80013d6:	0003      	movs	r3, r0
					multiplier = (period - envelope_clock)
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <main+0x94c>)
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	4362      	muls	r2, r4
 80013e0:	801a      	strh	r2, [r3, #0]
				}

				uint32_t tmp_wav[NS];
				for (uint16_t i = 0; i < NS; i++) {
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <main+0x95c>)
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	e058      	b.n	800149e <main+0x9d2>
 80013ec:	20000804 	.word	0x20000804
 80013f0:	20000e50 	.word	0x20000e50
 80013f4:	00000c38 	.word	0x00000c38
 80013f8:	00000c42 	.word	0x00000c42
 80013fc:	fffff7b8 	.word	0xfffff7b8
 8001400:	00000c48 	.word	0x00000c48
 8001404:	00000c3c 	.word	0x00000c3c
 8001408:	00000c44 	.word	0x00000c44
 800140c:	20000805 	.word	0x20000805
 8001410:	00000c36 	.word	0x00000c36
 8001414:	00000c02 	.word	0x00000c02
 8001418:	00000c2a 	.word	0x00000c2a
 800141c:	00000c28 	.word	0x00000c28
 8001420:	00000c26 	.word	0x00000c26
 8001424:	0001ffff 	.word	0x0001ffff
 8001428:	00000c24 	.word	0x00000c24
					uint16_t new_val = wave_LUT[i] * multiplier / (period / 4);
 800142c:	4ba8      	ldr	r3, [pc, #672]	@ (80016d0 <main+0xc04>)
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	4ba8      	ldr	r3, [pc, #672]	@ (80016d4 <main+0xc08>)
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	58d3      	ldr	r3, [r2, r3]
 8001438:	4aa7      	ldr	r2, [pc, #668]	@ (80016d8 <main+0xc0c>)
 800143a:	18ba      	adds	r2, r7, r2
 800143c:	8812      	ldrh	r2, [r2, #0]
 800143e:	435a      	muls	r2, r3
 8001440:	4ba6      	ldr	r3, [pc, #664]	@ (80016dc <main+0xc10>)
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	b29b      	uxth	r3, r3
 800144a:	0019      	movs	r1, r3
 800144c:	0010      	movs	r0, r2
 800144e:	f7fe fe63 	bl	8000118 <__udivsi3>
 8001452:	0003      	movs	r3, r0
 8001454:	001a      	movs	r2, r3
 8001456:	49a2      	ldr	r1, [pc, #648]	@ (80016e0 <main+0xc14>)
 8001458:	187b      	adds	r3, r7, r1
 800145a:	801a      	strh	r2, [r3, #0]
					if (new_val > 240)
 800145c:	000a      	movs	r2, r1
 800145e:	18bb      	adds	r3, r7, r2
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	2bf0      	cmp	r3, #240	@ 0xf0
 8001464:	d902      	bls.n	800146c <main+0x9a0>
						new_val = 240;
 8001466:	18bb      	adds	r3, r7, r2
 8001468:	22f0      	movs	r2, #240	@ 0xf0
 800146a:	801a      	strh	r2, [r3, #0]
					if (new_val < 1)
 800146c:	4a9c      	ldr	r2, [pc, #624]	@ (80016e0 <main+0xc14>)
 800146e:	18bb      	adds	r3, r7, r2
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <main+0x9b0>
						new_val = 1;
 8001476:	18bb      	adds	r3, r7, r2
 8001478:	2201      	movs	r2, #1
 800147a:	801a      	strh	r2, [r3, #0]
					tmp_wav[i] = new_val;
 800147c:	4894      	ldr	r0, [pc, #592]	@ (80016d0 <main+0xc04>)
 800147e:	183b      	adds	r3, r7, r0
 8001480:	881a      	ldrh	r2, [r3, #0]
 8001482:	4b97      	ldr	r3, [pc, #604]	@ (80016e0 <main+0xc14>)
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	8819      	ldrh	r1, [r3, #0]
 8001488:	4b96      	ldr	r3, [pc, #600]	@ (80016e4 <main+0xc18>)
 800148a:	4c97      	ldr	r4, [pc, #604]	@ (80016e8 <main+0xc1c>)
 800148c:	191b      	adds	r3, r3, r4
 800148e:	19db      	adds	r3, r3, r7
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	50d1      	str	r1, [r2, r3]
				for (uint16_t i = 0; i < NS; i++) {
 8001494:	183b      	adds	r3, r7, r0
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	183b      	adds	r3, r7, r0
 800149a:	3201      	adds	r2, #1
 800149c:	801a      	strh	r2, [r3, #0]
 800149e:	4b8c      	ldr	r3, [pc, #560]	@ (80016d0 <main+0xc04>)
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2bff      	cmp	r3, #255	@ 0xff
 80014a6:	d9c1      	bls.n	800142c <main+0x960>
				}
				DMA1_Channel1->CMAR = (uint32_t) tmp_wav; // SrcAddress
 80014a8:	4b90      	ldr	r3, [pc, #576]	@ (80016ec <main+0xc20>)
 80014aa:	003a      	movs	r2, r7
 80014ac:	60da      	str	r2, [r3, #12]

				ctr_scale = (adcResultsDMA[1] >> 9) + 1;
 80014ae:	4b90      	ldr	r3, [pc, #576]	@ (80016f0 <main+0xc24>)
 80014b0:	885b      	ldrh	r3, [r3, #2]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	0a5b      	lsrs	r3, r3, #9
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a8e      	ldr	r2, [pc, #568]	@ (80016f4 <main+0xc28>)
 80014bc:	18ba      	adds	r2, r7, r2
 80014be:	6013      	str	r3, [r2, #0]
				table_lookup = sine[phase];
 80014c0:	4b8d      	ldr	r3, [pc, #564]	@ (80016f8 <main+0xc2c>)
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	4b8d      	ldr	r3, [pc, #564]	@ (80016fc <main+0xc30>)
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	58d3      	ldr	r3, [r2, r3]
 80014cc:	22c1      	movs	r2, #193	@ 0xc1
 80014ce:	0112      	lsls	r2, r2, #4
 80014d0:	18b9      	adds	r1, r7, r2
 80014d2:	600b      	str	r3, [r1, #0]
				ad0_bitshift = (adcResultsDMA[0] >> 4);
 80014d4:	4b86      	ldr	r3, [pc, #536]	@ (80016f0 <main+0xc24>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4988      	ldr	r1, [pc, #544]	@ (8001700 <main+0xc34>)
 80014e0:	1878      	adds	r0, r7, r1
 80014e2:	6003      	str	r3, [r0, #0]
				freq = ad0_bitshift + (table_lookup) * 20;
 80014e4:	18bb      	adds	r3, r7, r2
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	0013      	movs	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	189b      	adds	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	001a      	movs	r2, r3
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	189b      	adds	r3, r3, r2
 80014f8:	4a82      	ldr	r2, [pc, #520]	@ (8001704 <main+0xc38>)
 80014fa:	18b9      	adds	r1, r7, r2
 80014fc:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 80014fe:	18bb      	adds	r3, r7, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <main+0xa40>
					freq = 1;
 8001506:	2301      	movs	r3, #1
 8001508:	18ba      	adds	r2, r7, r2
 800150a:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	05db      	lsls	r3, r3, #23
 8001510:	4a7c      	ldr	r2, [pc, #496]	@ (8001704 <main+0xc38>)
 8001512:	18ba      	adds	r2, r7, r2
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 8001518:	4a7b      	ldr	r2, [pc, #492]	@ (8001708 <main+0xc3c>)
 800151a:	18bb      	adds	r3, r7, r2
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3301      	adds	r3, #1
 8001520:	18b9      	adds	r1, r7, r2
 8001522:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 8001524:	18bb      	adds	r3, r7, r2
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a72      	ldr	r2, [pc, #456]	@ (80016f4 <main+0xc28>)
 800152a:	18ba      	adds	r2, r7, r2
 800152c:	6811      	ldr	r1, [r2, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	f7fe fe78 	bl	8000224 <__aeabi_uidivmod>
 8001534:	1e0b      	subs	r3, r1, #0
 8001536:	d110      	bne.n	800155a <main+0xa8e>
					phase += rand() % NS;
 8001538:	f004 fda0 	bl	800607c <rand>
 800153c:	0003      	movs	r3, r0
 800153e:	4a73      	ldr	r2, [pc, #460]	@ (800170c <main+0xc40>)
 8001540:	4013      	ands	r3, r2
 8001542:	d503      	bpl.n	800154c <main+0xa80>
 8001544:	3b01      	subs	r3, #1
 8001546:	4a72      	ldr	r2, [pc, #456]	@ (8001710 <main+0xc44>)
 8001548:	4313      	orrs	r3, r2
 800154a:	3301      	adds	r3, #1
 800154c:	b299      	uxth	r1, r3
 800154e:	4a6a      	ldr	r2, [pc, #424]	@ (80016f8 <main+0xc2c>)
 8001550:	18bb      	adds	r3, r7, r2
 8001552:	18ba      	adds	r2, r7, r2
 8001554:	8812      	ldrh	r2, [r2, #0]
 8001556:	188a      	adds	r2, r1, r2
 8001558:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 800155a:	4a67      	ldr	r2, [pc, #412]	@ (80016f8 <main+0xc2c>)
 800155c:	18bb      	adds	r3, r7, r2
 800155e:	18ba      	adds	r2, r7, r2
 8001560:	8812      	ldrh	r2, [r2, #0]
 8001562:	21ff      	movs	r1, #255	@ 0xff
 8001564:	400a      	ands	r2, r1
 8001566:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 8001568:	4967      	ldr	r1, [pc, #412]	@ (8001708 <main+0xc3c>)
 800156a:	187b      	adds	r3, r7, r1
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	22ff      	movs	r2, #255	@ 0xff
 8001570:	4013      	ands	r3, r2
 8001572:	187a      	adds	r2, r7, r1
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e1c4      	b.n	8001902 <main+0xe36>
			}

			else if (program_sel == 2) {
 8001578:	4b66      	ldr	r3, [pc, #408]	@ (8001714 <main+0xc48>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d000      	beq.n	8001582 <main+0xab6>
 8001580:	e152      	b.n	8001828 <main+0xd5c>
				////////////////
				// PROGRAM 2 (8)
				// ENVELOPE FUNC 1 - CONTROLS FROM BOTH DMAS

				uint16_t period = adcResultsDMA[1] / 1000
 8001582:	4b5b      	ldr	r3, [pc, #364]	@ (80016f0 <main+0xc24>)
 8001584:	885b      	ldrh	r3, [r3, #2]
 8001586:	b29b      	uxth	r3, r3
						+ adcResultsDMA[0] / 1000;
 8001588:	22fa      	movs	r2, #250	@ 0xfa
 800158a:	0091      	lsls	r1, r2, #2
 800158c:	0018      	movs	r0, r3
 800158e:	f7fe fdc3 	bl	8000118 <__udivsi3>
 8001592:	0003      	movs	r3, r0
 8001594:	b29c      	uxth	r4, r3
 8001596:	4b56      	ldr	r3, [pc, #344]	@ (80016f0 <main+0xc24>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	22fa      	movs	r2, #250	@ 0xfa
 800159e:	0091      	lsls	r1, r2, #2
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7fe fdb9 	bl	8000118 <__udivsi3>
 80015a6:	0003      	movs	r3, r0
 80015a8:	b29a      	uxth	r2, r3
				uint16_t period = adcResultsDMA[1] / 1000
 80015aa:	21c2      	movs	r1, #194	@ 0xc2
 80015ac:	0109      	lsls	r1, r1, #4
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	18a2      	adds	r2, r4, r2
 80015b2:	801a      	strh	r2, [r3, #0]
				if (period < 60)
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80015ba:	d802      	bhi.n	80015c2 <main+0xaf6>
					period = 60;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	223c      	movs	r2, #60	@ 0x3c
 80015c0:	801a      	strh	r2, [r3, #0]
				period = period - period % 4; // must divide by 4
 80015c2:	24c2      	movs	r4, #194	@ 0xc2
 80015c4:	0124      	lsls	r4, r4, #4
 80015c6:	193b      	adds	r3, r7, r4
 80015c8:	193a      	adds	r2, r7, r4
 80015ca:	8812      	ldrh	r2, [r2, #0]
 80015cc:	2103      	movs	r1, #3
 80015ce:	438a      	bics	r2, r1
 80015d0:	801a      	strh	r2, [r3, #0]
				uint16_t envelope_clock = HAL_GetTick() % period; // debounce
 80015d2:	f000 ff93 	bl	80024fc <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	0019      	movs	r1, r3
 80015de:	0010      	movs	r0, r2
 80015e0:	f7fe fe20 	bl	8000224 <__aeabi_uidivmod>
 80015e4:	000b      	movs	r3, r1
 80015e6:	001a      	movs	r2, r3
 80015e8:	484b      	ldr	r0, [pc, #300]	@ (8001718 <main+0xc4c>)
 80015ea:	183b      	adds	r3, r7, r0
 80015ec:	801a      	strh	r2, [r3, #0]
				uint16_t divisor = period / 4; // period/4;
 80015ee:	4d4b      	ldr	r5, [pc, #300]	@ (800171c <main+0xc50>)
 80015f0:	197b      	adds	r3, r7, r5
 80015f2:	0021      	movs	r1, r4
 80015f4:	187a      	adds	r2, r7, r1
 80015f6:	8812      	ldrh	r2, [r2, #0]
 80015f8:	0892      	lsrs	r2, r2, #2
 80015fa:	801a      	strh	r2, [r3, #0]

				// ATTACK -- ramp up
				if (envelope_clock < period / 4) {
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	b29b      	uxth	r3, r3
 8001604:	183a      	adds	r2, r7, r0
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d20b      	bcs.n	8001624 <main+0xb58>
					divisor = (period / 4 - envelope_clock) + 1;
 800160c:	187b      	adds	r3, r7, r1
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	b29a      	uxth	r2, r3
 8001614:	183b      	adds	r3, r7, r0
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	197b      	adds	r3, r7, r5
 800161e:	3201      	adds	r2, #1
 8001620:	801a      	strh	r2, [r3, #0]
 8001622:	e03e      	b.n	80016a2 <main+0xbd6>
				}

				// SUSTAIN
				else if (envelope_clock < period / 2) {
 8001624:	23c2      	movs	r3, #194	@ 0xc2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	b29b      	uxth	r3, r3
 8001630:	4a39      	ldr	r2, [pc, #228]	@ (8001718 <main+0xc4c>)
 8001632:	18ba      	adds	r2, r7, r2
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d204      	bcs.n	8001644 <main+0xb78>
					divisor = 1;
 800163a:	4b38      	ldr	r3, [pc, #224]	@ (800171c <main+0xc50>)
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	2201      	movs	r2, #1
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	e02e      	b.n	80016a2 <main+0xbd6>
				}

				// DECAY -- ramp down
				else if (envelope_clock < 3 * period / 4) {
 8001644:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <main+0xc4c>)
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	8819      	ldrh	r1, [r3, #0]
 800164a:	23c2      	movs	r3, #194	@ 0xc2
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	881a      	ldrh	r2, [r3, #0]
 8001652:	0013      	movs	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	189b      	adds	r3, r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	da00      	bge.n	800165e <main+0xb92>
 800165c:	3303      	adds	r3, #3
 800165e:	109b      	asrs	r3, r3, #2
 8001660:	4299      	cmp	r1, r3
 8001662:	da16      	bge.n	8001692 <main+0xbc6>
					divisor = (envelope_clock - 3 * period / 4) + 1;
 8001664:	23c2      	movs	r3, #194	@ 0xc2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	0013      	movs	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	189b      	adds	r3, r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	da00      	bge.n	8001678 <main+0xbac>
 8001676:	3303      	adds	r3, #3
 8001678:	109b      	asrs	r3, r3, #2
 800167a:	425b      	negs	r3, r3
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <main+0xc4c>)
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	18d3      	adds	r3, r2, r3
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <main+0xc50>)
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	3201      	adds	r2, #1
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	e007      	b.n	80016a2 <main+0xbd6>
				}

				else
					divisor = period / 4;
 8001692:	4b22      	ldr	r3, [pc, #136]	@ (800171c <main+0xc50>)
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	22c2      	movs	r2, #194	@ 0xc2
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	18ba      	adds	r2, r7, r2
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	0892      	lsrs	r2, r2, #2
 80016a0:	801a      	strh	r2, [r3, #0]

				uint32_t divisor_scaled = (divisor * 100 / period);
 80016a2:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <main+0xc50>)
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	2264      	movs	r2, #100	@ 0x64
 80016aa:	435a      	muls	r2, r3
 80016ac:	23c2      	movs	r3, #194	@ 0xc2
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	0019      	movs	r1, r3
 80016b6:	0010      	movs	r0, r2
 80016b8:	f7fe fdb8 	bl	800022c <__divsi3>
 80016bc:	0003      	movs	r3, r0
 80016be:	4a18      	ldr	r2, [pc, #96]	@ (8001720 <main+0xc54>)
 80016c0:	18ba      	adds	r2, r7, r2
 80016c2:	6013      	str	r3, [r2, #0]

				uint32_t tmp_wav[NS];
				for (int i = 0; i < NS; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <main+0xc58>)
 80016c8:	18ba      	adds	r2, r7, r2
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e047      	b.n	800175e <main+0xc92>
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	00000c24 	.word	0x00000c24
 80016d4:	2000088c 	.word	0x2000088c
 80016d8:	00000c2a 	.word	0x00000c2a
 80016dc:	00000c36 	.word	0x00000c36
 80016e0:	00000c22 	.word	0x00000c22
 80016e4:	fffff3b8 	.word	0xfffff3b8
 80016e8:	00000c48 	.word	0x00000c48
 80016ec:	40020008 	.word	0x40020008
 80016f0:	20000e50 	.word	0x20000e50
 80016f4:	00000c38 	.word	0x00000c38
 80016f8:	00000c42 	.word	0x00000c42
 80016fc:	20000000 	.word	0x20000000
 8001700:	00000c0c 	.word	0x00000c0c
 8001704:	00000c3c 	.word	0x00000c3c
 8001708:	00000c44 	.word	0x00000c44
 800170c:	800000ff 	.word	0x800000ff
 8001710:	ffffff00 	.word	0xffffff00
 8001714:	20000804 	.word	0x20000804
 8001718:	00000c0a 	.word	0x00000c0a
 800171c:	00000c1e 	.word	0x00000c1e
 8001720:	00000c04 	.word	0x00000c04
 8001724:	00000c18 	.word	0x00000c18
					tmp_wav[i] = wave_LUT[i] / divisor_scaled;
 8001728:	4b95      	ldr	r3, [pc, #596]	@ (8001980 <main+0xeb4>)
 800172a:	4c96      	ldr	r4, [pc, #600]	@ (8001984 <main+0xeb8>)
 800172c:	193a      	adds	r2, r7, r4
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	58d3      	ldr	r3, [r2, r3]
 8001734:	4a94      	ldr	r2, [pc, #592]	@ (8001988 <main+0xebc>)
 8001736:	18ba      	adds	r2, r7, r2
 8001738:	6811      	ldr	r1, [r2, #0]
 800173a:	0018      	movs	r0, r3
 800173c:	f7fe fcec 	bl	8000118 <__udivsi3>
 8001740:	0003      	movs	r3, r0
 8001742:	0019      	movs	r1, r3
 8001744:	4b91      	ldr	r3, [pc, #580]	@ (800198c <main+0xec0>)
 8001746:	4a92      	ldr	r2, [pc, #584]	@ (8001990 <main+0xec4>)
 8001748:	189b      	adds	r3, r3, r2
 800174a:	19db      	adds	r3, r3, r7
 800174c:	193a      	adds	r2, r7, r4
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	50d1      	str	r1, [r2, r3]
				for (int i = 0; i < NS; i++)
 8001754:	193b      	adds	r3, r7, r4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	193a      	adds	r2, r7, r4
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b89      	ldr	r3, [pc, #548]	@ (8001984 <main+0xeb8>)
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2bff      	cmp	r3, #255	@ 0xff
 8001766:	dddf      	ble.n	8001728 <main+0xc5c>
				DMA1_Channel1->CMAR = (uint32_t) tmp_wav; // SrcAddress
 8001768:	4b8a      	ldr	r3, [pc, #552]	@ (8001994 <main+0xec8>)
 800176a:	003a      	movs	r2, r7
 800176c:	60da      	str	r2, [r3, #12]

				ctr_scale = 1;
 800176e:	2301      	movs	r3, #1
 8001770:	4a89      	ldr	r2, [pc, #548]	@ (8001998 <main+0xecc>)
 8001772:	18ba      	adds	r2, r7, r2
 8001774:	6013      	str	r3, [r2, #0]
				phase_add = (adcResultsDMA[1] >> 8);
 8001776:	4b89      	ldr	r3, [pc, #548]	@ (800199c <main+0xed0>)
 8001778:	885b      	ldrh	r3, [r3, #2]
 800177a:	b29b      	uxth	r3, r3
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b87      	ldr	r3, [pc, #540]	@ (80019a0 <main+0xed4>)
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	701a      	strb	r2, [r3, #0]
				table_lookup = sine[phase];
 8001786:	4b87      	ldr	r3, [pc, #540]	@ (80019a4 <main+0xed8>)
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	881a      	ldrh	r2, [r3, #0]
 800178c:	4b86      	ldr	r3, [pc, #536]	@ (80019a8 <main+0xedc>)
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	58d3      	ldr	r3, [r2, r3]
 8001792:	22c1      	movs	r2, #193	@ 0xc1
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	18b9      	adds	r1, r7, r2
 8001798:	600b      	str	r3, [r1, #0]
				ad0_bitshift = (adcResultsDMA[0] >> 3);
 800179a:	4b80      	ldr	r3, [pc, #512]	@ (800199c <main+0xed0>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4981      	ldr	r1, [pc, #516]	@ (80019ac <main+0xee0>)
 80017a6:	1878      	adds	r0, r7, r1
 80017a8:	6003      	str	r3, [r0, #0]
				freq = ad0_bitshift + (table_lookup) * 2;
 80017aa:	18bb      	adds	r3, r7, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	187a      	adds	r2, r7, r1
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	18d3      	adds	r3, r2, r3
 80017b6:	4a7e      	ldr	r2, [pc, #504]	@ (80019b0 <main+0xee4>)
 80017b8:	18b9      	adds	r1, r7, r2
 80017ba:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 80017bc:	18bb      	adds	r3, r7, r2
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <main+0xcfe>
					freq = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	18ba      	adds	r2, r7, r2
 80017c8:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 80017ca:	2380      	movs	r3, #128	@ 0x80
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	4a78      	ldr	r2, [pc, #480]	@ (80019b0 <main+0xee4>)
 80017d0:	18ba      	adds	r2, r7, r2
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 80017d6:	4a77      	ldr	r2, [pc, #476]	@ (80019b4 <main+0xee8>)
 80017d8:	18bb      	adds	r3, r7, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	18b9      	adds	r1, r7, r2
 80017e0:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 80017e2:	18bb      	adds	r3, r7, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001998 <main+0xecc>)
 80017e8:	18ba      	adds	r2, r7, r2
 80017ea:	6811      	ldr	r1, [r2, #0]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f7fe fd19 	bl	8000224 <__aeabi_uidivmod>
 80017f2:	1e0b      	subs	r3, r1, #0
 80017f4:	d109      	bne.n	800180a <main+0xd3e>
					phase += phase_add; // note!
 80017f6:	4b6a      	ldr	r3, [pc, #424]	@ (80019a0 <main+0xed4>)
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b299      	uxth	r1, r3
 80017fe:	4a69      	ldr	r2, [pc, #420]	@ (80019a4 <main+0xed8>)
 8001800:	18bb      	adds	r3, r7, r2
 8001802:	18ba      	adds	r2, r7, r2
 8001804:	8812      	ldrh	r2, [r2, #0]
 8001806:	188a      	adds	r2, r1, r2
 8001808:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 800180a:	4a66      	ldr	r2, [pc, #408]	@ (80019a4 <main+0xed8>)
 800180c:	18bb      	adds	r3, r7, r2
 800180e:	18ba      	adds	r2, r7, r2
 8001810:	8812      	ldrh	r2, [r2, #0]
 8001812:	21ff      	movs	r1, #255	@ 0xff
 8001814:	400a      	ands	r2, r1
 8001816:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 8001818:	4966      	ldr	r1, [pc, #408]	@ (80019b4 <main+0xee8>)
 800181a:	187b      	adds	r3, r7, r1
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	22ff      	movs	r2, #255	@ 0xff
 8001820:	4013      	ands	r3, r2
 8001822:	187a      	adds	r2, r7, r1
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e06c      	b.n	8001902 <main+0xe36>
			}

			else if (program_sel == 3) {
 8001828:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <main+0xeec>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d168      	bne.n	8001902 <main+0xe36>
				////////////////
				// PROGRAM 3 (9)
				// ULTIMATE QUESTION OF LIFE

				// DMA
				DMA1_Channel1->CMAR = (uint32_t) wave_LUT; // SrcAddress
 8001830:	4b58      	ldr	r3, [pc, #352]	@ (8001994 <main+0xec8>)
 8001832:	4a53      	ldr	r2, [pc, #332]	@ (8001980 <main+0xeb4>)
 8001834:	60da      	str	r2, [r3, #12]
				ctr_scale = (adcResultsDMA[1] >> 9) + 1; //9
 8001836:	4b59      	ldr	r3, [pc, #356]	@ (800199c <main+0xed0>)
 8001838:	885b      	ldrh	r3, [r3, #2]
 800183a:	b29b      	uxth	r3, r3
 800183c:	0a5b      	lsrs	r3, r3, #9
 800183e:	b29b      	uxth	r3, r3
 8001840:	3301      	adds	r3, #1
 8001842:	4a55      	ldr	r2, [pc, #340]	@ (8001998 <main+0xecc>)
 8001844:	18ba      	adds	r2, r7, r2
 8001846:	6013      	str	r3, [r2, #0]

				table_lookup = sine[phase];
 8001848:	4b56      	ldr	r3, [pc, #344]	@ (80019a4 <main+0xed8>)
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	4b56      	ldr	r3, [pc, #344]	@ (80019a8 <main+0xedc>)
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	58d3      	ldr	r3, [r2, r3]
 8001854:	21c1      	movs	r1, #193	@ 0xc1
 8001856:	0109      	lsls	r1, r1, #4
 8001858:	187a      	adds	r2, r7, r1
 800185a:	6013      	str	r3, [r2, #0]
				ad0_bitshift = (adcResultsDMA[0] >> 3);
 800185c:	4b4f      	ldr	r3, [pc, #316]	@ (800199c <main+0xed0>)
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	b29b      	uxth	r3, r3
 8001866:	4851      	ldr	r0, [pc, #324]	@ (80019ac <main+0xee0>)
 8001868:	183a      	adds	r2, r7, r0
 800186a:	6013      	str	r3, [r2, #0]
				freq = ad0_bitshift
						+ (table_lookup) * ((adcResultsDMA[0] >> 7) + 1); //10
 800186c:	4b4b      	ldr	r3, [pc, #300]	@ (800199c <main+0xed0>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	09db      	lsrs	r3, r3, #7
 8001874:	b29b      	uxth	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	001a      	movs	r2, r3
 800187a:	187b      	adds	r3, r7, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4353      	muls	r3, r2
				freq = ad0_bitshift
 8001880:	183a      	adds	r2, r7, r0
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	4a4a      	ldr	r2, [pc, #296]	@ (80019b0 <main+0xee4>)
 8001888:	18b9      	adds	r1, r7, r2
 800188a:	600b      	str	r3, [r1, #0]

				if (freq <= 0)
 800188c:	18bb      	adds	r3, r7, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <main+0xdce>
					freq = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	18ba      	adds	r2, r7, r2
 8001898:	6013      	str	r3, [r2, #0]
				TIM2->ARR = freq;
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	05db      	lsls	r3, r3, #23
 800189e:	4a44      	ldr	r2, [pc, #272]	@ (80019b0 <main+0xee4>)
 80018a0:	18ba      	adds	r2, r7, r2
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	62da      	str	r2, [r3, #44]	@ 0x2c

				ctr += 1;
 80018a6:	4a43      	ldr	r2, [pc, #268]	@ (80019b4 <main+0xee8>)
 80018a8:	18bb      	adds	r3, r7, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	18b9      	adds	r1, r7, r2
 80018b0:	600b      	str	r3, [r1, #0]
				if (ctr % ctr_scale == 0) {
 80018b2:	18bb      	adds	r3, r7, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a38      	ldr	r2, [pc, #224]	@ (8001998 <main+0xecc>)
 80018b8:	18ba      	adds	r2, r7, r2
 80018ba:	6811      	ldr	r1, [r2, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7fe fcb1 	bl	8000224 <__aeabi_uidivmod>
 80018c2:	1e0b      	subs	r3, r1, #0
 80018c4:	d10f      	bne.n	80018e6 <main+0xe1a>
					phase += (rand() % 42) + 1;
 80018c6:	f004 fbd9 	bl	800607c <rand>
 80018ca:	0003      	movs	r3, r0
 80018cc:	212a      	movs	r1, #42	@ 0x2a
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7fe fd92 	bl	80003f8 <__aeabi_idivmod>
 80018d4:	000b      	movs	r3, r1
 80018d6:	3301      	adds	r3, #1
 80018d8:	b299      	uxth	r1, r3
 80018da:	4a32      	ldr	r2, [pc, #200]	@ (80019a4 <main+0xed8>)
 80018dc:	18bb      	adds	r3, r7, r2
 80018de:	18ba      	adds	r2, r7, r2
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	188a      	adds	r2, r1, r2
 80018e4:	801a      	strh	r2, [r3, #0]
				}

				phase = phase % NS;
 80018e6:	4a2f      	ldr	r2, [pc, #188]	@ (80019a4 <main+0xed8>)
 80018e8:	18bb      	adds	r3, r7, r2
 80018ea:	18ba      	adds	r2, r7, r2
 80018ec:	8812      	ldrh	r2, [r2, #0]
 80018ee:	21ff      	movs	r1, #255	@ 0xff
 80018f0:	400a      	ands	r2, r1
 80018f2:	801a      	strh	r2, [r3, #0]
				ctr = ctr % NS;
 80018f4:	492f      	ldr	r1, [pc, #188]	@ (80019b4 <main+0xee8>)
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	22ff      	movs	r2, #255	@ 0xff
 80018fc:	4013      	ands	r3, r2
 80018fe:	187a      	adds	r2, r7, r1
 8001900:	6013      	str	r3, [r2, #0]
		}

		///////////////////
		// END OF PROGRAMS

		if (entropy == 0 && entropy_multiplier > 0 && ctr % ctr_scale == 0) {
 8001902:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <main+0xef0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d127      	bne.n	800195c <main+0xe90>
 800190c:	4b2c      	ldr	r3, [pc, #176]	@ (80019c0 <main+0xef4>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <main+0xe90>
 8001914:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <main+0xee8>)
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a1f      	ldr	r2, [pc, #124]	@ (8001998 <main+0xecc>)
 800191c:	18ba      	adds	r2, r7, r2
 800191e:	6811      	ldr	r1, [r2, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f7fe fc7f 	bl	8000224 <__aeabi_uidivmod>
 8001926:	1e0b      	subs	r3, r1, #0
 8001928:	d118      	bne.n	800195c <main+0xe90>

			// tmp
			uint32_t tmp_wav[NS];

			shuffle_func(tmp_wav, sine, NS, entropy_rate * entropy_multiplier); // classic crackly static
 800192a:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <main+0xef8>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	001a      	movs	r2, r3
 8001932:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <main+0xef4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4353      	muls	r3, r2
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	0052      	lsls	r2, r2, #1
 800193c:	491a      	ldr	r1, [pc, #104]	@ (80019a8 <main+0xedc>)
 800193e:	0038      	movs	r0, r7
 8001940:	f7fe ff58 	bl	80007f4 <shuffle_func>
			memcpy(wave_LUT, tmp_wav, sizeof(tmp_wav));
 8001944:	4a0e      	ldr	r2, [pc, #56]	@ (8001980 <main+0xeb4>)
 8001946:	4b11      	ldr	r3, [pc, #68]	@ (800198c <main+0xec0>)
 8001948:	4911      	ldr	r1, [pc, #68]	@ (8001990 <main+0xec4>)
 800194a:	185b      	adds	r3, r3, r1
 800194c:	19db      	adds	r3, r3, r7
 800194e:	0010      	movs	r0, r2
 8001950:	0019      	movs	r1, r3
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	001a      	movs	r2, r3
 8001958:	f004 fcc7 	bl	80062ea <memcpy>
		}

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcResultsDMA, adcChannelCount);
 800195c:	2302      	movs	r3, #2
 800195e:	001a      	movs	r2, r3
 8001960:	490e      	ldr	r1, [pc, #56]	@ (800199c <main+0xed0>)
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <main+0xefc>)
 8001964:	0018      	movs	r0, r3
 8001966:	f001 f8d3 	bl	8002b10 <HAL_ADC_Start_DMA>
		while (adcConversionComplete == 0) {
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <main+0xf00>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0fa      	beq.n	800196c <main+0xea0>

		}
		adcConversionComplete = 0;
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <main+0xf00>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
		if (group == 1) {
 800197c:	f7ff f94b 	bl	8000c16 <main+0x14a>
 8001980:	2000088c 	.word	0x2000088c
 8001984:	00000c18 	.word	0x00000c18
 8001988:	00000c04 	.word	0x00000c04
 800198c:	fffff3b8 	.word	0xfffff3b8
 8001990:	00000c48 	.word	0x00000c48
 8001994:	40020008 	.word	0x40020008
 8001998:	00000c38 	.word	0x00000c38
 800199c:	20000e50 	.word	0x20000e50
 80019a0:	00000c17 	.word	0x00000c17
 80019a4:	00000c42 	.word	0x00000c42
 80019a8:	20000000 	.word	0x20000000
 80019ac:	00000c0c 	.word	0x00000c0c
 80019b0:	00000c3c 	.word	0x00000c3c
 80019b4:	00000c44 	.word	0x00000c44
 80019b8:	20000804 	.word	0x20000804
 80019bc:	20000806 	.word	0x20000806
 80019c0:	20000e40 	.word	0x20000e40
 80019c4:	20000e41 	.word	0x20000e41
 80019c8:	20000c8c 	.word	0x20000c8c
 80019cc:	20000e54 	.word	0x20000e54

080019d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b093      	sub	sp, #76	@ 0x4c
 80019d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019d6:	2410      	movs	r4, #16
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	0018      	movs	r0, r3
 80019dc:	2338      	movs	r3, #56	@ 0x38
 80019de:	001a      	movs	r2, r3
 80019e0:	2100      	movs	r1, #0
 80019e2:	f004 fc4d 	bl	8006280 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019e6:	003b      	movs	r3, r7
 80019e8:	0018      	movs	r0, r3
 80019ea:	2310      	movs	r3, #16
 80019ec:	001a      	movs	r2, r3
 80019ee:	2100      	movs	r1, #0
 80019f0:	f004 fc46 	bl	8006280 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f002 fac3 	bl	8003f84 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2202      	movs	r2, #2
 8001a02:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	0052      	lsls	r2, r2, #1
 8001a0a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001a0c:	0021      	movs	r1, r4
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2202      	movs	r2, #2
 8001a24:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2210      	movs	r2, #16
 8001a30:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	0292      	lsls	r2, r2, #10
 8001a38:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a3a:	187b      	adds	r3, r7, r1
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	0492      	lsls	r2, r2, #18
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001a42:	187b      	adds	r3, r7, r1
 8001a44:	22c0      	movs	r2, #192	@ 0xc0
 8001a46:	05d2      	lsls	r2, r2, #23
 8001a48:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 fad9 	bl	8004004 <HAL_RCC_OscConfig>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0x8a>
		Error_Handler();
 8001a56:	f000 fa55 	bl	8001f04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2202      	movs	r2, #2
 8001a64:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	003b      	movs	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a72:	003b      	movs	r3, r7
 8001a74:	2102      	movs	r1, #2
 8001a76:	0018      	movs	r0, r3
 8001a78:	f002 fdde 	bl	8004638 <HAL_RCC_ClockConfig>
 8001a7c:	1e03      	subs	r3, r0, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0xb4>
		Error_Handler();
 8001a80:	f000 fa40 	bl	8001f04 <Error_Handler>
	}
}
 8001a84:	46c0      	nop			@ (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b013      	add	sp, #76	@ 0x4c
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	0018      	movs	r0, r3
 8001a96:	230c      	movs	r3, #12
 8001a98:	001a      	movs	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f004 fbf0 	bl	8006280 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001aa0:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001aa2:	4a37      	ldr	r2, [pc, #220]	@ (8001b80 <MX_ADC1_Init+0xf4>)
 8001aa4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001aa6:	4b35      	ldr	r3, [pc, #212]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001aa8:	2280      	movs	r2, #128	@ 0x80
 8001aaa:	05d2      	lsls	r2, r2, #23
 8001aac:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aae:	4b33      	ldr	r3, [pc, #204]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8001aba:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001abc:	2280      	movs	r2, #128	@ 0x80
 8001abe:	0612      	lsls	r2, r2, #24
 8001ac0:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001ace:	4b2b      	ldr	r3, [pc, #172]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	765a      	strb	r2, [r3, #25]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad4:	4b29      	ldr	r3, [pc, #164]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	769a      	strb	r2, [r3, #26]
	hadc1.Init.NbrOfConversion = 1;
 8001ada:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ae0:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	625a      	str	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aee:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001af6:	222c      	movs	r2, #44	@ 0x2c
 8001af8:	2100      	movs	r1, #0
 8001afa:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	635a      	str	r2, [r3, #52]	@ 0x34
	hadc1.Init.OversamplingMode = ENABLE;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b0a:	223c      	movs	r2, #60	@ 0x3c
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	5499      	strb	r1, [r3, r2]
	hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b12:	221c      	movs	r2, #28
 8001b14:	641a      	str	r2, [r3, #64]	@ 0x40
	hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001b16:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001b1c:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	649a      	str	r2, [r3, #72]	@ 0x48
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001b22:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001b28:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fe48 	bl	80027c0 <HAL_ADC_Init>
 8001b30:	1e03      	subs	r3, r0, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0xac>
		Error_Handler();
 8001b34:	f000 f9e6 	bl	8001f04 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_16;
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <MX_ADC1_Init+0xf8>)
 8001b3c:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2201      	movs	r2, #1
 8001b42:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b44:	1d3a      	adds	r2, r7, #4
 8001b46:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b48:	0011      	movs	r1, r2
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f001 f87e 	bl	8002c4c <HAL_ADC_ConfigChannel>
 8001b50:	1e03      	subs	r3, r0, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0xcc>
		Error_Handler();
 8001b54:	f000 f9d6 	bl	8001f04 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b88 <MX_ADC1_Init+0xfc>)
 8001b5c:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001b5e:	1d3a      	adds	r2, r7, #4
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <MX_ADC1_Init+0xf0>)
 8001b62:	0011      	movs	r1, r2
 8001b64:	0018      	movs	r0, r3
 8001b66:	f001 f871 	bl	8002c4c <HAL_ADC_ConfigChannel>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC1_Init+0xe6>
		Error_Handler();
 8001b6e:	f000 f9c9 	bl	8001f04 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001b72:	46c0      	nop			@ (mov r8, r8)
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	20000c8c 	.word	0x20000c8c
 8001b80:	40012400 	.word	0x40012400
 8001b84:	40010000 	.word	0x40010000
 8001b88:	44020000 	.word	0x44020000

08001b8c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b09c      	sub	sp, #112	@ 0x70
 8001b90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b92:	2360      	movs	r3, #96	@ 0x60
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	0018      	movs	r0, r3
 8001b98:	2310      	movs	r3, #16
 8001b9a:	001a      	movs	r2, r3
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f004 fb6f 	bl	8006280 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ba2:	2354      	movs	r3, #84	@ 0x54
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	230c      	movs	r3, #12
 8001baa:	001a      	movs	r2, r3
 8001bac:	2100      	movs	r1, #0
 8001bae:	f004 fb67 	bl	8006280 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001bb2:	2338      	movs	r3, #56	@ 0x38
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	231c      	movs	r3, #28
 8001bba:	001a      	movs	r2, r3
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	f004 fb5f 	bl	8006280 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	2334      	movs	r3, #52	@ 0x34
 8001bc8:	001a      	movs	r2, r3
 8001bca:	2100      	movs	r1, #0
 8001bcc:	f004 fb58 	bl	8006280 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001bd0:	4b51      	ldr	r3, [pc, #324]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001bd2:	4a52      	ldr	r2, [pc, #328]	@ (8001d1c <MX_TIM1_Init+0x190>)
 8001bd4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001bd6:	4b50      	ldr	r3, [pc, #320]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 256 - 1;
 8001be2:	4b4d      	ldr	r3, [pc, #308]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001be4:	22ff      	movs	r2, #255	@ 0xff
 8001be6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b4b      	ldr	r3, [pc, #300]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001bee:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf4:	4b48      	ldr	r3, [pc, #288]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001bfa:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f003 f81f 	bl	8004c40 <HAL_TIM_Base_Init>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0x7e>
		Error_Handler();
 8001c06:	f000 f97d 	bl	8001f04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0a:	2160      	movs	r1, #96	@ 0x60
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2280      	movs	r2, #128	@ 0x80
 8001c10:	0152      	lsls	r2, r2, #5
 8001c12:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001c14:	187a      	adds	r2, r7, r1
 8001c16:	4b40      	ldr	r3, [pc, #256]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001c18:	0011      	movs	r1, r2
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f003 fc44 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 8001c20:	1e03      	subs	r3, r0, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8001c24:	f000 f96e 	bl	8001f04 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001c28:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f003 f99e 	bl	8004f6c <HAL_TIM_PWM_Init>
 8001c30:	1e03      	subs	r3, r0, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0xac>
		Error_Handler();
 8001c34:	f000 f966 	bl	8001f04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2154      	movs	r1, #84	@ 0x54
 8001c3a:	187b      	adds	r3, r7, r1
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001c4c:	187a      	adds	r2, r7, r1
 8001c4e:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001c50:	0011      	movs	r1, r2
 8001c52:	0018      	movs	r0, r3
 8001c54:	f004 f8de 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8001c5c:	f000 f952 	bl	8001f04 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c60:	2138      	movs	r1, #56	@ 0x38
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2260      	movs	r2, #96	@ 0x60
 8001c66:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001c8c:	1879      	adds	r1, r7, r1
 8001c8e:	4b22      	ldr	r3, [pc, #136]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	0018      	movs	r0, r3
 8001c94:	f003 fb08 	bl	80052a8 <HAL_TIM_PWM_ConfigChannel>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM1_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8001c9c:	f000 f932 	bl	8001f04 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	0192      	lsls	r2, r2, #6
 8001cc4:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2280      	movs	r2, #128	@ 0x80
 8001cdc:	0492      	lsls	r2, r2, #18
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001cf2:	1d3a      	adds	r2, r7, #4
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f004 f8f3 	bl	8005ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cfe:	1e03      	subs	r3, r0, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM1_Init+0x17a>
			!= HAL_OK) {
		Error_Handler();
 8001d02:	f000 f8ff 	bl	8001f04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001d06:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <MX_TIM1_Init+0x18c>)
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 fa13 	bl	8002134 <HAL_TIM_MspPostInit>

}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b01c      	add	sp, #112	@ 0x70
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	20000d4c 	.word	0x20000d4c
 8001d1c:	40012c00 	.word	0x40012c00

08001d20 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08e      	sub	sp, #56	@ 0x38
 8001d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001d26:	2328      	movs	r3, #40	@ 0x28
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	001a      	movs	r2, r3
 8001d30:	2100      	movs	r1, #0
 8001d32:	f004 faa5 	bl	8006280 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d36:	231c      	movs	r3, #28
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	001a      	movs	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	f004 fa9d 	bl	8006280 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001d46:	003b      	movs	r3, r7
 8001d48:	0018      	movs	r0, r3
 8001d4a:	231c      	movs	r3, #28
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f004 fa96 	bl	8006280 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001d54:	4b2e      	ldr	r3, [pc, #184]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d56:	2280      	movs	r2, #128	@ 0x80
 8001d58:	05d2      	lsls	r2, r2, #23
 8001d5a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 8001d68:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d6a:	22fa      	movs	r2, #250	@ 0xfa
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d70:	4b27      	ldr	r3, [pc, #156]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d76:	4b26      	ldr	r3, [pc, #152]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d78:	2280      	movs	r2, #128	@ 0x80
 8001d7a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f002 ff5e 	bl	8004c40 <HAL_TIM_Base_Init>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x6c>
		Error_Handler();
 8001d88:	f000 f8bc 	bl	8001f04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	2128      	movs	r1, #40	@ 0x28
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	2280      	movs	r2, #128	@ 0x80
 8001d92:	0152      	lsls	r2, r2, #5
 8001d94:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001d96:	187a      	adds	r2, r7, r1
 8001d98:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f003 fb83 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 8001da2:	1e03      	subs	r3, r0, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x8a>
		Error_Handler();
 8001da6:	f000 f8ad 	bl	8001f04 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001dac:	0018      	movs	r0, r3
 8001dae:	f002 ff9f 	bl	8004cf0 <HAL_TIM_OC_Init>
 8001db2:	1e03      	subs	r3, r0, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0x9a>
		Error_Handler();
 8001db6:	f000 f8a5 	bl	8001f04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	211c      	movs	r1, #28
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001dc8:	187a      	adds	r2, r7, r1
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f004 f820 	bl	8005e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8001dd8:	f000 f894 	bl	8001f04 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ddc:	003b      	movs	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8001de2:	003b      	movs	r3, r7
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de8:	003b      	movs	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dee:	003b      	movs	r3, r7
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001df4:	0039      	movs	r1, r7
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <MX_TIM2_Init+0xf0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f003 f9f4 	bl	80051e8 <HAL_TIM_OC_ConfigChannel>
 8001e00:	1e03      	subs	r3, r0, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8001e04:	f000 f87e 	bl	8001f04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001e08:	46c0      	nop			@ (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b00e      	add	sp, #56	@ 0x38
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000d98 	.word	0x20000d98

08001e14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <MX_DMA_Init+0x48>)
 8001e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_DMA_Init+0x48>)
 8001e20:	2101      	movs	r1, #1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <MX_DMA_Init+0x48>)
 8001e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	2009      	movs	r0, #9
 8001e38:	f001 fc92 	bl	8003760 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e3c:	2009      	movs	r0, #9
 8001e3e:	f001 fca4 	bl	800378a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	200a      	movs	r0, #10
 8001e48:	f001 fc8a 	bl	8003760 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f001 fc9c 	bl	800378a <HAL_NVIC_EnableIRQ>

}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	40021000 	.word	0x40021000

08001e60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e60:	b590      	push	{r4, r7, lr}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e66:	240c      	movs	r4, #12
 8001e68:	193b      	adds	r3, r7, r4
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	2314      	movs	r3, #20
 8001e6e:	001a      	movs	r2, r3
 8001e70:	2100      	movs	r1, #0
 8001e72:	f004 fa05 	bl	8006280 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <MX_GPIO_Init+0x80>)
 8001e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <MX_GPIO_Init+0x80>)
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <MX_GPIO_Init+0x80>)
 8001e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e86:	2202      	movs	r2, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <MX_GPIO_Init+0x80>)
 8001e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <MX_GPIO_Init+0x80>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <MX_GPIO_Init+0x80>)
 8001e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	2280      	movs	r2, #128	@ 0x80
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001eae:	193b      	adds	r3, r7, r4
 8001eb0:	22c4      	movs	r2, #196	@ 0xc4
 8001eb2:	0392      	lsls	r2, r2, #14
 8001eb4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	193b      	adds	r3, r7, r4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <MX_GPIO_Init+0x84>)
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	0010      	movs	r0, r2
 8001ec4:	f001 fed0 	bl	8003c68 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2007      	movs	r0, #7
 8001ece:	f001 fc47 	bl	8003760 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001ed2:	2007      	movs	r0, #7
 8001ed4:	f001 fc59 	bl	800378a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed8:	46c0      	nop			@ (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b009      	add	sp, #36	@ 0x24
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	50000400 	.word	0x50000400

08001ee8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
// Conversion Complete & DMA Transfer Complete As Well
	adcConversionComplete = 1;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	@ (8001f00 <HAL_ADC_ConvCpltCallback+0x18>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	20000e54 	.word	0x20000e54

08001f04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f08:	b672      	cpsid	i
}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f0c:	46c0      	nop			@ (mov r8, r8)
 8001f0e:	e7fd      	b.n	8001f0c <Error_Handler+0x8>

08001f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f32:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	0549      	lsls	r1, r1, #21
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_MspInit+0x44>)
 8001f3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	055b      	lsls	r3, r3, #21
 8001f44:	4013      	ands	r3, r2
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	40021000 	.word	0x40021000

08001f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b08b      	sub	sp, #44	@ 0x2c
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	2414      	movs	r4, #20
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	0018      	movs	r0, r3
 8001f66:	2314      	movs	r3, #20
 8001f68:	001a      	movs	r2, r3
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f004 f988 	bl	8006280 <memset>
  if(hadc->Instance==ADC1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2e      	ldr	r2, [pc, #184]	@ (8002030 <HAL_ADC_MspInit+0xd8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d155      	bne.n	8002026 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <HAL_ADC_MspInit+0xdc>)
 8001f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_ADC_MspInit+0xdc>)
 8001f80:	2180      	movs	r1, #128	@ 0x80
 8001f82:	0349      	lsls	r1, r1, #13
 8001f84:	430a      	orrs	r2, r1
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_ADC_MspInit+0xdc>)
 8001f8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	035b      	lsls	r3, r3, #13
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <HAL_ADC_MspInit+0xdc>)
 8001f98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f9a:	4b26      	ldr	r3, [pc, #152]	@ (8002034 <HAL_ADC_MspInit+0xdc>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fa2:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <HAL_ADC_MspInit+0xdc>)
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN16
    PA13     ------> ADC1_IN17
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	22c0      	movs	r2, #192	@ 0xc0
 8001fb2:	0192      	lsls	r2, r2, #6
 8001fb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb6:	193b      	adds	r3, r7, r4
 8001fb8:	2203      	movs	r2, #3
 8001fba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	193b      	adds	r3, r7, r4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	193a      	adds	r2, r7, r4
 8001fc4:	23a0      	movs	r3, #160	@ 0xa0
 8001fc6:	05db      	lsls	r3, r3, #23
 8001fc8:	0011      	movs	r1, r2
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f001 fe4c 	bl	8003c68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800203c <HAL_ADC_MspInit+0xe4>)
 8001fd4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fd6:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8001fd8:	2205      	movs	r2, #5
 8001fda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fe8:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8001fea:	2280      	movs	r2, #128	@ 0x80
 8001fec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fee:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	0052      	lsls	r2, r2, #1
 8001ff4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8001ff8:	2280      	movs	r2, #128	@ 0x80
 8001ffa:	00d2      	lsls	r2, r2, #3
 8001ffc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8002000:	2200      	movs	r2, #0
 8002002:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8002006:	2200      	movs	r2, #0
 8002008:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 800200c:	0018      	movs	r0, r3
 800200e:	f001 fbd9 	bl	80037c4 <HAL_DMA_Init>
 8002012:	1e03      	subs	r3, r0, #0
 8002014:	d001      	beq.n	800201a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8002016:	f7ff ff75 	bl	8001f04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a06      	ldr	r2, [pc, #24]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 800201e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002020:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_ADC_MspInit+0xe0>)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b00b      	add	sp, #44	@ 0x2c
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	40012400 	.word	0x40012400
 8002034:	40021000 	.word	0x40021000
 8002038:	20000cf0 	.word	0x20000cf0
 800203c:	4002001c 	.word	0x4002001c

08002040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b08f      	sub	sp, #60	@ 0x3c
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002048:	2410      	movs	r4, #16
 800204a:	193b      	adds	r3, r7, r4
 800204c:	0018      	movs	r0, r3
 800204e:	2328      	movs	r3, #40	@ 0x28
 8002050:	001a      	movs	r2, r3
 8002052:	2100      	movs	r1, #0
 8002054:	f004 f914 	bl	8006280 <memset>
  if(htim_base->Instance==TIM1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_TIM_Base_MspInit+0xe4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d11e      	bne.n	80020a0 <HAL_TIM_Base_MspInit+0x60>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002062:	193b      	adds	r3, r7, r4
 8002064:	2280      	movs	r2, #128	@ 0x80
 8002066:	0392      	lsls	r2, r2, #14
 8002068:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PLL;
 800206a:	193b      	adds	r3, r7, r4
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	03d2      	lsls	r2, r2, #15
 8002070:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002072:	193b      	adds	r3, r7, r4
 8002074:	0018      	movs	r0, r3
 8002076:	f002 fc69 	bl	800494c <HAL_RCCEx_PeriphCLKConfig>
 800207a:	1e03      	subs	r3, r0, #0
 800207c:	d001      	beq.n	8002082 <HAL_TIM_Base_MspInit+0x42>
    {
      Error_Handler();
 800207e:	f7ff ff41 	bl	8001f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002082:	4b29      	ldr	r3, [pc, #164]	@ (8002128 <HAL_TIM_Base_MspInit+0xe8>)
 8002084:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_TIM_Base_MspInit+0xe8>)
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	0109      	lsls	r1, r1, #4
 800208c:	430a      	orrs	r2, r1
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002090:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_TIM_Base_MspInit+0xe8>)
 8002092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4013      	ands	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800209e:	e03d      	b.n	800211c <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	05db      	lsls	r3, r3, #23
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d137      	bne.n	800211c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_TIM_Base_MspInit+0xe8>)
 80020ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <HAL_TIM_Base_MspInit+0xe8>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_TIM_Base_MspInit+0xe8>)
 80020ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020bc:	2201      	movs	r2, #1
 80020be:	4013      	ands	r3, r2
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel1;
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_TIM_Base_MspInit+0xf0>)
 80020c8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020cc:	221a      	movs	r2, #26
 80020ce:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020d2:	2210      	movs	r2, #16
 80020d4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020dc:	4b13      	ldr	r3, [pc, #76]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020de:	2280      	movs	r2, #128	@ 0x80
 80020e0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020e4:	2280      	movs	r2, #128	@ 0x80
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020ea:	4b10      	ldr	r3, [pc, #64]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020f4:	2220      	movs	r2, #32
 80020f6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	0192      	lsls	r2, r2, #6
 80020fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002100:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 8002102:	0018      	movs	r0, r3
 8002104:	f001 fb5e 	bl	80037c4 <HAL_DMA_Init>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d001      	beq.n	8002110 <HAL_TIM_Base_MspInit+0xd0>
      Error_Handler();
 800210c:	f7ff fefa 	bl	8001f04 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a06      	ldr	r2, [pc, #24]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_TIM_Base_MspInit+0xec>)
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b00f      	add	sp, #60	@ 0x3c
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	40012c00 	.word	0x40012c00
 8002128:	40021000 	.word	0x40021000
 800212c:	20000de4 	.word	0x20000de4
 8002130:	40020008 	.word	0x40020008

08002134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	240c      	movs	r4, #12
 800213e:	193b      	adds	r3, r7, r4
 8002140:	0018      	movs	r0, r3
 8002142:	2314      	movs	r3, #20
 8002144:	001a      	movs	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	f004 f89a 	bl	8006280 <memset>
  if(htim->Instance==TIM1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a15      	ldr	r2, [pc, #84]	@ (80021a8 <HAL_TIM_MspPostInit+0x74>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d123      	bne.n	800219e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_TIM_MspPostInit+0x78>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <HAL_TIM_MspPostInit+0x78>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_TIM_MspPostInit+0x78>)
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800216e:	193b      	adds	r3, r7, r4
 8002170:	2280      	movs	r2, #128	@ 0x80
 8002172:	0052      	lsls	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	0021      	movs	r1, r4
 8002178:	187b      	adds	r3, r7, r1
 800217a:	2202      	movs	r2, #2
 800217c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	187b      	adds	r3, r7, r1
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	187b      	adds	r3, r7, r1
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800218a:	187b      	adds	r3, r7, r1
 800218c:	2202      	movs	r2, #2
 800218e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	187a      	adds	r2, r7, r1
 8002192:	23a0      	movs	r3, #160	@ 0xa0
 8002194:	05db      	lsls	r3, r3, #23
 8002196:	0011      	movs	r1, r2
 8002198:	0018      	movs	r0, r3
 800219a:	f001 fd65 	bl	8003c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b009      	add	sp, #36	@ 0x24
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40021000 	.word	0x40021000

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021b4:	46c0      	nop			@ (mov r8, r8)
 80021b6:	e7fd      	b.n	80021b4 <NMI_Handler+0x4>

080021b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021bc:	46c0      	nop			@ (mov r8, r8)
 80021be:	e7fd      	b.n	80021bc <HardFault_Handler+0x4>

080021c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80021c4:	46c0      	nop			@ (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f000 f97e 	bl	80024d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	0018      	movs	r0, r3
 80021ec:	f001 fea0 	bl	8003f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <DMA1_Channel1_IRQHandler+0x14>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f001 fbf0 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	20000de4 	.word	0x20000de4

08002210 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002216:	0018      	movs	r0, r3
 8002218:	f001 fbe4 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800221c:	46c0      	nop			@ (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	20000cf0 	.word	0x20000cf0

08002228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  return 1;
 800222c:	2301      	movs	r3, #1
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_kill>:

int _kill(int pid, int sig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800223e:	f004 f827 	bl	8006290 <__errno>
 8002242:	0003      	movs	r3, r0
 8002244:	2216      	movs	r2, #22
 8002246:	601a      	str	r2, [r3, #0]
  return -1;
 8002248:	2301      	movs	r3, #1
 800224a:	425b      	negs	r3, r3
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}

08002254 <_exit>:

void _exit (int status)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800225c:	2301      	movs	r3, #1
 800225e:	425a      	negs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff ffe5 	bl	8002234 <_kill>
  while (1) {}    /* Make sure we hang here */
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	e7fd      	b.n	800226a <_exit+0x16>

0800226e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e00a      	b.n	8002296 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002280:	e000      	b.n	8002284 <_read+0x16>
 8002282:	bf00      	nop
 8002284:	0001      	movs	r1, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	60ba      	str	r2, [r7, #8]
 800228c:	b2ca      	uxtb	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	dbf0      	blt.n	8002280 <_read+0x12>
  }

  return len;
 800229e:	687b      	ldr	r3, [r7, #4]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b006      	add	sp, #24
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e009      	b.n	80022ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	60ba      	str	r2, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	0018      	movs	r0, r3
 80022c4:	e000      	b.n	80022c8 <_write+0x20>
 80022c6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	dbf1      	blt.n	80022ba <_write+0x12>
  }
  return len;
 80022d6:	687b      	ldr	r3, [r7, #4]
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b006      	add	sp, #24
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_close>:

int _close(int file)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e8:	2301      	movs	r3, #1
 80022ea:	425b      	negs	r3, r3
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	0192      	lsls	r2, r2, #6
 8002304:	605a      	str	r2, [r3, #4]
  return 0;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <_isatty>:

int _isatty(int file)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002318:	2301      	movs	r3, #1
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bd80      	pop	{r7, pc}

08002322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b004      	add	sp, #16
 8002336:	bd80      	pop	{r7, pc}

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	18d3      	adds	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f003 ff92 	bl	8006290 <__errno>
 800236c:	0003      	movs	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	2301      	movs	r3, #1
 8002374:	425b      	negs	r3, r3
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	@ (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	18d2      	adds	r2, r2, r3
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <_sbrk+0x64>)
 8002388:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b006      	add	sp, #24
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20002000 	.word	0x20002000
 8002398:	00000400 	.word	0x00000400
 800239c:	20000e58 	.word	0x20000e58
 80023a0:	20000fb0 	.word	0x20000fb0

080023a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a8:	46c0      	nop			@ (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 80023b0:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b4:	f7ff fff6 	bl	80023a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b8:	480c      	ldr	r0, [pc, #48]	@ (80023ec <LoopForever+0x6>)
  ldr r1, =_edata
 80023ba:	490d      	ldr	r1, [pc, #52]	@ (80023f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <LoopForever+0xe>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d0:	4c0a      	ldr	r4, [pc, #40]	@ (80023fc <LoopForever+0x16>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023de:	f003 ff5d 	bl	800629c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80023e2:	f7fe fb73 	bl	8000acc <main>

080023e6 <LoopForever>:

LoopForever:
  b LoopForever
 80023e6:	e7fe      	b.n	80023e6 <LoopForever>
  ldr   r0, =_estack
 80023e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80023ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f0:	20000870 	.word	0x20000870
  ldr r2, =_sidata
 80023f4:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 80023f8:	20000870 	.word	0x20000870
  ldr r4, =_ebss
 80023fc:	20000fac 	.word	0x20000fac

08002400 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC1_IRQHandler>
	...

08002404 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_Init+0x3c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_Init+0x3c>)
 8002416:	2180      	movs	r1, #128	@ 0x80
 8002418:	0049      	lsls	r1, r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800241e:	2000      	movs	r0, #0
 8002420:	f000 f810 	bl	8002444 <HAL_InitTick>
 8002424:	1e03      	subs	r3, r0, #0
 8002426:	d003      	beq.n	8002430 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e001      	b.n	8002434 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002430:	f7ff fd6e 	bl	8001f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	781b      	ldrb	r3, [r3, #0]
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800244c:	230f      	movs	r3, #15
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <HAL_InitTick+0x88>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02b      	beq.n	80024b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800245c:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_InitTick+0x8c>)
 800245e:	681c      	ldr	r4, [r3, #0]
 8002460:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_InitTick+0x88>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	0019      	movs	r1, r3
 8002466:	23fa      	movs	r3, #250	@ 0xfa
 8002468:	0098      	lsls	r0, r3, #2
 800246a:	f7fd fe55 	bl	8000118 <__udivsi3>
 800246e:	0003      	movs	r3, r0
 8002470:	0019      	movs	r1, r3
 8002472:	0020      	movs	r0, r4
 8002474:	f7fd fe50 	bl	8000118 <__udivsi3>
 8002478:	0003      	movs	r3, r0
 800247a:	0018      	movs	r0, r3
 800247c:	f001 f995 	bl	80037aa <HAL_SYSTICK_Config>
 8002480:	1e03      	subs	r3, r0, #0
 8002482:	d112      	bne.n	80024aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d80a      	bhi.n	80024a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	2301      	movs	r3, #1
 800248e:	425b      	negs	r3, r3
 8002490:	2200      	movs	r2, #0
 8002492:	0018      	movs	r0, r3
 8002494:	f001 f964 	bl	8003760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002498:	4b0e      	ldr	r3, [pc, #56]	@ (80024d4 <HAL_InitTick+0x90>)
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	e00d      	b.n	80024bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80024a0:	230f      	movs	r3, #15
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e008      	b.n	80024bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024aa:	230f      	movs	r3, #15
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2201      	movs	r2, #1
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e003      	b.n	80024bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b4:	230f      	movs	r3, #15
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80024bc:	230f      	movs	r3, #15
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	781b      	ldrb	r3, [r3, #0]
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b005      	add	sp, #20
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	20000810 	.word	0x20000810
 80024d0:	20000808 	.word	0x20000808
 80024d4:	2000080c 	.word	0x2000080c

080024d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024dc:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_IncTick+0x1c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	001a      	movs	r2, r3
 80024e2:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_IncTick+0x20>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	18d2      	adds	r2, r2, r3
 80024e8:	4b03      	ldr	r3, [pc, #12]	@ (80024f8 <HAL_IncTick+0x20>)
 80024ea:	601a      	str	r2, [r3, #0]
}
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	20000810 	.word	0x20000810
 80024f8:	20000e5c 	.word	0x20000e5c

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b02      	ldr	r3, [pc, #8]	@ (800250c <HAL_GetTick+0x10>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	20000e5c 	.word	0x20000e5c

08002510 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a05      	ldr	r2, [pc, #20]	@ (8002534 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002520:	401a      	ands	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	601a      	str	r2, [r3, #0]
}
 800252a:	46c0      	nop			@ (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	fe3fffff 	.word	0xfe3fffff

08002538 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	23e0      	movs	r3, #224	@ 0xe0
 8002546:	045b      	lsls	r3, r3, #17
 8002548:	4013      	ands	r3, r2
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}

08002552 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	2104      	movs	r1, #4
 8002566:	400a      	ands	r2, r1
 8002568:	2107      	movs	r1, #7
 800256a:	4091      	lsls	r1, r2
 800256c:	000a      	movs	r2, r1
 800256e:	43d2      	mvns	r2, r2
 8002570:	401a      	ands	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2104      	movs	r1, #4
 8002576:	400b      	ands	r3, r1
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4099      	lsls	r1, r3
 800257c:	000b      	movs	r3, r1
 800257e:	431a      	orrs	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002584:	46c0      	nop			@ (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}

0800258c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	2104      	movs	r1, #4
 800259e:	400a      	ands	r2, r1
 80025a0:	2107      	movs	r1, #7
 80025a2:	4091      	lsls	r1, r2
 80025a4:	000a      	movs	r2, r1
 80025a6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2104      	movs	r1, #4
 80025ac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80025ae:	40da      	lsrs	r2, r3
 80025b0:	0013      	movs	r3, r2
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}

080025ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	23c0      	movs	r3, #192	@ 0xc0
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	4013      	ands	r3, r2
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	211f      	movs	r1, #31
 80025f0:	400a      	ands	r2, r1
 80025f2:	210f      	movs	r1, #15
 80025f4:	4091      	lsls	r1, r2
 80025f6:	000a      	movs	r2, r1
 80025f8:	43d2      	mvns	r2, r2
 80025fa:	401a      	ands	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	210f      	movs	r1, #15
 8002602:	4019      	ands	r1, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	201f      	movs	r0, #31
 8002608:	4003      	ands	r3, r0
 800260a:	4099      	lsls	r1, r3
 800260c:	000b      	movs	r3, r1
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bd80      	pop	{r7, pc}

0800261c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	035b      	lsls	r3, r3, #13
 800262e:	0b5b      	lsrs	r3, r3, #13
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}

0800263e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	0352      	lsls	r2, r2, #13
 8002650:	0b52      	lsrs	r2, r2, #13
 8002652:	43d2      	mvns	r2, r2
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800265a:	46c0      	nop			@ (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b002      	add	sp, #8
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	0212      	lsls	r2, r2, #8
 8002678:	43d2      	mvns	r2, r2
 800267a:	401a      	ands	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	400b      	ands	r3, r1
 8002684:	4904      	ldr	r1, [pc, #16]	@ (8002698 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002686:	400b      	ands	r3, r1
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800268e:	46c0      	nop			@ (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			@ (mov r8, r8)
 8002698:	07ffff00 	.word	0x07ffff00

0800269c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a05      	ldr	r2, [pc, #20]	@ (80026c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	2280      	movs	r2, #128	@ 0x80
 80026ae:	0552      	lsls	r2, r2, #21
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	6fffffe8 	.word	0x6fffffe8

080026c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	055b      	lsls	r3, r3, #21
 80026d4:	401a      	ands	r2, r3
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	055b      	lsls	r3, r3, #21
 80026da:	429a      	cmp	r2, r3
 80026dc:	d101      	bne.n	80026e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}

080026ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a04      	ldr	r2, [pc, #16]	@ (800270c <LL_ADC_Enable+0x20>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	2201      	movs	r2, #1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}
 800270c:	7fffffe8 	.word	0x7fffffe8

08002710 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <LL_ADC_Disable+0x20>)
 800271e:	4013      	ands	r3, r2
 8002720:	2202      	movs	r2, #2
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002728:	46c0      	nop			@ (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}
 8002730:	7fffffe8 	.word	0x7fffffe8

08002734 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2201      	movs	r2, #1
 8002742:	4013      	ands	r3, r2
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <LL_ADC_IsEnabled+0x18>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <LL_ADC_IsEnabled+0x1a>
 800274c:	2300      	movs	r3, #0
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b002      	add	sp, #8
 8002754:	bd80      	pop	{r7, pc}

08002756 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d101      	bne.n	800276e <LL_ADC_IsDisableOngoing+0x18>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <LL_ADC_IsDisableOngoing+0x1a>
 800276e:	2300      	movs	r3, #0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <LL_ADC_REG_StartConversion+0x20>)
 8002786:	4013      	ands	r3, r2
 8002788:	2204      	movs	r2, #4
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002790:	46c0      	nop			@ (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}
 8002798:	7fffffe8 	.word	0x7fffffe8

0800279c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2204      	movs	r2, #4
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d101      	bne.n	80027b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027c8:	231f      	movs	r3, #31
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e17f      	b.n	8002ae6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7ff fbb1 	bl	8001f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2254      	movs	r2, #84	@ 0x54
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0018      	movs	r0, r3
 800280a:	f7ff ff5b 	bl	80026c4 <LL_ADC_IsInternalRegulatorEnabled>
 800280e:	1e03      	subs	r3, r0, #0
 8002810:	d115      	bne.n	800283e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	0018      	movs	r0, r3
 8002818:	f7ff ff40 	bl	800269c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281c:	4bb4      	ldr	r3, [pc, #720]	@ (8002af0 <HAL_ADC_Init+0x330>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	49b4      	ldr	r1, [pc, #720]	@ (8002af4 <HAL_ADC_Init+0x334>)
 8002822:	0018      	movs	r0, r3
 8002824:	f7fd fc78 	bl	8000118 <__udivsi3>
 8002828:	0003      	movs	r3, r0
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002830:	e002      	b.n	8002838 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0018      	movs	r0, r3
 8002844:	f7ff ff3e 	bl	80026c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d10f      	bne.n	800286c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002850:	2210      	movs	r2, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	2201      	movs	r2, #1
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002864:	231f      	movs	r3, #31
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff ff93 	bl	800279c <LL_ADC_REG_IsConversionOngoing>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	2210      	movs	r2, #16
 8002880:	4013      	ands	r3, r2
 8002882:	d000      	beq.n	8002886 <HAL_ADC_Init+0xc6>
 8002884:	e122      	b.n	8002acc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d000      	beq.n	800288e <HAL_ADC_Init+0xce>
 800288c:	e11e      	b.n	8002acc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	4a99      	ldr	r2, [pc, #612]	@ (8002af8 <HAL_ADC_Init+0x338>)
 8002894:	4013      	ands	r3, r2
 8002896:	2202      	movs	r2, #2
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7ff ff46 	bl	8002734 <LL_ADC_IsEnabled>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d000      	beq.n	80028ae <HAL_ADC_Init+0xee>
 80028ac:	e0ad      	b.n	8002a0a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7e1b      	ldrb	r3, [r3, #24]
 80028b6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80028b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7e5b      	ldrb	r3, [r3, #25]
 80028be:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7e9b      	ldrb	r3, [r3, #26]
 80028c6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80028c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_ADC_Init+0x118>
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	015b      	lsls	r3, r3, #5
 80028d6:	e000      	b.n	80028da <HAL_ADC_Init+0x11a>
 80028d8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80028da:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80028e0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	da04      	bge.n	80028f4 <HAL_ADC_Init+0x134>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	e001      	b.n	80028f8 <HAL_ADC_Init+0x138>
 80028f4:	2380      	movs	r3, #128	@ 0x80
 80028f6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80028f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	212c      	movs	r1, #44	@ 0x2c
 80028fe:	5c5b      	ldrb	r3, [r3, r1]
 8002900:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002902:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2220      	movs	r2, #32
 800290e:	5c9b      	ldrb	r3, [r3, r2]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d115      	bne.n	8002940 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7e9b      	ldrb	r3, [r3, #26]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d105      	bne.n	8002928 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2280      	movs	r2, #128	@ 0x80
 8002920:	0252      	lsls	r2, r2, #9
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	e00b      	b.n	8002940 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292c:	2220      	movs	r2, #32
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	2201      	movs	r2, #1
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800294c:	23e0      	movs	r3, #224	@ 0xe0
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002956:	4313      	orrs	r3, r2
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a65      	ldr	r2, [pc, #404]	@ (8002afc <HAL_ADC_Init+0x33c>)
 8002966:	4013      	ands	r3, r2
 8002968:	0019      	movs	r1, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	0f9b      	lsrs	r3, r3, #30
 800297a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002980:	4313      	orrs	r3, r2
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	223c      	movs	r2, #60	@ 0x3c
 800298c:	5c9b      	ldrb	r3, [r3, r2]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d111      	bne.n	80029b6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0f9b      	lsrs	r3, r3, #30
 8002998:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800299e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80029a4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80029aa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	2201      	movs	r2, #1
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4a50      	ldr	r2, [pc, #320]	@ (8002b00 <HAL_ADC_Init+0x340>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	23c0      	movs	r3, #192	@ 0xc0
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d018      	beq.n	8002a0a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	05db      	lsls	r3, r3, #23
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d012      	beq.n	8002a0a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	061b      	lsls	r3, r3, #24
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d00c      	beq.n	8002a0a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80029f0:	4b44      	ldr	r3, [pc, #272]	@ (8002b04 <HAL_ADC_Init+0x344>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a44      	ldr	r2, [pc, #272]	@ (8002b08 <HAL_ADC_Init+0x348>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	23f0      	movs	r3, #240	@ 0xf0
 8002a00:	039b      	lsls	r3, r3, #14
 8002a02:	401a      	ands	r2, r3
 8002a04:	4b3f      	ldr	r3, [pc, #252]	@ (8002b04 <HAL_ADC_Init+0x344>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f7ff fd9c 	bl	8002552 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a22:	493a      	ldr	r1, [pc, #232]	@ (8002b0c <HAL_ADC_Init+0x34c>)
 8002a24:	001a      	movs	r2, r3
 8002a26:	f7ff fd94 	bl	8002552 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2110      	movs	r1, #16
 8002a3e:	4249      	negs	r1, r1
 8002a40:	430a      	orrs	r2, r1
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a44:	e018      	b.n	8002a78 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	039b      	lsls	r3, r3, #14
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d112      	bne.n	8002a78 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	221c      	movs	r2, #28
 8002a62:	4013      	ands	r3, r2
 8002a64:	2210      	movs	r2, #16
 8002a66:	4252      	negs	r2, r2
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7ff fd84 	bl	800258c <LL_ADC_GetSamplingTimeCommonChannels>
 8002a84:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	2203      	movs	r2, #3
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002aa4:	e01c      	b.n	8002ae0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	2212      	movs	r2, #18
 8002aac:	4393      	bics	r3, r2
 8002aae:	2210      	movs	r2, #16
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	2201      	movs	r2, #1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002ac2:	231f      	movs	r3, #31
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002aca:	e009      	b.n	8002ae0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ad8:	231f      	movs	r3, #31
 8002ada:	18fb      	adds	r3, r7, r3
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002ae0:	231f      	movs	r3, #31
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	781b      	ldrb	r3, [r3, #0]
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b008      	add	sp, #32
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	20000808 	.word	0x20000808
 8002af4:	00030d40 	.word	0x00030d40
 8002af8:	fffffefd 	.word	0xfffffefd
 8002afc:	ffde0201 	.word	0xffde0201
 8002b00:	1ffffc02 	.word	0x1ffffc02
 8002b04:	40012708 	.word	0x40012708
 8002b08:	ffc3ffff 	.word	0xffc3ffff
 8002b0c:	07ffff04 	.word	0x07ffff04

08002b10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b10:	b5b0      	push	{r4, r5, r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff fe3b 	bl	800279c <LL_ADC_REG_IsConversionOngoing>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d16c      	bne.n	8002c04 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2254      	movs	r2, #84	@ 0x54
 8002b2e:	5c9b      	ldrb	r3, [r3, r2]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_Start_DMA+0x28>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e06c      	b.n	8002c12 <HAL_ADC_Start_DMA+0x102>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2254      	movs	r2, #84	@ 0x54
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d113      	bne.n	8002b74 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff fdef 	bl	8002734 <LL_ADC_IsEnabled>
 8002b56:	1e03      	subs	r3, r0, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff fdd6 	bl	8002710 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2101      	movs	r1, #1
 8002b70:	430a      	orrs	r2, r1
 8002b72:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b74:	2517      	movs	r5, #23
 8002b76:	197c      	adds	r4, r7, r5
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fa3e 	bl	8002ffc <ADC_Enable>
 8002b80:	0003      	movs	r3, r0
 8002b82:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b84:	002c      	movs	r4, r5
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d13e      	bne.n	8002c0c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	4a22      	ldr	r2, [pc, #136]	@ (8002c1c <HAL_ADC_Start_DMA+0x10c>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	0052      	lsls	r2, r2, #1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002baa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c20 <HAL_ADC_Start_DMA+0x110>)
 8002bac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <HAL_ADC_Start_DMA+0x114>)
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bba:	4a1b      	ldr	r2, [pc, #108]	@ (8002c28 <HAL_ADC_Start_DMA+0x118>)
 8002bbc:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	221c      	movs	r2, #28
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2254      	movs	r2, #84	@ 0x54
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2110      	movs	r1, #16
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3340      	adds	r3, #64	@ 0x40
 8002be8:	0019      	movs	r1, r3
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	193c      	adds	r4, r7, r4
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f000 fe72 	bl	80038d8 <HAL_DMA_Start_IT>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7ff fdbb 	bl	8002778 <LL_ADC_REG_StartConversion>
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c04:	2317      	movs	r3, #23
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2202      	movs	r2, #2
 8002c0a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002c0c:	2317      	movs	r3, #23
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	781b      	ldrb	r3, [r3, #0]
}
 8002c12:	0018      	movs	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b006      	add	sp, #24
 8002c18:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	fffff0fe 	.word	0xfffff0fe
 8002c20:	080031c5 	.word	0x080031c5
 8002c24:	0800328d 	.word	0x0800328d
 8002c28:	080032ab 	.word	0x080032ab

08002c2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c34:	46c0      	nop			@ (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b002      	add	sp, #8
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c56:	2317      	movs	r3, #23
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2254      	movs	r2, #84	@ 0x54
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x24>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e1c0      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x3a6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2254      	movs	r2, #84	@ 0x54
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff fd8d 	bl	800279c <LL_ADC_REG_IsConversionOngoing>
 8002c82:	1e03      	subs	r3, r0, #0
 8002c84:	d000      	beq.n	8002c88 <HAL_ADC_ConfigChannel+0x3c>
 8002c86:	e1a3      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d100      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x46>
 8002c90:	e143      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d004      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ca2:	4ac1      	ldr	r2, [pc, #772]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x35c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d108      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	0010      	movs	r0, r2
 8002cb4:	f7ff fcb2 	bl	800261c <LL_ADC_REG_SetSequencerChAdd>
 8002cb8:	e0c9      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	211f      	movs	r1, #31
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	4099      	lsls	r1, r3
 8002cca:	000b      	movs	r3, r1
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	0019      	movs	r1, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	035b      	lsls	r3, r3, #13
 8002cd8:	0b5b      	lsrs	r3, r3, #13
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x9c>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	0e9b      	lsrs	r3, r3, #26
 8002ce2:	221f      	movs	r2, #31
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	e098      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d000      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0xa8>
 8002cf2:	e091      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x1cc>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d000      	beq.n	8002d00 <HAL_ADC_ConfigChannel+0xb4>
 8002cfe:	e089      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x1c8>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2204      	movs	r2, #4
 8002d06:	4013      	ands	r3, r2
 8002d08:	d000      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0xc0>
 8002d0a:	e081      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1c4>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2208      	movs	r2, #8
 8002d12:	4013      	ands	r3, r2
 8002d14:	d000      	beq.n	8002d18 <HAL_ADC_ConfigChannel+0xcc>
 8002d16:	e079      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x1c0>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d000      	beq.n	8002d24 <HAL_ADC_ConfigChannel+0xd8>
 8002d22:	e071      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x1bc>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d000      	beq.n	8002d30 <HAL_ADC_ConfigChannel+0xe4>
 8002d2e:	e069      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x1b8>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2240      	movs	r2, #64	@ 0x40
 8002d36:	4013      	ands	r3, r2
 8002d38:	d000      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0xf0>
 8002d3a:	e061      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x1b4>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2280      	movs	r2, #128	@ 0x80
 8002d42:	4013      	ands	r3, r2
 8002d44:	d000      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0xfc>
 8002d46:	e059      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x1b0>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d151      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x1ac>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	2380      	movs	r3, #128	@ 0x80
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d149      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1a8>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d141      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1a4>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	4013      	ands	r3, r2
 8002d76:	d139      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x1a0>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	@ 0x80
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	4013      	ands	r3, r2
 8002d82:	d131      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x19c>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d129      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x198>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	01db      	lsls	r3, r3, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d121      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x194>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4013      	ands	r3, r2
 8002da6:	d119      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x190>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	025b      	lsls	r3, r3, #9
 8002db0:	4013      	ands	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x18c>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	029b      	lsls	r3, r3, #10
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d109      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x188>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	02db      	lsls	r3, r3, #11
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d001      	beq.n	8002dd0 <HAL_ADC_ConfigChannel+0x184>
 8002dcc:	2312      	movs	r3, #18
 8002dce:	e024      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e022      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002dd4:	2311      	movs	r3, #17
 8002dd6:	e020      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	e01e      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ddc:	230f      	movs	r3, #15
 8002dde:	e01c      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002de0:	230e      	movs	r3, #14
 8002de2:	e01a      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002de4:	230d      	movs	r3, #13
 8002de6:	e018      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002de8:	230c      	movs	r3, #12
 8002dea:	e016      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002dec:	230b      	movs	r3, #11
 8002dee:	e014      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002df0:	230a      	movs	r3, #10
 8002df2:	e012      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002df4:	2309      	movs	r3, #9
 8002df6:	e010      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002df8:	2308      	movs	r3, #8
 8002dfa:	e00e      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	e00c      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002e00:	2306      	movs	r3, #6
 8002e02:	e00a      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002e04:	2305      	movs	r3, #5
 8002e06:	e008      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e006      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e004      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e002      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1ce>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	6852      	ldr	r2, [r2, #4]
 8002e1e:	201f      	movs	r0, #31
 8002e20:	4002      	ands	r2, r0
 8002e22:	4093      	lsls	r3, r2
 8002e24:	000a      	movs	r2, r1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d808      	bhi.n	8002e4e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	f7ff fbc7 	bl	80025dc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	001a      	movs	r2, r3
 8002e5c:	f7ff fc02 	bl	8002664 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db00      	blt.n	8002e6a <HAL_ADC_ConfigChannel+0x21e>
 8002e68:	e0bc      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e6a:	4b50      	ldr	r3, [pc, #320]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7ff fb63 	bl	8002538 <LL_ADC_GetCommonPathInternalCh>
 8002e72:	0003      	movs	r3, r0
 8002e74:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x364>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d122      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e88:	d11d      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2280      	movs	r2, #128	@ 0x80
 8002e8e:	0412      	lsls	r2, r2, #16
 8002e90:	4313      	orrs	r3, r2
 8002e92:	4a46      	ldr	r2, [pc, #280]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002e94:	0019      	movs	r1, r3
 8002e96:	0010      	movs	r0, r2
 8002e98:	f7ff fb3a 	bl	8002510 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e9c:	4b45      	ldr	r3, [pc, #276]	@ (8002fb4 <HAL_ADC_ConfigChannel+0x368>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4945      	ldr	r1, [pc, #276]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x36c>)
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f7fd f938 	bl	8000118 <__udivsi3>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	0013      	movs	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	189b      	adds	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eb6:	e002      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ec4:	e08e      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3c      	ldr	r2, [pc, #240]	@ (8002fbc <HAL_ADC_ConfigChannel+0x370>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10e      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	045b      	lsls	r3, r3, #17
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d109      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2280      	movs	r2, #128	@ 0x80
 8002ede:	0452      	lsls	r2, r2, #17
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4a32      	ldr	r2, [pc, #200]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	f7ff fb12 	bl	8002510 <LL_ADC_SetCommonPathInternalCh>
 8002eec:	e07a      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a33      	ldr	r2, [pc, #204]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x374>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d000      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x2ae>
 8002ef8:	e074      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	03db      	lsls	r3, r3, #15
 8002f00:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f02:	d000      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x2ba>
 8002f04:	e06e      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2280      	movs	r2, #128	@ 0x80
 8002f0a:	03d2      	lsls	r2, r2, #15
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	4a27      	ldr	r2, [pc, #156]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002f10:	0019      	movs	r1, r3
 8002f12:	0010      	movs	r0, r2
 8002f14:	f7ff fafc 	bl	8002510 <LL_ADC_SetCommonPathInternalCh>
 8002f18:	e064      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa8 <HAL_ADC_ConfigChannel+0x35c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d107      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0019      	movs	r1, r3
 8002f3a:	0010      	movs	r0, r2
 8002f3c:	f7ff fb7f 	bl	800263e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da4d      	bge.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f48:	4b18      	ldr	r3, [pc, #96]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f7ff faf4 	bl	8002538 <LL_ADC_GetCommonPathInternalCh>
 8002f50:	0003      	movs	r3, r0
 8002f52:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a15      	ldr	r2, [pc, #84]	@ (8002fb0 <HAL_ADC_ConfigChannel+0x364>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x378>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	4a11      	ldr	r2, [pc, #68]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002f66:	0019      	movs	r1, r3
 8002f68:	0010      	movs	r0, r2
 8002f6a:	f7ff fad1 	bl	8002510 <LL_ADC_SetCommonPathInternalCh>
 8002f6e:	e039      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_ADC_ConfigChannel+0x370>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x37c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f7ff fac3 	bl	8002510 <LL_ADC_SetCommonPathInternalCh>
 8002f8a:	e02b      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x374>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d126      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4a0c      	ldr	r2, [pc, #48]	@ (8002fcc <HAL_ADC_ConfigChannel+0x380>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	4a03      	ldr	r2, [pc, #12]	@ (8002fac <HAL_ADC_ConfigChannel+0x360>)
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	0010      	movs	r0, r2
 8002fa2:	f7ff fab5 	bl	8002510 <LL_ADC_SetCommonPathInternalCh>
 8002fa6:	e01d      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x398>
 8002fa8:	80000004 	.word	0x80000004
 8002fac:	40012708 	.word	0x40012708
 8002fb0:	b0001000 	.word	0xb0001000
 8002fb4:	20000808 	.word	0x20000808
 8002fb8:	00030d40 	.word	0x00030d40
 8002fbc:	b8004000 	.word	0xb8004000
 8002fc0:	b4002000 	.word	0xb4002000
 8002fc4:	ff7fffff 	.word	0xff7fffff
 8002fc8:	feffffff 	.word	0xfeffffff
 8002fcc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fdc:	2317      	movs	r3, #23
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2254      	movs	r2, #84	@ 0x54
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002fec:	2317      	movs	r3, #23
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)

08002ffc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff fb91 	bl	8002734 <LL_ADC_IsEnabled>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d000      	beq.n	8003018 <ADC_Enable+0x1c>
 8003016:	e069      	b.n	80030ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4a36      	ldr	r2, [pc, #216]	@ (80030f8 <ADC_Enable+0xfc>)
 8003020:	4013      	ands	r3, r2
 8003022:	d00d      	beq.n	8003040 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003028:	2210      	movs	r2, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003034:	2201      	movs	r2, #1
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e056      	b.n	80030ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff fb51 	bl	80026ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800304a:	4b2c      	ldr	r3, [pc, #176]	@ (80030fc <ADC_Enable+0x100>)
 800304c:	0018      	movs	r0, r3
 800304e:	f7ff fa73 	bl	8002538 <LL_ADC_GetCommonPathInternalCh>
 8003052:	0002      	movs	r2, r0
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	4013      	ands	r3, r2
 800305a:	d00f      	beq.n	800307c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800305c:	4b28      	ldr	r3, [pc, #160]	@ (8003100 <ADC_Enable+0x104>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4928      	ldr	r1, [pc, #160]	@ (8003104 <ADC_Enable+0x108>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd f858 	bl	8000118 <__udivsi3>
 8003068:	0003      	movs	r3, r0
 800306a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800306c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800306e:	e002      	b.n	8003076 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	3b01      	subs	r3, #1
 8003074:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f9      	bne.n	8003070 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7e5b      	ldrb	r3, [r3, #25]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d033      	beq.n	80030ec <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003084:	f7ff fa3a 	bl	80024fc <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800308c:	e027      	b.n	80030de <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	0018      	movs	r0, r3
 8003094:	f7ff fb4e 	bl	8002734 <LL_ADC_IsEnabled>
 8003098:	1e03      	subs	r3, r0, #0
 800309a:	d104      	bne.n	80030a6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff fb23 	bl	80026ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030a6:	f7ff fa29 	bl	80024fc <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d914      	bls.n	80030de <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d00d      	beq.n	80030de <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	2210      	movs	r2, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	2201      	movs	r2, #1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e007      	b.n	80030ee <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d1d0      	bne.n	800308e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	80000017 	.word	0x80000017
 80030fc:	40012708 	.word	0x40012708
 8003100:	20000808 	.word	0x20000808
 8003104:	00030d40 	.word	0x00030d40

08003108 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff fb1e 	bl	8002756 <LL_ADC_IsDisableOngoing>
 800311a:	0003      	movs	r3, r0
 800311c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff fb06 	bl	8002734 <LL_ADC_IsEnabled>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d046      	beq.n	80031ba <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d143      	bne.n	80031ba <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2205      	movs	r2, #5
 800313a:	4013      	ands	r3, r2
 800313c:	2b01      	cmp	r3, #1
 800313e:	d10d      	bne.n	800315c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff fae3 	bl	8002710 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2203      	movs	r2, #3
 8003150:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003152:	f7ff f9d3 	bl	80024fc <HAL_GetTick>
 8003156:	0003      	movs	r3, r0
 8003158:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800315a:	e028      	b.n	80031ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003160:	2210      	movs	r2, #16
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	2201      	movs	r2, #1
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e021      	b.n	80031bc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003178:	f7ff f9c0 	bl	80024fc <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d913      	bls.n	80031ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d00d      	beq.n	80031ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	2210      	movs	r2, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a2:	2201      	movs	r2, #1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e006      	b.n	80031bc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2201      	movs	r2, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	d1de      	bne.n	8003178 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b004      	add	sp, #16
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	2250      	movs	r2, #80	@ 0x50
 80031d8:	4013      	ands	r3, r2
 80031da:	d141      	bne.n	8003260 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	2280      	movs	r2, #128	@ 0x80
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff f9e3 	bl	80025ba <LL_ADC_REG_IsTriggerSourceSWStart>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d02e      	beq.n	8003256 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	7e9b      	ldrb	r3, [r3, #26]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d12a      	bne.n	8003256 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2208      	movs	r2, #8
 8003208:	4013      	ands	r3, r2
 800320a:	2b08      	cmp	r3, #8
 800320c:	d123      	bne.n	8003256 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	0018      	movs	r0, r3
 8003214:	f7ff fac2 	bl	800279c <LL_ADC_REG_IsConversionOngoing>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d110      	bne.n	800323e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	210c      	movs	r1, #12
 8003228:	438a      	bics	r2, r1
 800322a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <ADC_DMAConvCplt+0xc4>)
 8003232:	4013      	ands	r3, r2
 8003234:	2201      	movs	r2, #1
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	659a      	str	r2, [r3, #88]	@ 0x58
 800323c:	e00b      	b.n	8003256 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003242:	2220      	movs	r2, #32
 8003244:	431a      	orrs	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800324e:	2201      	movs	r2, #1
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0018      	movs	r0, r3
 800325a:	f7fe fe45 	bl	8001ee8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800325e:	e00f      	b.n	8003280 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	2210      	movs	r2, #16
 8003266:	4013      	ands	r3, r2
 8003268:	d004      	beq.n	8003274 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff fce5 	bl	8002c3c <HAL_ADC_ErrorCallback>
}
 8003272:	e005      	b.n	8003280 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	0010      	movs	r0, r2
 800327e:	4798      	blx	r3
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b004      	add	sp, #16
 8003286:	bd80      	pop	{r7, pc}
 8003288:	fffffefe 	.word	0xfffffefe

0800328c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003298:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	0018      	movs	r0, r3
 800329e:	f7ff fcc5 	bl	8002c2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b004      	add	sp, #16
 80032a8:	bd80      	pop	{r7, pc}

080032aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032bc:	2240      	movs	r2, #64	@ 0x40
 80032be:	431a      	orrs	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c8:	2204      	movs	r2, #4
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7ff fcb2 	bl	8002c3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b004      	add	sp, #16
 80032de:	bd80      	pop	{r7, pc}

080032e0 <LL_ADC_GetCommonClock>:
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	23f0      	movs	r3, #240	@ 0xf0
 80032ee:	039b      	lsls	r3, r3, #14
 80032f0:	4013      	ands	r3, r2
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b002      	add	sp, #8
 80032f8:	bd80      	pop	{r7, pc}

080032fa <LL_ADC_GetClock>:
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	0f9b      	lsrs	r3, r3, #30
 8003308:	079b      	lsls	r3, r3, #30
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b002      	add	sp, #8
 8003310:	bd80      	pop	{r7, pc}

08003312 <LL_ADC_SetCalibrationFactor>:
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	22b4      	movs	r2, #180	@ 0xb4
 8003320:	589b      	ldr	r3, [r3, r2]
 8003322:	227f      	movs	r2, #127	@ 0x7f
 8003324:	4393      	bics	r3, r2
 8003326:	001a      	movs	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	21b4      	movs	r1, #180	@ 0xb4
 8003330:	505a      	str	r2, [r3, r1]
}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}

0800333a <LL_ADC_GetCalibrationFactor>:
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	22b4      	movs	r2, #180	@ 0xb4
 8003346:	589b      	ldr	r3, [r3, r2]
 8003348:	227f      	movs	r2, #127	@ 0x7f
 800334a:	4013      	ands	r3, r2
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <LL_ADC_Enable>:
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <LL_ADC_Enable+0x20>)
 8003362:	4013      	ands	r3, r2
 8003364:	2201      	movs	r2, #1
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}
 8003374:	7fffffe8 	.word	0x7fffffe8

08003378 <LL_ADC_Disable>:
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <LL_ADC_Disable+0x20>)
 8003386:	4013      	ands	r3, r2
 8003388:	2202      	movs	r2, #2
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
}
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}
 8003398:	7fffffe8 	.word	0x7fffffe8

0800339c <LL_ADC_IsEnabled>:
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <LL_ADC_IsEnabled+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_ADC_IsEnabled+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <LL_ADC_StartCalibration>:
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a05      	ldr	r2, [pc, #20]	@ (80033e4 <LL_ADC_StartCalibration+0x24>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	2280      	movs	r2, #128	@ 0x80
 80033d2:	0612      	lsls	r2, r2, #24
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b002      	add	sp, #8
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	7fffffe8 	.word	0x7fffffe8

080033e8 <LL_ADC_IsCalibrationOnGoing>:
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	0fdb      	lsrs	r3, r3, #31
 80033f6:	07da      	lsls	r2, r3, #31
 80033f8:	2380      	movs	r3, #128	@ 0x80
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d101      	bne.n	8003404 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003404:	2300      	movs	r3, #0
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b002      	add	sp, #8
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b08b      	sub	sp, #44	@ 0x2c
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2254      	movs	r2, #84	@ 0x54
 8003424:	5c9b      	ldrb	r3, [r3, r2]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_ADCEx_Calibration_Start+0x1e>
 800342a:	2302      	movs	r3, #2
 800342c:	e0dd      	b.n	80035ea <HAL_ADCEx_Calibration_Start+0x1da>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2254      	movs	r2, #84	@ 0x54
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003436:	231f      	movs	r3, #31
 8003438:	18fc      	adds	r4, r7, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fe63 	bl	8003108 <ADC_Disable>
 8003442:	0003      	movs	r3, r0
 8003444:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff ffa6 	bl	800339c <LL_ADC_IsEnabled>
 8003450:	1e03      	subs	r3, r0, #0
 8003452:	d000      	beq.n	8003456 <HAL_ADCEx_Calibration_Start+0x46>
 8003454:	e0bc      	b.n	80035d0 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	4a66      	ldr	r2, [pc, #408]	@ (80035f4 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800345c:	4013      	ands	r3, r2
 800345e:	2202      	movs	r2, #2
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a62      	ldr	r2, [pc, #392]	@ (80035f8 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	495f      	ldr	r1, [pc, #380]	@ (80035fc <HAL_ADCEx_Calibration_Start+0x1ec>)
 800347e:	400a      	ands	r2, r1
 8003480:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
 8003486:	e02d      	b.n	80034e4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff ff97 	bl	80033c0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003492:	e014      	b.n	80034be <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a58      	ldr	r2, [pc, #352]	@ (8003600 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d90d      	bls.n	80034be <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a6:	2212      	movs	r2, #18
 80034a8:	4393      	bics	r3, r2
 80034aa:	2210      	movs	r2, #16
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2254      	movs	r2, #84	@ 0x54
 80034b6:	2100      	movs	r1, #0
 80034b8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e095      	b.n	80035ea <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff ff90 	bl	80033e8 <LL_ADC_IsCalibrationOnGoing>
 80034c8:	1e03      	subs	r3, r0, #0
 80034ca:	d1e3      	bne.n	8003494 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff ff32 	bl	800333a <LL_ADC_GetCalibrationFactor>
 80034d6:	0002      	movs	r2, r0
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	3301      	adds	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	2b07      	cmp	r3, #7
 80034e8:	d9ce      	bls.n	8003488 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80034ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034ec:	6a38      	ldr	r0, [r7, #32]
 80034ee:	f7fc fe13 	bl	8000118 <__udivsi3>
 80034f2:	0003      	movs	r3, r0
 80034f4:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff ff2a 	bl	8003354 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff fef8 	bl	80032fa <LL_ADC_GetClock>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d11b      	bne.n	8003546 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800350e:	4b3d      	ldr	r3, [pc, #244]	@ (8003604 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff fee5 	bl	80032e0 <LL_ADC_GetCommonClock>
 8003516:	0003      	movs	r3, r0
 8003518:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	23e0      	movs	r3, #224	@ 0xe0
 800351e:	035b      	lsls	r3, r3, #13
 8003520:	429a      	cmp	r2, r3
 8003522:	d310      	bcc.n	8003546 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	0c9b      	lsrs	r3, r3, #18
 8003528:	3b03      	subs	r3, #3
 800352a:	2201      	movs	r2, #1
 800352c:	409a      	lsls	r2, r3
 800352e:	0013      	movs	r3, r2
 8003530:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8003538:	e002      	b.n	8003540 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3b01      	subs	r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f9      	bne.n	800353a <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a3a      	ldr	r2, [r7, #32]
 800354c:	0011      	movs	r1, r2
 800354e:	0018      	movs	r0, r3
 8003550:	f7ff fedf 	bl	8003312 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff ff0d 	bl	8003378 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800355e:	f7fe ffcd 	bl	80024fc <HAL_GetTick>
 8003562:	0003      	movs	r3, r0
 8003564:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003566:	e01b      	b.n	80035a0 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003568:	f7fe ffc8 	bl	80024fc <HAL_GetTick>
 800356c:	0002      	movs	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d914      	bls.n	80035a0 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff ff0e 	bl	800339c <LL_ADC_IsEnabled>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	2210      	movs	r2, #16
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	2201      	movs	r2, #1
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e024      	b.n	80035ea <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fef9 	bl	800339c <LL_ADC_IsEnabled>
 80035aa:	1e03      	subs	r3, r0, #0
 80035ac:	d1dc      	bne.n	8003568 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68d9      	ldr	r1, [r3, #12]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	2203      	movs	r2, #3
 80035c4:	4393      	bics	r3, r2
 80035c6:	2201      	movs	r2, #1
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80035ce:	e005      	b.n	80035dc <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d4:	2210      	movs	r2, #16
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2254      	movs	r2, #84	@ 0x54
 80035e0:	2100      	movs	r1, #0
 80035e2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80035e4:	231f      	movs	r3, #31
 80035e6:	18fb      	adds	r3, r7, r3
 80035e8:	781b      	ldrb	r3, [r3, #0]
}
 80035ea:	0018      	movs	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b00b      	add	sp, #44	@ 0x2c
 80035f0:	bd90      	pop	{r4, r7, pc}
 80035f2:	46c0      	nop			@ (mov r8, r8)
 80035f4:	fffffefd 	.word	0xfffffefd
 80035f8:	00008003 	.word	0x00008003
 80035fc:	ffff7ffc 	.word	0xffff7ffc
 8003600:	0002f1ff 	.word	0x0002f1ff
 8003604:	40012708 	.word	0x40012708

08003608 <__NVIC_EnableIRQ>:
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	0002      	movs	r2, r0
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b7f      	cmp	r3, #127	@ 0x7f
 800361a:	d809      	bhi.n	8003630 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	001a      	movs	r2, r3
 8003622:	231f      	movs	r3, #31
 8003624:	401a      	ands	r2, r3
 8003626:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <__NVIC_EnableIRQ+0x30>)
 8003628:	2101      	movs	r1, #1
 800362a:	4091      	lsls	r1, r2
 800362c:	000a      	movs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}
 8003638:	e000e100 	.word	0xe000e100

0800363c <__NVIC_SetPriority>:
{
 800363c:	b590      	push	{r4, r7, lr}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	0002      	movs	r2, r0
 8003644:	6039      	str	r1, [r7, #0]
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003650:	d828      	bhi.n	80036a4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003652:	4a2f      	ldr	r2, [pc, #188]	@ (8003710 <__NVIC_SetPriority+0xd4>)
 8003654:	1dfb      	adds	r3, r7, #7
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b25b      	sxtb	r3, r3
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	33c0      	adds	r3, #192	@ 0xc0
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	589b      	ldr	r3, [r3, r2]
 8003662:	1dfa      	adds	r2, r7, #7
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	0011      	movs	r1, r2
 8003668:	2203      	movs	r2, #3
 800366a:	400a      	ands	r2, r1
 800366c:	00d2      	lsls	r2, r2, #3
 800366e:	21ff      	movs	r1, #255	@ 0xff
 8003670:	4091      	lsls	r1, r2
 8003672:	000a      	movs	r2, r1
 8003674:	43d2      	mvns	r2, r2
 8003676:	401a      	ands	r2, r3
 8003678:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	22ff      	movs	r2, #255	@ 0xff
 8003680:	401a      	ands	r2, r3
 8003682:	1dfb      	adds	r3, r7, #7
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	0018      	movs	r0, r3
 8003688:	2303      	movs	r3, #3
 800368a:	4003      	ands	r3, r0
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003690:	481f      	ldr	r0, [pc, #124]	@ (8003710 <__NVIC_SetPriority+0xd4>)
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	b25b      	sxtb	r3, r3
 8003698:	089b      	lsrs	r3, r3, #2
 800369a:	430a      	orrs	r2, r1
 800369c:	33c0      	adds	r3, #192	@ 0xc0
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	501a      	str	r2, [r3, r0]
}
 80036a2:	e031      	b.n	8003708 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003714 <__NVIC_SetPriority+0xd8>)
 80036a6:	1dfb      	adds	r3, r7, #7
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	0019      	movs	r1, r3
 80036ac:	230f      	movs	r3, #15
 80036ae:	400b      	ands	r3, r1
 80036b0:	3b08      	subs	r3, #8
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	3306      	adds	r3, #6
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	18d3      	adds	r3, r2, r3
 80036ba:	3304      	adds	r3, #4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	1dfa      	adds	r2, r7, #7
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	0011      	movs	r1, r2
 80036c4:	2203      	movs	r2, #3
 80036c6:	400a      	ands	r2, r1
 80036c8:	00d2      	lsls	r2, r2, #3
 80036ca:	21ff      	movs	r1, #255	@ 0xff
 80036cc:	4091      	lsls	r1, r2
 80036ce:	000a      	movs	r2, r1
 80036d0:	43d2      	mvns	r2, r2
 80036d2:	401a      	ands	r2, r3
 80036d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	019b      	lsls	r3, r3, #6
 80036da:	22ff      	movs	r2, #255	@ 0xff
 80036dc:	401a      	ands	r2, r3
 80036de:	1dfb      	adds	r3, r7, #7
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	0018      	movs	r0, r3
 80036e4:	2303      	movs	r3, #3
 80036e6:	4003      	ands	r3, r0
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036ec:	4809      	ldr	r0, [pc, #36]	@ (8003714 <__NVIC_SetPriority+0xd8>)
 80036ee:	1dfb      	adds	r3, r7, #7
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	001c      	movs	r4, r3
 80036f4:	230f      	movs	r3, #15
 80036f6:	4023      	ands	r3, r4
 80036f8:	3b08      	subs	r3, #8
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	430a      	orrs	r2, r1
 80036fe:	3306      	adds	r3, #6
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	18c3      	adds	r3, r0, r3
 8003704:	3304      	adds	r3, #4
 8003706:	601a      	str	r2, [r3, #0]
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b003      	add	sp, #12
 800370e:	bd90      	pop	{r4, r7, pc}
 8003710:	e000e100 	.word	0xe000e100
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	1e5a      	subs	r2, r3, #1
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	045b      	lsls	r3, r3, #17
 8003728:	429a      	cmp	r2, r3
 800372a:	d301      	bcc.n	8003730 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372c:	2301      	movs	r3, #1
 800372e:	e010      	b.n	8003752 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <SysTick_Config+0x44>)
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	3a01      	subs	r2, #1
 8003736:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003738:	2301      	movs	r3, #1
 800373a:	425b      	negs	r3, r3
 800373c:	2103      	movs	r1, #3
 800373e:	0018      	movs	r0, r3
 8003740:	f7ff ff7c 	bl	800363c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <SysTick_Config+0x44>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374a:	4b04      	ldr	r3, [pc, #16]	@ (800375c <SysTick_Config+0x44>)
 800374c:	2207      	movs	r2, #7
 800374e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003750:	2300      	movs	r3, #0
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	e000e010 	.word	0xe000e010

08003760 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	210f      	movs	r1, #15
 800376c:	187b      	adds	r3, r7, r1
 800376e:	1c02      	adds	r2, r0, #0
 8003770:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	187b      	adds	r3, r7, r1
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b25b      	sxtb	r3, r3
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f7ff ff5d 	bl	800363c <__NVIC_SetPriority>
}
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b004      	add	sp, #16
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	0002      	movs	r2, r0
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003796:	1dfb      	adds	r3, r7, #7
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b25b      	sxtb	r3, r3
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff33 	bl	8003608 <__NVIC_EnableIRQ>
}
 80037a2:	46c0      	nop			@ (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b002      	add	sp, #8
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7ff ffaf 	bl	8003718 <SysTick_Config>
 80037ba:	0003      	movs	r3, r0
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e077      	b.n	80038c6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a3d      	ldr	r2, [pc, #244]	@ (80038d0 <HAL_DMA_Init+0x10c>)
 80037dc:	4694      	mov	ip, r2
 80037de:	4463      	add	r3, ip
 80037e0:	2114      	movs	r1, #20
 80037e2:	0018      	movs	r0, r3
 80037e4:	f7fc fc98 	bl	8000118 <__udivsi3>
 80037e8:	0003      	movs	r3, r0
 80037ea:	009a      	lsls	r2, r3, #2
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2225      	movs	r2, #37	@ 0x25
 80037f4:	2102      	movs	r1, #2
 80037f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4934      	ldr	r1, [pc, #208]	@ (80038d4 <HAL_DMA_Init+0x110>)
 8003804:	400a      	ands	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f9c1 	bl	8003bc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	2380      	movs	r3, #128	@ 0x80
 800384c:	01db      	lsls	r3, r3, #7
 800384e:	429a      	cmp	r2, r3
 8003850:	d102      	bne.n	8003858 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003860:	213f      	movs	r1, #63	@ 0x3f
 8003862:	400a      	ands	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800386e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_DMA_Init+0xd8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d80d      	bhi.n	800389c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 f9cc 	bl	8003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	e008      	b.n	80038ae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2225      	movs	r2, #37	@ 0x25
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	@ 0x24
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	bffdfff8 	.word	0xbffdfff8
 80038d4:	ffff800f 	.word	0xffff800f

080038d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e6:	2317      	movs	r3, #23
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2224      	movs	r2, #36	@ 0x24
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_DMA_Start_IT+0x24>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e06f      	b.n	80039dc <HAL_DMA_Start_IT+0x104>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2224      	movs	r2, #36	@ 0x24
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2225      	movs	r2, #37	@ 0x25
 8003908:	5c9b      	ldrb	r3, [r3, r2]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d157      	bne.n	80039c0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2225      	movs	r2, #37	@ 0x25
 8003914:	2102      	movs	r1, #2
 8003916:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	438a      	bics	r2, r1
 800392c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68b9      	ldr	r1, [r7, #8]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f907 	bl	8003b48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	210e      	movs	r1, #14
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e00f      	b.n	8003974 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2104      	movs	r1, #4
 8003960:	438a      	bics	r2, r1
 8003962:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	210a      	movs	r1, #10
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	4013      	ands	r3, r2
 8003980:	d008      	beq.n	8003994 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398c:	2180      	movs	r1, #128	@ 0x80
 800398e:	0049      	lsls	r1, r1, #1
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a6:	2180      	movs	r1, #128	@ 0x80
 80039a8:	0049      	lsls	r1, r1, #1
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e00a      	b.n	80039d6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2280      	movs	r2, #128	@ 0x80
 80039c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2224      	movs	r2, #36	@ 0x24
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80039ce:	2317      	movs	r3, #23
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80039d6:	2317      	movs	r3, #23
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	781b      	ldrb	r3, [r3, #0]
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b006      	add	sp, #24
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80039ec:	4b55      	ldr	r3, [pc, #340]	@ (8003b44 <HAL_DMA_IRQHandler+0x160>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	221c      	movs	r2, #28
 8003a00:	4013      	ands	r3, r2
 8003a02:	2204      	movs	r2, #4
 8003a04:	409a      	lsls	r2, r3
 8003a06:	0013      	movs	r3, r2
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d027      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x7a>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2204      	movs	r2, #4
 8003a12:	4013      	ands	r3, r2
 8003a14:	d023      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d107      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2104      	movs	r1, #4
 8003a2e:	438a      	bics	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003a32:	4b44      	ldr	r3, [pc, #272]	@ (8003b44 <HAL_DMA_IRQHandler+0x160>)
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	221c      	movs	r2, #28
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2204      	movs	r2, #4
 8003a40:	409a      	lsls	r2, r3
 8003a42:	4b40      	ldr	r3, [pc, #256]	@ (8003b44 <HAL_DMA_IRQHandler+0x160>)
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d100      	bne.n	8003a52 <HAL_DMA_IRQHandler+0x6e>
 8003a50:	e073      	b.n	8003b3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	0010      	movs	r0, r2
 8003a5a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003a5c:	e06d      	b.n	8003b3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	221c      	movs	r2, #28
 8003a64:	4013      	ands	r3, r2
 8003a66:	2202      	movs	r2, #2
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d02e      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0xec>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2202      	movs	r2, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	d02a      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2220      	movs	r2, #32
 8003a82:	4013      	ands	r3, r2
 8003a84:	d10b      	bne.n	8003a9e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	210a      	movs	r1, #10
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2225      	movs	r2, #37	@ 0x25
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a9e:	4b29      	ldr	r3, [pc, #164]	@ (8003b44 <HAL_DMA_IRQHandler+0x160>)
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	221c      	movs	r2, #28
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2202      	movs	r2, #2
 8003aac:	409a      	lsls	r2, r3
 8003aae:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_DMA_IRQHandler+0x160>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	@ 0x24
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d03a      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	0010      	movs	r0, r2
 8003acc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003ace:	e034      	b.n	8003b3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	221c      	movs	r2, #28
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2208      	movs	r2, #8
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d02b      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x158>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2208      	movs	r2, #8
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d027      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	210e      	movs	r1, #14
 8003af8:	438a      	bics	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <HAL_DMA_IRQHandler+0x160>)
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	221c      	movs	r2, #28
 8003b06:	4013      	ands	r3, r2
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <HAL_DMA_IRQHandler+0x160>)
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2225      	movs	r2, #37	@ 0x25
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	@ 0x24
 8003b24:	2100      	movs	r1, #0
 8003b26:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	0010      	movs	r0, r2
 8003b38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46c0      	nop			@ (mov r8, r8)
}
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b004      	add	sp, #16
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40020000 	.word	0x40020000

08003b48 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b70:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b72:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <DMA_SetConfig+0x7c>)
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	221c      	movs	r2, #28
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2201      	movs	r2, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	4b10      	ldr	r3, [pc, #64]	@ (8003bc4 <DMA_SetConfig+0x7c>)
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d108      	bne.n	8003baa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ba8:	e007      	b.n	8003bba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	60da      	str	r2, [r3, #12]
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	40020000 	.word	0x40020000

08003bc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	4a10      	ldr	r2, [pc, #64]	@ (8003c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003bd8:	4694      	mov	ip, r2
 8003bda:	4463      	add	r3, ip
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	001a      	movs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	001a      	movs	r2, r3
 8003bea:	23ff      	movs	r3, #255	@ 0xff
 8003bec:	4013      	ands	r3, r2
 8003bee:	3b08      	subs	r3, #8
 8003bf0:	2114      	movs	r1, #20
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7fc fa90 	bl	8000118 <__udivsi3>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a07      	ldr	r2, [pc, #28]	@ (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003c00:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	221f      	movs	r2, #31
 8003c06:	4013      	ands	r3, r2
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b004      	add	sp, #16
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	10008200 	.word	0x10008200
 8003c1c:	40020880 	.word	0x40020880

08003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	223f      	movs	r2, #63	@ 0x3f
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a0a      	ldr	r2, [pc, #40]	@ (8003c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c36:	4694      	mov	ip, r2
 8003c38:	4463      	add	r3, ip
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a07      	ldr	r2, [pc, #28]	@ (8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003c58:	46c0      	nop			@ (mov r8, r8)
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b004      	add	sp, #16
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	1000823f 	.word	0x1000823f
 8003c64:	40020940 	.word	0x40020940

08003c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c76:	e147      	b.n	8003f08 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4091      	lsls	r1, r2
 8003c82:	000a      	movs	r2, r1
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d100      	bne.n	8003c90 <HAL_GPIO_Init+0x28>
 8003c8e:	e138      	b.n	8003f02 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2203      	movs	r2, #3
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d005      	beq.n	8003ca8 <HAL_GPIO_Init+0x40>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d130      	bne.n	8003d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	0013      	movs	r3, r2
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	0013      	movs	r3, r2
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cde:	2201      	movs	r2, #1
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	0013      	movs	r3, r2
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	0013      	movs	r3, r2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2203      	movs	r2, #3
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d017      	beq.n	8003d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	2203      	movs	r2, #3
 8003d22:	409a      	lsls	r2, r3
 8003d24:	0013      	movs	r3, r2
 8003d26:	43da      	mvns	r2, r3
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	409a      	lsls	r2, r3
 8003d38:	0013      	movs	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d123      	bne.n	8003d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	08da      	lsrs	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3208      	adds	r2, #8
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	58d3      	ldr	r3, [r2, r3]
 8003d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2207      	movs	r2, #7
 8003d64:	4013      	ands	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	220f      	movs	r2, #15
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	0013      	movs	r3, r2
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2107      	movs	r1, #7
 8003d7e:	400b      	ands	r3, r1
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	409a      	lsls	r2, r3
 8003d84:	0013      	movs	r3, r2
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	08da      	lsrs	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3208      	adds	r2, #8
 8003d94:	0092      	lsls	r2, r2, #2
 8003d96:	6939      	ldr	r1, [r7, #16]
 8003d98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	2203      	movs	r2, #3
 8003da6:	409a      	lsls	r2, r3
 8003da8:	0013      	movs	r3, r2
 8003daa:	43da      	mvns	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2203      	movs	r2, #3
 8003db8:	401a      	ands	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	0013      	movs	r3, r2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	23c0      	movs	r3, #192	@ 0xc0
 8003dd4:	029b      	lsls	r3, r3, #10
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d100      	bne.n	8003ddc <HAL_GPIO_Init+0x174>
 8003dda:	e092      	b.n	8003f02 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ddc:	4a50      	ldr	r2, [pc, #320]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	3318      	adds	r3, #24
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	589b      	ldr	r3, [r3, r2]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2203      	movs	r2, #3
 8003dee:	4013      	ands	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	220f      	movs	r2, #15
 8003df4:	409a      	lsls	r2, r3
 8003df6:	0013      	movs	r3, r2
 8003df8:	43da      	mvns	r2, r3
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	23a0      	movs	r3, #160	@ 0xa0
 8003e04:	05db      	lsls	r3, r3, #23
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d013      	beq.n	8003e32 <HAL_GPIO_Init+0x1ca>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a45      	ldr	r2, [pc, #276]	@ (8003f24 <HAL_GPIO_Init+0x2bc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00d      	beq.n	8003e2e <HAL_GPIO_Init+0x1c6>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a44      	ldr	r2, [pc, #272]	@ (8003f28 <HAL_GPIO_Init+0x2c0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <HAL_GPIO_Init+0x1c2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a43      	ldr	r2, [pc, #268]	@ (8003f2c <HAL_GPIO_Init+0x2c4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_GPIO_Init+0x1be>
 8003e22:	2303      	movs	r3, #3
 8003e24:	e006      	b.n	8003e34 <HAL_GPIO_Init+0x1cc>
 8003e26:	2305      	movs	r3, #5
 8003e28:	e004      	b.n	8003e34 <HAL_GPIO_Init+0x1cc>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e002      	b.n	8003e34 <HAL_GPIO_Init+0x1cc>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_GPIO_Init+0x1cc>
 8003e32:	2300      	movs	r3, #0
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	2103      	movs	r1, #3
 8003e38:	400a      	ands	r2, r1
 8003e3a:	00d2      	lsls	r2, r2, #3
 8003e3c:	4093      	lsls	r3, r2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003e44:	4936      	ldr	r1, [pc, #216]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	3318      	adds	r3, #24
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e52:	4b33      	ldr	r3, [pc, #204]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	2380      	movs	r3, #128	@ 0x80
 8003e68:	035b      	lsls	r3, r3, #13
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e76:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e7c:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	43da      	mvns	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	039b      	lsls	r3, r3, #14
 8003e94:	4013      	ands	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003ea8:	2384      	movs	r3, #132	@ 0x84
 8003eaa:	58d3      	ldr	r3, [r2, r3]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	029b      	lsls	r3, r3, #10
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ecc:	4914      	ldr	r1, [pc, #80]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003ece:	2284      	movs	r2, #132	@ 0x84
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003ed4:	4a12      	ldr	r2, [pc, #72]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003ed6:	2380      	movs	r3, #128	@ 0x80
 8003ed8:	58d3      	ldr	r3, [r2, r3]
 8003eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	2380      	movs	r3, #128	@ 0x80
 8003eec:	025b      	lsls	r3, r3, #9
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003efa:	4909      	ldr	r1, [pc, #36]	@ (8003f20 <HAL_GPIO_Init+0x2b8>)
 8003efc:	2280      	movs	r2, #128	@ 0x80
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3301      	adds	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	40da      	lsrs	r2, r3
 8003f10:	1e13      	subs	r3, r2, #0
 8003f12:	d000      	beq.n	8003f16 <HAL_GPIO_Init+0x2ae>
 8003f14:	e6b0      	b.n	8003c78 <HAL_GPIO_Init+0x10>
  }
}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b006      	add	sp, #24
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021800 	.word	0x40021800
 8003f24:	50000400 	.word	0x50000400
 8003f28:	50000800 	.word	0x50000800
 8003f2c:	50000c00 	.word	0x50000c00

08003f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	0002      	movs	r2, r0
 8003f38:	1dbb      	adds	r3, r7, #6
 8003f3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003f3c:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	1dba      	adds	r2, r7, #6
 8003f42:	8812      	ldrh	r2, [r2, #0]
 8003f44:	4013      	ands	r3, r2
 8003f46:	d008      	beq.n	8003f5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003f48:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f4a:	1dba      	adds	r2, r7, #6
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003f50:	1dbb      	adds	r3, r7, #6
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7fc fcd5 	bl	8000904 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003f5a:	4b09      	ldr	r3, [pc, #36]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	1dba      	adds	r2, r7, #6
 8003f60:	8812      	ldrh	r2, [r2, #0]
 8003f62:	4013      	ands	r3, r2
 8003f64:	d008      	beq.n	8003f78 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003f66:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003f68:	1dba      	adds	r2, r7, #6
 8003f6a:	8812      	ldrh	r2, [r2, #0]
 8003f6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003f6e:	1dbb      	adds	r3, r7, #6
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7fc fc98 	bl	80008a8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003f78:	46c0      	nop			@ (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021800 	.word	0x40021800

08003f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a19      	ldr	r2, [pc, #100]	@ (8003ff8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	0019      	movs	r1, r3
 8003f96:	4b17      	ldr	r3, [pc, #92]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	2380      	movs	r3, #128	@ 0x80
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d11f      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003fa8:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	0013      	movs	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4912      	ldr	r1, [pc, #72]	@ (8004000 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fc f8ae 	bl	8000118 <__udivsi3>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc2:	e008      	b.n	8003fd6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e001      	b.n	8003fd6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e009      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd6:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	2380      	movs	r3, #128	@ 0x80
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d0ed      	beq.n	8003fc4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	fffff9ff 	.word	0xfffff9ff
 8003ffc:	20000808 	.word	0x20000808
 8004000:	000f4240 	.word	0x000f4240

08004004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e2fe      	b.n	8004614 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d100      	bne.n	8004022 <HAL_RCC_OscConfig+0x1e>
 8004020:	e07c      	b.n	800411c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004022:	4bc3      	ldr	r3, [pc, #780]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2238      	movs	r2, #56	@ 0x38
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800402c:	4bc0      	ldr	r3, [pc, #768]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2203      	movs	r2, #3
 8004032:	4013      	ands	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b10      	cmp	r3, #16
 800403a:	d102      	bne.n	8004042 <HAL_RCC_OscConfig+0x3e>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b03      	cmp	r3, #3
 8004040:	d002      	beq.n	8004048 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d10b      	bne.n	8004060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	4bb9      	ldr	r3, [pc, #740]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	029b      	lsls	r3, r3, #10
 8004050:	4013      	ands	r3, r2
 8004052:	d062      	beq.n	800411a <HAL_RCC_OscConfig+0x116>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d15e      	bne.n	800411a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e2d9      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	025b      	lsls	r3, r3, #9
 8004068:	429a      	cmp	r2, r3
 800406a:	d107      	bne.n	800407c <HAL_RCC_OscConfig+0x78>
 800406c:	4bb0      	ldr	r3, [pc, #704]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4baf      	ldr	r3, [pc, #700]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	0249      	lsls	r1, r1, #9
 8004076:	430a      	orrs	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e020      	b.n	80040be <HAL_RCC_OscConfig+0xba>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	23a0      	movs	r3, #160	@ 0xa0
 8004082:	02db      	lsls	r3, r3, #11
 8004084:	429a      	cmp	r2, r3
 8004086:	d10e      	bne.n	80040a6 <HAL_RCC_OscConfig+0xa2>
 8004088:	4ba9      	ldr	r3, [pc, #676]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4ba8      	ldr	r3, [pc, #672]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800408e:	2180      	movs	r1, #128	@ 0x80
 8004090:	02c9      	lsls	r1, r1, #11
 8004092:	430a      	orrs	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	4ba6      	ldr	r3, [pc, #664]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4ba5      	ldr	r3, [pc, #660]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800409c:	2180      	movs	r1, #128	@ 0x80
 800409e:	0249      	lsls	r1, r1, #9
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e00b      	b.n	80040be <HAL_RCC_OscConfig+0xba>
 80040a6:	4ba2      	ldr	r3, [pc, #648]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4ba1      	ldr	r3, [pc, #644]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040ac:	49a1      	ldr	r1, [pc, #644]	@ (8004334 <HAL_RCC_OscConfig+0x330>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	4b9f      	ldr	r3, [pc, #636]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b9e      	ldr	r3, [pc, #632]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040b8:	499f      	ldr	r1, [pc, #636]	@ (8004338 <HAL_RCC_OscConfig+0x334>)
 80040ba:	400a      	ands	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d014      	beq.n	80040f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fe fa19 	bl	80024fc <HAL_GetTick>
 80040ca:	0003      	movs	r3, r0
 80040cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe fa14 	bl	80024fc <HAL_GetTick>
 80040d4:	0002      	movs	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	@ 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e298      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040e2:	4b93      	ldr	r3, [pc, #588]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	029b      	lsls	r3, r3, #10
 80040ea:	4013      	ands	r3, r2
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0xcc>
 80040ee:	e015      	b.n	800411c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fe fa04 	bl	80024fc <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040fa:	f7fe f9ff 	bl	80024fc <HAL_GetTick>
 80040fe:	0002      	movs	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b64      	cmp	r3, #100	@ 0x64
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e283      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800410c:	4b88      	ldr	r3, [pc, #544]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	@ 0x80
 8004112:	029b      	lsls	r3, r3, #10
 8004114:	4013      	ands	r3, r2
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0xf6>
 8004118:	e000      	b.n	800411c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2202      	movs	r2, #2
 8004122:	4013      	ands	r3, r2
 8004124:	d100      	bne.n	8004128 <HAL_RCC_OscConfig+0x124>
 8004126:	e099      	b.n	800425c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004128:	4b81      	ldr	r3, [pc, #516]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2238      	movs	r2, #56	@ 0x38
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004132:	4b7f      	ldr	r3, [pc, #508]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2203      	movs	r2, #3
 8004138:	4013      	ands	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b10      	cmp	r3, #16
 8004140:	d102      	bne.n	8004148 <HAL_RCC_OscConfig+0x144>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d002      	beq.n	800414e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d135      	bne.n	80041ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800414e:	4b78      	ldr	r3, [pc, #480]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4013      	ands	r3, r2
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x162>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e256      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b72      	ldr	r3, [pc, #456]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a74      	ldr	r2, [pc, #464]	@ (800433c <HAL_RCC_OscConfig+0x338>)
 800416c:	4013      	ands	r3, r2
 800416e:	0019      	movs	r1, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	4b6e      	ldr	r3, [pc, #440]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004178:	430a      	orrs	r2, r1
 800417a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d112      	bne.n	80041a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004182:	4b6b      	ldr	r3, [pc, #428]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a6e      	ldr	r2, [pc, #440]	@ (8004340 <HAL_RCC_OscConfig+0x33c>)
 8004188:	4013      	ands	r3, r2
 800418a:	0019      	movs	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	4b67      	ldr	r3, [pc, #412]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004196:	4b66      	ldr	r3, [pc, #408]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	0adb      	lsrs	r3, r3, #11
 800419c:	2207      	movs	r2, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	4a68      	ldr	r2, [pc, #416]	@ (8004344 <HAL_RCC_OscConfig+0x340>)
 80041a2:	40da      	lsrs	r2, r3
 80041a4:	4b68      	ldr	r3, [pc, #416]	@ (8004348 <HAL_RCC_OscConfig+0x344>)
 80041a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a8:	4b68      	ldr	r3, [pc, #416]	@ (800434c <HAL_RCC_OscConfig+0x348>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7fe f949 	bl	8002444 <HAL_InitTick>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d051      	beq.n	800425a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e22c      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d030      	beq.n	8004224 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004340 <HAL_RCC_OscConfig+0x33c>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	0019      	movs	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	4b57      	ldr	r3, [pc, #348]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041d2:	430a      	orrs	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80041d6:	4b56      	ldr	r3, [pc, #344]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b55      	ldr	r3, [pc, #340]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80041dc:	2180      	movs	r1, #128	@ 0x80
 80041de:	0049      	lsls	r1, r1, #1
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fe f98a 	bl	80024fc <HAL_GetTick>
 80041e8:	0003      	movs	r3, r0
 80041ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fe f985 	bl	80024fc <HAL_GetTick>
 80041f2:	0002      	movs	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e209      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004200:	4b4b      	ldr	r3, [pc, #300]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4013      	ands	r3, r2
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b48      	ldr	r3, [pc, #288]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a4a      	ldr	r2, [pc, #296]	@ (800433c <HAL_RCC_OscConfig+0x338>)
 8004212:	4013      	ands	r3, r2
 8004214:	0019      	movs	r1, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	4b44      	ldr	r3, [pc, #272]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	e01b      	b.n	800425c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004224:	4b42      	ldr	r3, [pc, #264]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	4b41      	ldr	r3, [pc, #260]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800422a:	4949      	ldr	r1, [pc, #292]	@ (8004350 <HAL_RCC_OscConfig+0x34c>)
 800422c:	400a      	ands	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fe f964 	bl	80024fc <HAL_GetTick>
 8004234:	0003      	movs	r3, r0
 8004236:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423a:	f7fe f95f 	bl	80024fc <HAL_GetTick>
 800423e:	0002      	movs	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e1e3      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424c:	4b38      	ldr	r3, [pc, #224]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	@ 0x80
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4013      	ands	r3, r2
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x236>
 8004258:	e000      	b.n	800425c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	4013      	ands	r3, r2
 8004264:	d047      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004266:	4b32      	ldr	r3, [pc, #200]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2238      	movs	r2, #56	@ 0x38
 800426c:	4013      	ands	r3, r2
 800426e:	2b18      	cmp	r3, #24
 8004270:	d10a      	bne.n	8004288 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004272:	4b2f      	ldr	r3, [pc, #188]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004276:	2202      	movs	r2, #2
 8004278:	4013      	ands	r3, r2
 800427a:	d03c      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d138      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e1c5      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d019      	beq.n	80042c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004290:	4b27      	ldr	r3, [pc, #156]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004292:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004294:	4b26      	ldr	r3, [pc, #152]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004296:	2101      	movs	r1, #1
 8004298:	430a      	orrs	r2, r1
 800429a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fe f92e 	bl	80024fc <HAL_GetTick>
 80042a0:	0003      	movs	r3, r0
 80042a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a6:	f7fe f929 	bl	80024fc <HAL_GetTick>
 80042aa:	0002      	movs	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e1ad      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042bc:	2202      	movs	r2, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	d0f1      	beq.n	80042a6 <HAL_RCC_OscConfig+0x2a2>
 80042c2:	e018      	b.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80042c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	438a      	bics	r2, r1
 80042ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fe f914 	bl	80024fc <HAL_GetTick>
 80042d4:	0003      	movs	r3, r0
 80042d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042da:	f7fe f90f 	bl	80024fc <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e193      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042ec:	4b10      	ldr	r3, [pc, #64]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 80042ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f0:	2202      	movs	r2, #2
 80042f2:	4013      	ands	r3, r2
 80042f4:	d1f1      	bne.n	80042da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4013      	ands	r3, r2
 80042fe:	d100      	bne.n	8004302 <HAL_RCC_OscConfig+0x2fe>
 8004300:	e0c6      	b.n	8004490 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004302:	231f      	movs	r3, #31
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800430a:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2238      	movs	r2, #56	@ 0x38
 8004310:	4013      	ands	r3, r2
 8004312:	2b20      	cmp	r3, #32
 8004314:	d11e      	bne.n	8004354 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_RCC_OscConfig+0x32c>)
 8004318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d100      	bne.n	8004322 <HAL_RCC_OscConfig+0x31e>
 8004320:	e0b6      	b.n	8004490 <HAL_RCC_OscConfig+0x48c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d000      	beq.n	800432c <HAL_RCC_OscConfig+0x328>
 800432a:	e0b1      	b.n	8004490 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e171      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
 8004330:	40021000 	.word	0x40021000
 8004334:	fffeffff 	.word	0xfffeffff
 8004338:	fffbffff 	.word	0xfffbffff
 800433c:	ffff80ff 	.word	0xffff80ff
 8004340:	ffffc7ff 	.word	0xffffc7ff
 8004344:	00f42400 	.word	0x00f42400
 8004348:	20000808 	.word	0x20000808
 800434c:	2000080c 	.word	0x2000080c
 8004350:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004354:	4bb1      	ldr	r3, [pc, #708]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004358:	2380      	movs	r3, #128	@ 0x80
 800435a:	055b      	lsls	r3, r3, #21
 800435c:	4013      	ands	r3, r2
 800435e:	d101      	bne.n	8004364 <HAL_RCC_OscConfig+0x360>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x362>
 8004364:	2300      	movs	r3, #0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d011      	beq.n	800438e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	4bac      	ldr	r3, [pc, #688]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800436c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436e:	4bab      	ldr	r3, [pc, #684]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004370:	2180      	movs	r1, #128	@ 0x80
 8004372:	0549      	lsls	r1, r1, #21
 8004374:	430a      	orrs	r2, r1
 8004376:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004378:	4ba8      	ldr	r3, [pc, #672]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800437a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800437c:	2380      	movs	r3, #128	@ 0x80
 800437e:	055b      	lsls	r3, r3, #21
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004386:	231f      	movs	r3, #31
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438e:	4ba4      	ldr	r3, [pc, #656]	@ (8004620 <HAL_RCC_OscConfig+0x61c>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	4013      	ands	r3, r2
 8004398:	d11a      	bne.n	80043d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800439a:	4ba1      	ldr	r3, [pc, #644]	@ (8004620 <HAL_RCC_OscConfig+0x61c>)
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4ba0      	ldr	r3, [pc, #640]	@ (8004620 <HAL_RCC_OscConfig+0x61c>)
 80043a0:	2180      	movs	r1, #128	@ 0x80
 80043a2:	0049      	lsls	r1, r1, #1
 80043a4:	430a      	orrs	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80043a8:	f7fe f8a8 	bl	80024fc <HAL_GetTick>
 80043ac:	0003      	movs	r3, r0
 80043ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fe f8a3 	bl	80024fc <HAL_GetTick>
 80043b6:	0002      	movs	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e127      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c4:	4b96      	ldr	r3, [pc, #600]	@ (8004620 <HAL_RCC_OscConfig+0x61c>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4013      	ands	r3, r2
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <HAL_RCC_OscConfig+0x3e2>
 80043d8:	4b90      	ldr	r3, [pc, #576]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80043da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043dc:	4b8f      	ldr	r3, [pc, #572]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80043de:	2101      	movs	r1, #1
 80043e0:	430a      	orrs	r2, r1
 80043e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0x41c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x404>
 80043ee:	4b8b      	ldr	r3, [pc, #556]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80043f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043f2:	4b8a      	ldr	r3, [pc, #552]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80043f4:	2104      	movs	r1, #4
 80043f6:	430a      	orrs	r2, r1
 80043f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043fa:	4b88      	ldr	r3, [pc, #544]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80043fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043fe:	4b87      	ldr	r3, [pc, #540]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004400:	2101      	movs	r1, #1
 8004402:	430a      	orrs	r2, r1
 8004404:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0x41c>
 8004408:	4b84      	ldr	r3, [pc, #528]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800440a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800440c:	4b83      	ldr	r3, [pc, #524]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800440e:	2101      	movs	r1, #1
 8004410:	438a      	bics	r2, r1
 8004412:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004414:	4b81      	ldr	r3, [pc, #516]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004416:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004418:	4b80      	ldr	r3, [pc, #512]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800441a:	2104      	movs	r1, #4
 800441c:	438a      	bics	r2, r1
 800441e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d014      	beq.n	8004452 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fe f868 	bl	80024fc <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004430:	e009      	b.n	8004446 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe f863 	bl	80024fc <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	4a79      	ldr	r2, [pc, #484]	@ (8004624 <HAL_RCC_OscConfig+0x620>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0e6      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004446:	4b75      	ldr	r3, [pc, #468]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444a:	2202      	movs	r2, #2
 800444c:	4013      	ands	r3, r2
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x42e>
 8004450:	e013      	b.n	800447a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fe f853 	bl	80024fc <HAL_GetTick>
 8004456:	0003      	movs	r3, r0
 8004458:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800445a:	e009      	b.n	8004470 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7fe f84e 	bl	80024fc <HAL_GetTick>
 8004460:	0002      	movs	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	4a6f      	ldr	r2, [pc, #444]	@ (8004624 <HAL_RCC_OscConfig+0x620>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e0d1      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004470:	4b6a      	ldr	r3, [pc, #424]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	2202      	movs	r2, #2
 8004476:	4013      	ands	r3, r2
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800447a:	231f      	movs	r3, #31
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d105      	bne.n	8004490 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004484:	4b65      	ldr	r3, [pc, #404]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004488:	4b64      	ldr	r3, [pc, #400]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800448a:	4967      	ldr	r1, [pc, #412]	@ (8004628 <HAL_RCC_OscConfig+0x624>)
 800448c:	400a      	ands	r2, r1
 800448e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d100      	bne.n	800449a <HAL_RCC_OscConfig+0x496>
 8004498:	e0bb      	b.n	8004612 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800449a:	4b60      	ldr	r3, [pc, #384]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2238      	movs	r2, #56	@ 0x38
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b10      	cmp	r3, #16
 80044a4:	d100      	bne.n	80044a8 <HAL_RCC_OscConfig+0x4a4>
 80044a6:	e07b      	b.n	80045a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d156      	bne.n	800455e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b0:	4b5a      	ldr	r3, [pc, #360]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b59      	ldr	r3, [pc, #356]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80044b6:	495d      	ldr	r1, [pc, #372]	@ (800462c <HAL_RCC_OscConfig+0x628>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fe f81e 	bl	80024fc <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe f819 	bl	80024fc <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e09d      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d8:	4b50      	ldr	r3, [pc, #320]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	049b      	lsls	r3, r3, #18
 80044e0:	4013      	ands	r3, r2
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e4:	4b4d      	ldr	r3, [pc, #308]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a51      	ldr	r2, [pc, #324]	@ (8004630 <HAL_RCC_OscConfig+0x62c>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004510:	431a      	orrs	r2, r3
 8004512:	4b42      	ldr	r3, [pc, #264]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004514:	430a      	orrs	r2, r1
 8004516:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004518:	4b40      	ldr	r3, [pc, #256]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b3f      	ldr	r3, [pc, #252]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	0449      	lsls	r1, r1, #17
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004526:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	4b3c      	ldr	r3, [pc, #240]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 800452c:	2180      	movs	r1, #128	@ 0x80
 800452e:	0549      	lsls	r1, r1, #21
 8004530:	430a      	orrs	r2, r1
 8004532:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd ffe2 	bl	80024fc <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453e:	f7fd ffdd 	bl	80024fc <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e061      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004550:	4b32      	ldr	r3, [pc, #200]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	049b      	lsls	r3, r3, #18
 8004558:	4013      	ands	r3, r2
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x53a>
 800455c:	e059      	b.n	8004612 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	4b2f      	ldr	r3, [pc, #188]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b2e      	ldr	r3, [pc, #184]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004564:	4931      	ldr	r1, [pc, #196]	@ (800462c <HAL_RCC_OscConfig+0x628>)
 8004566:	400a      	ands	r2, r1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7fd ffc7 	bl	80024fc <HAL_GetTick>
 800456e:	0003      	movs	r3, r0
 8004570:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004574:	f7fd ffc2 	bl	80024fc <HAL_GetTick>
 8004578:	0002      	movs	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e046      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004586:	4b25      	ldr	r3, [pc, #148]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	049b      	lsls	r3, r3, #18
 800458e:	4013      	ands	r3, r2
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004592:	4b22      	ldr	r3, [pc, #136]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	4b21      	ldr	r3, [pc, #132]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 8004598:	4926      	ldr	r1, [pc, #152]	@ (8004634 <HAL_RCC_OscConfig+0x630>)
 800459a:	400a      	ands	r2, r1
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	e038      	b.n	8004612 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e033      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045ac:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <HAL_RCC_OscConfig+0x618>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2203      	movs	r2, #3
 80045b6:	401a      	ands	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d126      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2270      	movs	r2, #112	@ 0x70
 80045c4:	401a      	ands	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d11f      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	23fe      	movs	r3, #254	@ 0xfe
 80045d2:	01db      	lsls	r3, r3, #7
 80045d4:	401a      	ands	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045dc:	429a      	cmp	r2, r3
 80045de:	d116      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	23f8      	movs	r3, #248	@ 0xf8
 80045e4:	039b      	lsls	r3, r3, #14
 80045e6:	401a      	ands	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d10e      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	23e0      	movs	r3, #224	@ 0xe0
 80045f4:	051b      	lsls	r3, r3, #20
 80045f6:	401a      	ands	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	0f5b      	lsrs	r3, r3, #29
 8004604:	075a      	lsls	r2, r3, #29
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b008      	add	sp, #32
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	40007000 	.word	0x40007000
 8004624:	00001388 	.word	0x00001388
 8004628:	efffffff 	.word	0xefffffff
 800462c:	feffffff 	.word	0xfeffffff
 8004630:	11c1808c 	.word	0x11c1808c
 8004634:	eefefffc 	.word	0xeefefffc

08004638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0e9      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800464c:	4b76      	ldr	r3, [pc, #472]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2207      	movs	r2, #7
 8004652:	4013      	ands	r3, r2
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d91e      	bls.n	8004698 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b73      	ldr	r3, [pc, #460]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2207      	movs	r2, #7
 8004660:	4393      	bics	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	4b70      	ldr	r3, [pc, #448]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800466c:	f7fd ff46 	bl	80024fc <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004674:	e009      	b.n	800468a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004676:	f7fd ff41 	bl	80024fc <HAL_GetTick>
 800467a:	0002      	movs	r2, r0
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	4a6a      	ldr	r2, [pc, #424]	@ (800482c <HAL_RCC_ClockConfig+0x1f4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0ca      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800468a:	4b67      	ldr	r3, [pc, #412]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2207      	movs	r2, #7
 8004690:	4013      	ands	r3, r2
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d1ee      	bne.n	8004676 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2202      	movs	r2, #2
 800469e:	4013      	ands	r3, r2
 80046a0:	d015      	beq.n	80046ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2204      	movs	r2, #4
 80046a8:	4013      	ands	r3, r2
 80046aa:	d006      	beq.n	80046ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046ac:	4b60      	ldr	r3, [pc, #384]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	4b5f      	ldr	r3, [pc, #380]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046b2:	21e0      	movs	r1, #224	@ 0xe0
 80046b4:	01c9      	lsls	r1, r1, #7
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4a5d      	ldr	r2, [pc, #372]	@ (8004834 <HAL_RCC_ClockConfig+0x1fc>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	0019      	movs	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	4b59      	ldr	r3, [pc, #356]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	4013      	ands	r3, r2
 80046d6:	d057      	beq.n	8004788 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e0:	4b53      	ldr	r3, [pc, #332]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	@ 0x80
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	4013      	ands	r3, r2
 80046ea:	d12b      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e097      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f8:	4b4d      	ldr	r3, [pc, #308]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	@ 0x80
 80046fe:	049b      	lsls	r3, r3, #18
 8004700:	4013      	ands	r3, r2
 8004702:	d11f      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e08b      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004710:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4013      	ands	r3, r2
 800471a:	d113      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e07f      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b03      	cmp	r3, #3
 8004726:	d106      	bne.n	8004736 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004728:	4b41      	ldr	r3, [pc, #260]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 800472a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472c:	2202      	movs	r2, #2
 800472e:	4013      	ands	r3, r2
 8004730:	d108      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e074      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004736:	4b3e      	ldr	r3, [pc, #248]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	2202      	movs	r2, #2
 800473c:	4013      	ands	r3, r2
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e06d      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004744:	4b3a      	ldr	r3, [pc, #232]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2207      	movs	r2, #7
 800474a:	4393      	bics	r3, r2
 800474c:	0019      	movs	r1, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	4b37      	ldr	r3, [pc, #220]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004758:	f7fd fed0 	bl	80024fc <HAL_GetTick>
 800475c:	0003      	movs	r3, r0
 800475e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004760:	e009      	b.n	8004776 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004762:	f7fd fecb 	bl	80024fc <HAL_GetTick>
 8004766:	0002      	movs	r2, r0
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	4a2f      	ldr	r2, [pc, #188]	@ (800482c <HAL_RCC_ClockConfig+0x1f4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e054      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004776:	4b2e      	ldr	r3, [pc, #184]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2238      	movs	r2, #56	@ 0x38
 800477c:	401a      	ands	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	429a      	cmp	r2, r3
 8004786:	d1ec      	bne.n	8004762 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2207      	movs	r2, #7
 800478e:	4013      	ands	r3, r2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d21e      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2207      	movs	r2, #7
 800479c:	4393      	bics	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	4b21      	ldr	r3, [pc, #132]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047a8:	f7fd fea8 	bl	80024fc <HAL_GetTick>
 80047ac:	0003      	movs	r3, r0
 80047ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047b0:	e009      	b.n	80047c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b2:	f7fd fea3 	bl	80024fc <HAL_GetTick>
 80047b6:	0002      	movs	r2, r0
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	4a1b      	ldr	r2, [pc, #108]	@ (800482c <HAL_RCC_ClockConfig+0x1f4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e02c      	b.n	8004820 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047c6:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2207      	movs	r2, #7
 80047cc:	4013      	ands	r3, r2
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2204      	movs	r2, #4
 80047da:	4013      	ands	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047de:	4b14      	ldr	r3, [pc, #80]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <HAL_RCC_ClockConfig+0x200>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	0019      	movs	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047f2:	f000 f829 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 80047f6:	0001      	movs	r1, r0
 80047f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <HAL_RCC_ClockConfig+0x1f8>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	220f      	movs	r2, #15
 8004800:	401a      	ands	r2, r3
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_RCC_ClockConfig+0x204>)
 8004804:	0092      	lsls	r2, r2, #2
 8004806:	58d3      	ldr	r3, [r2, r3]
 8004808:	221f      	movs	r2, #31
 800480a:	4013      	ands	r3, r2
 800480c:	000a      	movs	r2, r1
 800480e:	40da      	lsrs	r2, r3
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_RCC_ClockConfig+0x208>)
 8004812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004814:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <HAL_RCC_ClockConfig+0x20c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0018      	movs	r0, r3
 800481a:	f7fd fe13 	bl	8002444 <HAL_InitTick>
 800481e:	0003      	movs	r3, r0
}
 8004820:	0018      	movs	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	b004      	add	sp, #16
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40022000 	.word	0x40022000
 800482c:	00001388 	.word	0x00001388
 8004830:	40021000 	.word	0x40021000
 8004834:	fffff0ff 	.word	0xfffff0ff
 8004838:	ffff8fff 	.word	0xffff8fff
 800483c:	080074d8 	.word	0x080074d8
 8004840:	20000808 	.word	0x20000808
 8004844:	2000080c 	.word	0x2000080c

08004848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800484e:	4b3c      	ldr	r3, [pc, #240]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2238      	movs	r2, #56	@ 0x38
 8004854:	4013      	ands	r3, r2
 8004856:	d10f      	bne.n	8004878 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004858:	4b39      	ldr	r3, [pc, #228]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	0adb      	lsrs	r3, r3, #11
 800485e:	2207      	movs	r2, #7
 8004860:	4013      	ands	r3, r2
 8004862:	2201      	movs	r2, #1
 8004864:	409a      	lsls	r2, r3
 8004866:	0013      	movs	r3, r2
 8004868:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	4835      	ldr	r0, [pc, #212]	@ (8004944 <HAL_RCC_GetSysClockFreq+0xfc>)
 800486e:	f7fb fc53 	bl	8000118 <__udivsi3>
 8004872:	0003      	movs	r3, r0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	e05d      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004878:	4b31      	ldr	r3, [pc, #196]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2238      	movs	r2, #56	@ 0x38
 800487e:	4013      	ands	r3, r2
 8004880:	2b08      	cmp	r3, #8
 8004882:	d102      	bne.n	800488a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004884:	4b30      	ldr	r3, [pc, #192]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x100>)
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e054      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800488a:	4b2d      	ldr	r3, [pc, #180]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2238      	movs	r2, #56	@ 0x38
 8004890:	4013      	ands	r3, r2
 8004892:	2b10      	cmp	r3, #16
 8004894:	d138      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004896:	4b2a      	ldr	r3, [pc, #168]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2203      	movs	r2, #3
 800489c:	4013      	ands	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048a0:	4b27      	ldr	r3, [pc, #156]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	2207      	movs	r2, #7
 80048a8:	4013      	ands	r3, r2
 80048aa:	3301      	adds	r3, #1
 80048ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d10d      	bne.n	80048d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	4824      	ldr	r0, [pc, #144]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x100>)
 80048b8:	f7fb fc2e 	bl	8000118 <__udivsi3>
 80048bc:	0003      	movs	r3, r0
 80048be:	0019      	movs	r1, r3
 80048c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	227f      	movs	r2, #127	@ 0x7f
 80048c8:	4013      	ands	r3, r2
 80048ca:	434b      	muls	r3, r1
 80048cc:	617b      	str	r3, [r7, #20]
        break;
 80048ce:	e00d      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80048d0:	68b9      	ldr	r1, [r7, #8]
 80048d2:	481c      	ldr	r0, [pc, #112]	@ (8004944 <HAL_RCC_GetSysClockFreq+0xfc>)
 80048d4:	f7fb fc20 	bl	8000118 <__udivsi3>
 80048d8:	0003      	movs	r3, r0
 80048da:	0019      	movs	r1, r3
 80048dc:	4b18      	ldr	r3, [pc, #96]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	0a1b      	lsrs	r3, r3, #8
 80048e2:	227f      	movs	r2, #127	@ 0x7f
 80048e4:	4013      	ands	r3, r2
 80048e6:	434b      	muls	r3, r1
 80048e8:	617b      	str	r3, [r7, #20]
        break;
 80048ea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048ec:	4b14      	ldr	r3, [pc, #80]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	0f5b      	lsrs	r3, r3, #29
 80048f2:	2207      	movs	r2, #7
 80048f4:	4013      	ands	r3, r2
 80048f6:	3301      	adds	r3, #1
 80048f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	f7fb fc0b 	bl	8000118 <__udivsi3>
 8004902:	0003      	movs	r3, r0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	e015      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004908:	4b0d      	ldr	r3, [pc, #52]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2238      	movs	r2, #56	@ 0x38
 800490e:	4013      	ands	r3, r2
 8004910:	2b20      	cmp	r3, #32
 8004912:	d103      	bne.n	800491c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	e00b      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800491c:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <HAL_RCC_GetSysClockFreq+0xf8>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2238      	movs	r2, #56	@ 0x38
 8004922:	4013      	ands	r3, r2
 8004924:	2b18      	cmp	r3, #24
 8004926:	d103      	bne.n	8004930 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004928:	23fa      	movs	r3, #250	@ 0xfa
 800492a:	01db      	lsls	r3, r3, #7
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	e001      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004934:	693b      	ldr	r3, [r7, #16]
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b006      	add	sp, #24
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	40021000 	.word	0x40021000
 8004944:	00f42400 	.word	0x00f42400
 8004948:	007a1200 	.word	0x007a1200

0800494c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004954:	2313      	movs	r3, #19
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	2200      	movs	r2, #0
 800495a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800495c:	2312      	movs	r3, #18
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	029b      	lsls	r3, r3, #10
 800496c:	4013      	ands	r3, r2
 800496e:	d100      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004970:	e0a3      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004972:	2011      	movs	r0, #17
 8004974:	183b      	adds	r3, r7, r0
 8004976:	2200      	movs	r2, #0
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497a:	4ba5      	ldr	r3, [pc, #660]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800497c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800497e:	2380      	movs	r3, #128	@ 0x80
 8004980:	055b      	lsls	r3, r3, #21
 8004982:	4013      	ands	r3, r2
 8004984:	d110      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	4ba2      	ldr	r3, [pc, #648]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800498a:	4ba1      	ldr	r3, [pc, #644]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800498c:	2180      	movs	r1, #128	@ 0x80
 800498e:	0549      	lsls	r1, r1, #21
 8004990:	430a      	orrs	r2, r1
 8004992:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004994:	4b9e      	ldr	r3, [pc, #632]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	055b      	lsls	r3, r3, #21
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	183b      	adds	r3, r7, r0
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a8:	4b9a      	ldr	r3, [pc, #616]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b99      	ldr	r3, [pc, #612]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049ae:	2180      	movs	r1, #128	@ 0x80
 80049b0:	0049      	lsls	r1, r1, #1
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049b6:	f7fd fda1 	bl	80024fc <HAL_GetTick>
 80049ba:	0003      	movs	r3, r0
 80049bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049be:	e00b      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c0:	f7fd fd9c 	bl	80024fc <HAL_GetTick>
 80049c4:	0002      	movs	r2, r0
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d904      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80049ce:	2313      	movs	r3, #19
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	2203      	movs	r2, #3
 80049d4:	701a      	strb	r2, [r3, #0]
        break;
 80049d6:	e005      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4013      	ands	r3, r2
 80049e2:	d0ed      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80049e4:	2313      	movs	r3, #19
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d154      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ee:	4b88      	ldr	r3, [pc, #544]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049f2:	23c0      	movs	r3, #192	@ 0xc0
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4013      	ands	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d019      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d014      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a0a:	4b81      	ldr	r3, [pc, #516]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0e:	4a82      	ldr	r2, [pc, #520]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a14:	4b7e      	ldr	r3, [pc, #504]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a18:	4b7d      	ldr	r3, [pc, #500]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a1a:	2180      	movs	r1, #128	@ 0x80
 8004a1c:	0249      	lsls	r1, r1, #9
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a22:	4b7b      	ldr	r3, [pc, #492]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004a26:	4b7a      	ldr	r3, [pc, #488]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a28:	497c      	ldr	r1, [pc, #496]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a2e:	4b78      	ldr	r3, [pc, #480]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2201      	movs	r2, #1
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d016      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fd fd5e 	bl	80024fc <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a44:	e00c      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a46:	f7fd fd59 	bl	80024fc <HAL_GetTick>
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	4a73      	ldr	r2, [pc, #460]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d904      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004a56:	2313      	movs	r3, #19
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	701a      	strb	r2, [r3, #0]
            break;
 8004a5e:	e004      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a60:	4b6b      	ldr	r3, [pc, #428]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a64:	2202      	movs	r2, #2
 8004a66:	4013      	ands	r3, r2
 8004a68:	d0ed      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a6a:	2313      	movs	r3, #19
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a74:	4b66      	ldr	r3, [pc, #408]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a78:	4a67      	ldr	r2, [pc, #412]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a82:	4b63      	ldr	r3, [pc, #396]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a84:	430a      	orrs	r2, r1
 8004a86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004a88:	e00c      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a8a:	2312      	movs	r3, #18
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	2213      	movs	r2, #19
 8004a90:	18ba      	adds	r2, r7, r2
 8004a92:	7812      	ldrb	r2, [r2, #0]
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e005      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	2312      	movs	r3, #18
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	2213      	movs	r2, #19
 8004a9e:	18ba      	adds	r2, r7, r2
 8004aa0:	7812      	ldrb	r2, [r2, #0]
 8004aa2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aa4:	2311      	movs	r3, #17
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	4b58      	ldr	r3, [pc, #352]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab2:	4b57      	ldr	r3, [pc, #348]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ab4:	495b      	ldr	r1, [pc, #364]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d009      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac4:	4b52      	ldr	r3, [pc, #328]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac8:	2203      	movs	r2, #3
 8004aca:	4393      	bics	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2210      	movs	r2, #16
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	4a50      	ldr	r2, [pc, #320]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	0019      	movs	r1, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	4b47      	ldr	r3, [pc, #284]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004af2:	430a      	orrs	r2, r1
 8004af4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	2380      	movs	r3, #128	@ 0x80
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4013      	ands	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b02:	4b43      	ldr	r3, [pc, #268]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b06:	4a49      	ldr	r2, [pc, #292]	@ (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	4b3f      	ldr	r3, [pc, #252]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b12:	430a      	orrs	r2, r1
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	2380      	movs	r3, #128	@ 0x80
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b22:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	4a42      	ldr	r2, [pc, #264]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b32:	430a      	orrs	r2, r1
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b40:	4b33      	ldr	r3, [pc, #204]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b44:	4a3b      	ldr	r2, [pc, #236]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	0019      	movs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	4b30      	ldr	r3, [pc, #192]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b50:	430a      	orrs	r2, r1
 8004b52:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	01db      	lsls	r3, r3, #7
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d015      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b60:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	0899      	lsrs	r1, r3, #2
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	4b28      	ldr	r3, [pc, #160]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	2380      	movs	r3, #128	@ 0x80
 8004b78:	05db      	lsls	r3, r3, #23
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b7e:	4b24      	ldr	r3, [pc, #144]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	4b23      	ldr	r3, [pc, #140]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b84:	2180      	movs	r1, #128	@ 0x80
 8004b86:	0249      	lsls	r1, r1, #9
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	2380      	movs	r3, #128	@ 0x80
 8004b92:	039b      	lsls	r3, r3, #14
 8004b94:	4013      	ands	r3, r2
 8004b96:	d016      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b98:	4b1d      	ldr	r3, [pc, #116]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9c:	4a26      	ldr	r2, [pc, #152]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	2380      	movs	r3, #128	@ 0x80
 8004bb2:	03db      	lsls	r3, r3, #15
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d106      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bb8:	4b15      	ldr	r3, [pc, #84]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	4b14      	ldr	r3, [pc, #80]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bbe:	2180      	movs	r1, #128	@ 0x80
 8004bc0:	0449      	lsls	r1, r1, #17
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	4a19      	ldr	r2, [pc, #100]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004be2:	430a      	orrs	r2, r1
 8004be4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	01db      	lsls	r3, r3, #7
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bf2:	4b07      	ldr	r3, [pc, #28]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bf8:	2180      	movs	r1, #128	@ 0x80
 8004bfa:	0249      	lsls	r1, r1, #9
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c00:	2312      	movs	r3, #18
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	781b      	ldrb	r3, [r3, #0]
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b006      	add	sp, #24
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40007000 	.word	0x40007000
 8004c18:	fffffcff 	.word	0xfffffcff
 8004c1c:	fffeffff 	.word	0xfffeffff
 8004c20:	00001388 	.word	0x00001388
 8004c24:	efffffff 	.word	0xefffffff
 8004c28:	fffff3ff 	.word	0xfffff3ff
 8004c2c:	fff3ffff 	.word	0xfff3ffff
 8004c30:	ffcfffff 	.word	0xffcfffff
 8004c34:	ffffcfff 	.word	0xffffcfff
 8004c38:	ffbfffff 	.word	0xffbfffff
 8004c3c:	ffff3fff 	.word	0xffff3fff

08004c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e04a      	b.n	8004ce8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223d      	movs	r2, #61	@ 0x3d
 8004c56:	5c9b      	ldrb	r3, [r3, r2]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	223c      	movs	r2, #60	@ 0x3c
 8004c62:	2100      	movs	r1, #0
 8004c64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f7fd f9e9 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	223d      	movs	r2, #61	@ 0x3d
 8004c72:	2102      	movs	r1, #2
 8004c74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	0019      	movs	r1, r3
 8004c80:	0010      	movs	r0, r2
 8004c82:	f000 fce7 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2248      	movs	r2, #72	@ 0x48
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	223e      	movs	r2, #62	@ 0x3e
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	223f      	movs	r2, #63	@ 0x3f
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2240      	movs	r2, #64	@ 0x40
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	5499      	strb	r1, [r3, r2]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2241      	movs	r2, #65	@ 0x41
 8004caa:	2101      	movs	r1, #1
 8004cac:	5499      	strb	r1, [r3, r2]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2242      	movs	r2, #66	@ 0x42
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	5499      	strb	r1, [r3, r2]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2243      	movs	r2, #67	@ 0x43
 8004cba:	2101      	movs	r1, #1
 8004cbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2244      	movs	r2, #68	@ 0x44
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	5499      	strb	r1, [r3, r2]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2245      	movs	r2, #69	@ 0x45
 8004cca:	2101      	movs	r1, #1
 8004ccc:	5499      	strb	r1, [r3, r2]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2246      	movs	r2, #70	@ 0x46
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	5499      	strb	r1, [r3, r2]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2247      	movs	r2, #71	@ 0x47
 8004cda:	2101      	movs	r1, #1
 8004cdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	223d      	movs	r2, #61	@ 0x3d
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e04a      	b.n	8004d98 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	223d      	movs	r2, #61	@ 0x3d
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	223c      	movs	r2, #60	@ 0x3c
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 f841 	bl	8004da0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	223d      	movs	r2, #61	@ 0x3d
 8004d22:	2102      	movs	r1, #2
 8004d24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	0019      	movs	r1, r3
 8004d30:	0010      	movs	r0, r2
 8004d32:	f000 fc8f 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2248      	movs	r2, #72	@ 0x48
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	223e      	movs	r2, #62	@ 0x3e
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	223f      	movs	r2, #63	@ 0x3f
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2240      	movs	r2, #64	@ 0x40
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2241      	movs	r2, #65	@ 0x41
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2242      	movs	r2, #66	@ 0x42
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2243      	movs	r2, #67	@ 0x43
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2244      	movs	r2, #68	@ 0x44
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2245      	movs	r2, #69	@ 0x45
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5499      	strb	r1, [r3, r2]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2246      	movs	r2, #70	@ 0x46
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2247      	movs	r2, #71	@ 0x47
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223d      	movs	r2, #61	@ 0x3d
 8004d92:	2101      	movs	r1, #1
 8004d94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	0018      	movs	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b002      	add	sp, #8
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d108      	bne.n	8004dd2 <HAL_TIM_OC_Start+0x22>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	223e      	movs	r2, #62	@ 0x3e
 8004dc4:	5c9b      	ldrb	r3, [r3, r2]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	1e5a      	subs	r2, r3, #1
 8004dcc:	4193      	sbcs	r3, r2
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	e037      	b.n	8004e42 <HAL_TIM_OC_Start+0x92>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d108      	bne.n	8004dea <HAL_TIM_OC_Start+0x3a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	223f      	movs	r2, #63	@ 0x3f
 8004ddc:	5c9b      	ldrb	r3, [r3, r2]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	1e5a      	subs	r2, r3, #1
 8004de4:	4193      	sbcs	r3, r2
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e02b      	b.n	8004e42 <HAL_TIM_OC_Start+0x92>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d108      	bne.n	8004e02 <HAL_TIM_OC_Start+0x52>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2240      	movs	r2, #64	@ 0x40
 8004df4:	5c9b      	ldrb	r3, [r3, r2]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	1e5a      	subs	r2, r3, #1
 8004dfc:	4193      	sbcs	r3, r2
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	e01f      	b.n	8004e42 <HAL_TIM_OC_Start+0x92>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	d108      	bne.n	8004e1a <HAL_TIM_OC_Start+0x6a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2241      	movs	r2, #65	@ 0x41
 8004e0c:	5c9b      	ldrb	r3, [r3, r2]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	1e5a      	subs	r2, r3, #1
 8004e14:	4193      	sbcs	r3, r2
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	e013      	b.n	8004e42 <HAL_TIM_OC_Start+0x92>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b10      	cmp	r3, #16
 8004e1e:	d108      	bne.n	8004e32 <HAL_TIM_OC_Start+0x82>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2242      	movs	r2, #66	@ 0x42
 8004e24:	5c9b      	ldrb	r3, [r3, r2]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	1e5a      	subs	r2, r3, #1
 8004e2c:	4193      	sbcs	r3, r2
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	e007      	b.n	8004e42 <HAL_TIM_OC_Start+0x92>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2243      	movs	r2, #67	@ 0x43
 8004e36:	5c9b      	ldrb	r3, [r3, r2]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	1e5a      	subs	r2, r3, #1
 8004e3e:	4193      	sbcs	r3, r2
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e081      	b.n	8004f4e <HAL_TIM_OC_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_OC_Start+0xaa>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	223e      	movs	r2, #62	@ 0x3e
 8004e54:	2102      	movs	r1, #2
 8004e56:	5499      	strb	r1, [r3, r2]
 8004e58:	e023      	b.n	8004ea2 <HAL_TIM_OC_Start+0xf2>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_OC_Start+0xba>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	223f      	movs	r2, #63	@ 0x3f
 8004e64:	2102      	movs	r1, #2
 8004e66:	5499      	strb	r1, [r3, r2]
 8004e68:	e01b      	b.n	8004ea2 <HAL_TIM_OC_Start+0xf2>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_OC_Start+0xca>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2240      	movs	r2, #64	@ 0x40
 8004e74:	2102      	movs	r1, #2
 8004e76:	5499      	strb	r1, [r3, r2]
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_OC_Start+0xf2>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_OC_Start+0xda>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2241      	movs	r2, #65	@ 0x41
 8004e84:	2102      	movs	r1, #2
 8004e86:	5499      	strb	r1, [r3, r2]
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_OC_Start+0xf2>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_OC_Start+0xea>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2242      	movs	r2, #66	@ 0x42
 8004e94:	2102      	movs	r1, #2
 8004e96:	5499      	strb	r1, [r3, r2]
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_OC_Start+0xf2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2243      	movs	r2, #67	@ 0x43
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6839      	ldr	r1, [r7, #0]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 ff8e 	bl	8005dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a28      	ldr	r2, [pc, #160]	@ (8004f58 <HAL_TIM_OC_Start+0x1a8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <HAL_TIM_OC_Start+0x11e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a27      	ldr	r2, [pc, #156]	@ (8004f5c <HAL_TIM_OC_Start+0x1ac>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIM_OC_Start+0x11e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a25      	ldr	r2, [pc, #148]	@ (8004f60 <HAL_TIM_OC_Start+0x1b0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_OC_Start+0x122>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_OC_Start+0x124>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2180      	movs	r1, #128	@ 0x80
 8004ee4:	0209      	lsls	r1, r1, #8
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	@ (8004f58 <HAL_TIM_OC_Start+0x1a8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00a      	beq.n	8004f0a <HAL_TIM_OC_Start+0x15a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	05db      	lsls	r3, r3, #23
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d004      	beq.n	8004f0a <HAL_TIM_OC_Start+0x15a>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a17      	ldr	r2, [pc, #92]	@ (8004f64 <HAL_TIM_OC_Start+0x1b4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d116      	bne.n	8004f38 <HAL_TIM_OC_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a15      	ldr	r2, [pc, #84]	@ (8004f68 <HAL_TIM_OC_Start+0x1b8>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d016      	beq.n	8004f4a <HAL_TIM_OC_Start+0x19a>
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	2380      	movs	r3, #128	@ 0x80
 8004f20:	025b      	lsls	r3, r3, #9
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d011      	beq.n	8004f4a <HAL_TIM_OC_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2101      	movs	r1, #1
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	e008      	b.n	8004f4a <HAL_TIM_OC_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2101      	movs	r1, #1
 8004f44:	430a      	orrs	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e000      	b.n	8004f4c <HAL_TIM_OC_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b004      	add	sp, #16
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800
 8004f64:	40000400 	.word	0x40000400
 8004f68:	00010007 	.word	0x00010007

08004f6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e04a      	b.n	8005014 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	223d      	movs	r2, #61	@ 0x3d
 8004f82:	5c9b      	ldrb	r3, [r3, r2]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d107      	bne.n	8004f9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	223c      	movs	r2, #60	@ 0x3c
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	0018      	movs	r0, r3
 8004f96:	f000 f841 	bl	800501c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223d      	movs	r2, #61	@ 0x3d
 8004f9e:	2102      	movs	r1, #2
 8004fa0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	0019      	movs	r1, r3
 8004fac:	0010      	movs	r0, r2
 8004fae:	f000 fb51 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2248      	movs	r2, #72	@ 0x48
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	223e      	movs	r2, #62	@ 0x3e
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	5499      	strb	r1, [r3, r2]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	223f      	movs	r2, #63	@ 0x3f
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5499      	strb	r1, [r3, r2]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2240      	movs	r2, #64	@ 0x40
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2241      	movs	r2, #65	@ 0x41
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	5499      	strb	r1, [r3, r2]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2242      	movs	r2, #66	@ 0x42
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2243      	movs	r2, #67	@ 0x43
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2244      	movs	r2, #68	@ 0x44
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2245      	movs	r2, #69	@ 0x45
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2246      	movs	r2, #70	@ 0x46
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2247      	movs	r2, #71	@ 0x47
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	223d      	movs	r2, #61	@ 0x3d
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b002      	add	sp, #8
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d108      	bne.n	800504e <HAL_TIM_PWM_Start+0x22>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	223e      	movs	r2, #62	@ 0x3e
 8005040:	5c9b      	ldrb	r3, [r3, r2]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	4193      	sbcs	r3, r2
 800504a:	b2db      	uxtb	r3, r3
 800504c:	e037      	b.n	80050be <HAL_TIM_PWM_Start+0x92>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b04      	cmp	r3, #4
 8005052:	d108      	bne.n	8005066 <HAL_TIM_PWM_Start+0x3a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	223f      	movs	r2, #63	@ 0x3f
 8005058:	5c9b      	ldrb	r3, [r3, r2]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	1e5a      	subs	r2, r3, #1
 8005060:	4193      	sbcs	r3, r2
 8005062:	b2db      	uxtb	r3, r3
 8005064:	e02b      	b.n	80050be <HAL_TIM_PWM_Start+0x92>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d108      	bne.n	800507e <HAL_TIM_PWM_Start+0x52>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2240      	movs	r2, #64	@ 0x40
 8005070:	5c9b      	ldrb	r3, [r3, r2]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	1e5a      	subs	r2, r3, #1
 8005078:	4193      	sbcs	r3, r2
 800507a:	b2db      	uxtb	r3, r3
 800507c:	e01f      	b.n	80050be <HAL_TIM_PWM_Start+0x92>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b0c      	cmp	r3, #12
 8005082:	d108      	bne.n	8005096 <HAL_TIM_PWM_Start+0x6a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2241      	movs	r2, #65	@ 0x41
 8005088:	5c9b      	ldrb	r3, [r3, r2]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	4193      	sbcs	r3, r2
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e013      	b.n	80050be <HAL_TIM_PWM_Start+0x92>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b10      	cmp	r3, #16
 800509a:	d108      	bne.n	80050ae <HAL_TIM_PWM_Start+0x82>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2242      	movs	r2, #66	@ 0x42
 80050a0:	5c9b      	ldrb	r3, [r3, r2]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	1e5a      	subs	r2, r3, #1
 80050a8:	4193      	sbcs	r3, r2
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	e007      	b.n	80050be <HAL_TIM_PWM_Start+0x92>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2243      	movs	r2, #67	@ 0x43
 80050b2:	5c9b      	ldrb	r3, [r3, r2]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	1e5a      	subs	r2, r3, #1
 80050ba:	4193      	sbcs	r3, r2
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e081      	b.n	80051ca <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_PWM_Start+0xaa>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223e      	movs	r2, #62	@ 0x3e
 80050d0:	2102      	movs	r1, #2
 80050d2:	5499      	strb	r1, [r3, r2]
 80050d4:	e023      	b.n	800511e <HAL_TIM_PWM_Start+0xf2>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start+0xba>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	223f      	movs	r2, #63	@ 0x3f
 80050e0:	2102      	movs	r1, #2
 80050e2:	5499      	strb	r1, [r3, r2]
 80050e4:	e01b      	b.n	800511e <HAL_TIM_PWM_Start+0xf2>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start+0xca>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2240      	movs	r2, #64	@ 0x40
 80050f0:	2102      	movs	r1, #2
 80050f2:	5499      	strb	r1, [r3, r2]
 80050f4:	e013      	b.n	800511e <HAL_TIM_PWM_Start+0xf2>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start+0xda>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2241      	movs	r2, #65	@ 0x41
 8005100:	2102      	movs	r1, #2
 8005102:	5499      	strb	r1, [r3, r2]
 8005104:	e00b      	b.n	800511e <HAL_TIM_PWM_Start+0xf2>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b10      	cmp	r3, #16
 800510a:	d104      	bne.n	8005116 <HAL_TIM_PWM_Start+0xea>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2242      	movs	r2, #66	@ 0x42
 8005110:	2102      	movs	r1, #2
 8005112:	5499      	strb	r1, [r3, r2]
 8005114:	e003      	b.n	800511e <HAL_TIM_PWM_Start+0xf2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2243      	movs	r2, #67	@ 0x43
 800511a:	2102      	movs	r1, #2
 800511c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	0018      	movs	r0, r3
 8005128:	f000 fe50 	bl	8005dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a28      	ldr	r2, [pc, #160]	@ (80051d4 <HAL_TIM_PWM_Start+0x1a8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_TIM_PWM_Start+0x11e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a27      	ldr	r2, [pc, #156]	@ (80051d8 <HAL_TIM_PWM_Start+0x1ac>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_TIM_PWM_Start+0x11e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a25      	ldr	r2, [pc, #148]	@ (80051dc <HAL_TIM_PWM_Start+0x1b0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_TIM_PWM_Start+0x122>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_TIM_PWM_Start+0x124>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2180      	movs	r1, #128	@ 0x80
 8005160:	0209      	lsls	r1, r1, #8
 8005162:	430a      	orrs	r2, r1
 8005164:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1a      	ldr	r2, [pc, #104]	@ (80051d4 <HAL_TIM_PWM_Start+0x1a8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00a      	beq.n	8005186 <HAL_TIM_PWM_Start+0x15a>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	05db      	lsls	r3, r3, #23
 8005178:	429a      	cmp	r2, r3
 800517a:	d004      	beq.n	8005186 <HAL_TIM_PWM_Start+0x15a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a17      	ldr	r2, [pc, #92]	@ (80051e0 <HAL_TIM_PWM_Start+0x1b4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d116      	bne.n	80051b4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a15      	ldr	r2, [pc, #84]	@ (80051e4 <HAL_TIM_PWM_Start+0x1b8>)
 800518e:	4013      	ands	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b06      	cmp	r3, #6
 8005196:	d016      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x19a>
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	025b      	lsls	r3, r3, #9
 800519e:	429a      	cmp	r2, r3
 80051a0:	d011      	beq.n	80051c6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2101      	movs	r1, #1
 80051ae:	430a      	orrs	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b2:	e008      	b.n	80051c6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2101      	movs	r1, #1
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e000      	b.n	80051c8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b004      	add	sp, #16
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40014400 	.word	0x40014400
 80051dc:	40014800 	.word	0x40014800
 80051e0:	40000400 	.word	0x40000400
 80051e4:	00010007 	.word	0x00010007

080051e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f4:	2317      	movs	r3, #23
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	223c      	movs	r2, #60	@ 0x3c
 8005200:	5c9b      	ldrb	r3, [r3, r2]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_TIM_OC_ConfigChannel+0x22>
 8005206:	2302      	movs	r3, #2
 8005208:	e048      	b.n	800529c <HAL_TIM_OC_ConfigChannel+0xb4>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	223c      	movs	r2, #60	@ 0x3c
 800520e:	2101      	movs	r1, #1
 8005210:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b14      	cmp	r3, #20
 8005216:	d835      	bhi.n	8005284 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	009a      	lsls	r2, r3, #2
 800521c:	4b21      	ldr	r3, [pc, #132]	@ (80052a4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800521e:	18d3      	adds	r3, r2, r3
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	0011      	movs	r1, r2
 800522c:	0018      	movs	r0, r3
 800522e:	f000 fa95 	bl	800575c <TIM_OC1_SetConfig>
      break;
 8005232:	e02c      	b.n	800528e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	0011      	movs	r1, r2
 800523c:	0018      	movs	r0, r3
 800523e:	f000 fb0d 	bl	800585c <TIM_OC2_SetConfig>
      break;
 8005242:	e024      	b.n	800528e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	0011      	movs	r1, r2
 800524c:	0018      	movs	r0, r3
 800524e:	f000 fb83 	bl	8005958 <TIM_OC3_SetConfig>
      break;
 8005252:	e01c      	b.n	800528e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	0011      	movs	r1, r2
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fbfd 	bl	8005a5c <TIM_OC4_SetConfig>
      break;
 8005262:	e014      	b.n	800528e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	0011      	movs	r1, r2
 800526c:	0018      	movs	r0, r3
 800526e:	f000 fc59 	bl	8005b24 <TIM_OC5_SetConfig>
      break;
 8005272:	e00c      	b.n	800528e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	0011      	movs	r1, r2
 800527c:	0018      	movs	r0, r3
 800527e:	f000 fcab 	bl	8005bd8 <TIM_OC6_SetConfig>
      break;
 8005282:	e004      	b.n	800528e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005284:	2317      	movs	r3, #23
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
      break;
 800528c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	223c      	movs	r2, #60	@ 0x3c
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]

  return status;
 8005296:	2317      	movs	r3, #23
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	781b      	ldrb	r3, [r3, #0]
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b006      	add	sp, #24
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	08007518 	.word	0x08007518

080052a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b4:	2317      	movs	r3, #23
 80052b6:	18fb      	adds	r3, r7, r3
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	223c      	movs	r2, #60	@ 0x3c
 80052c0:	5c9b      	ldrb	r3, [r3, r2]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e0e5      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	223c      	movs	r2, #60	@ 0x3c
 80052ce:	2101      	movs	r1, #1
 80052d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b14      	cmp	r3, #20
 80052d6:	d900      	bls.n	80052da <HAL_TIM_PWM_ConfigChannel+0x32>
 80052d8:	e0d1      	b.n	800547e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	009a      	lsls	r2, r3, #2
 80052de:	4b70      	ldr	r3, [pc, #448]	@ (80054a0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80052e0:	18d3      	adds	r3, r2, r3
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	0011      	movs	r1, r2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f000 fa34 	bl	800575c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2108      	movs	r1, #8
 8005300:	430a      	orrs	r2, r1
 8005302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2104      	movs	r1, #4
 8005310:	438a      	bics	r2, r1
 8005312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6999      	ldr	r1, [r3, #24]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691a      	ldr	r2, [r3, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	619a      	str	r2, [r3, #24]
      break;
 8005326:	e0af      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	0011      	movs	r1, r2
 8005330:	0018      	movs	r0, r3
 8005332:	f000 fa93 	bl	800585c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2180      	movs	r1, #128	@ 0x80
 8005342:	0109      	lsls	r1, r1, #4
 8005344:	430a      	orrs	r2, r1
 8005346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4954      	ldr	r1, [pc, #336]	@ (80054a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005354:	400a      	ands	r2, r1
 8005356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6999      	ldr	r1, [r3, #24]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	619a      	str	r2, [r3, #24]
      break;
 800536c:	e08c      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	0011      	movs	r1, r2
 8005376:	0018      	movs	r0, r3
 8005378:	f000 faee 	bl	8005958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69da      	ldr	r2, [r3, #28]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2108      	movs	r1, #8
 8005388:	430a      	orrs	r2, r1
 800538a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2104      	movs	r1, #4
 8005398:	438a      	bics	r2, r1
 800539a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69d9      	ldr	r1, [r3, #28]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	61da      	str	r2, [r3, #28]
      break;
 80053ae:	e06b      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	0011      	movs	r1, r2
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 fb4f 	bl	8005a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2180      	movs	r1, #128	@ 0x80
 80053ca:	0109      	lsls	r1, r1, #4
 80053cc:	430a      	orrs	r2, r1
 80053ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4932      	ldr	r1, [pc, #200]	@ (80054a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053dc:	400a      	ands	r2, r1
 80053de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69d9      	ldr	r1, [r3, #28]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	61da      	str	r2, [r3, #28]
      break;
 80053f4:	e048      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	0011      	movs	r1, r2
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 fb90 	bl	8005b24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2108      	movs	r1, #8
 8005410:	430a      	orrs	r2, r1
 8005412:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2104      	movs	r1, #4
 8005420:	438a      	bics	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005436:	e027      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	0011      	movs	r1, r2
 8005440:	0018      	movs	r0, r3
 8005442:	f000 fbc9 	bl	8005bd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2180      	movs	r1, #128	@ 0x80
 8005452:	0109      	lsls	r1, r1, #4
 8005454:	430a      	orrs	r2, r1
 8005456:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4910      	ldr	r1, [pc, #64]	@ (80054a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005464:	400a      	ands	r2, r1
 8005466:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	021a      	lsls	r2, r3, #8
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800547c:	e004      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800547e:	2317      	movs	r3, #23
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
      break;
 8005486:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	223c      	movs	r2, #60	@ 0x3c
 800548c:	2100      	movs	r1, #0
 800548e:	5499      	strb	r1, [r3, r2]

  return status;
 8005490:	2317      	movs	r3, #23
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	781b      	ldrb	r3, [r3, #0]
}
 8005496:	0018      	movs	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	b006      	add	sp, #24
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	0800756c 	.word	0x0800756c
 80054a4:	fffffbff 	.word	0xfffffbff

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	230f      	movs	r3, #15
 80054b4:	18fb      	adds	r3, r7, r3
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	223c      	movs	r2, #60	@ 0x3c
 80054be:	5c9b      	ldrb	r3, [r3, r2]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_ConfigClockSource+0x20>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e0bc      	b.n	8005642 <HAL_TIM_ConfigClockSource+0x19a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	223c      	movs	r2, #60	@ 0x3c
 80054cc:	2101      	movs	r1, #1
 80054ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	223d      	movs	r2, #61	@ 0x3d
 80054d4:	2102      	movs	r1, #2
 80054d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4a5a      	ldr	r2, [pc, #360]	@ (800564c <HAL_TIM_ConfigClockSource+0x1a4>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a59      	ldr	r2, [pc, #356]	@ (8005650 <HAL_TIM_ConfigClockSource+0x1a8>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2280      	movs	r2, #128	@ 0x80
 80054fe:	0192      	lsls	r2, r2, #6
 8005500:	4293      	cmp	r3, r2
 8005502:	d040      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0xde>
 8005504:	2280      	movs	r2, #128	@ 0x80
 8005506:	0192      	lsls	r2, r2, #6
 8005508:	4293      	cmp	r3, r2
 800550a:	d900      	bls.n	800550e <HAL_TIM_ConfigClockSource+0x66>
 800550c:	e088      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800550e:	2280      	movs	r2, #128	@ 0x80
 8005510:	0152      	lsls	r2, r2, #5
 8005512:	4293      	cmp	r3, r2
 8005514:	d100      	bne.n	8005518 <HAL_TIM_ConfigClockSource+0x70>
 8005516:	e088      	b.n	800562a <HAL_TIM_ConfigClockSource+0x182>
 8005518:	2280      	movs	r2, #128	@ 0x80
 800551a:	0152      	lsls	r2, r2, #5
 800551c:	4293      	cmp	r3, r2
 800551e:	d900      	bls.n	8005522 <HAL_TIM_ConfigClockSource+0x7a>
 8005520:	e07e      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005522:	2b70      	cmp	r3, #112	@ 0x70
 8005524:	d018      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0xb0>
 8005526:	d900      	bls.n	800552a <HAL_TIM_ConfigClockSource+0x82>
 8005528:	e07a      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800552a:	2b60      	cmp	r3, #96	@ 0x60
 800552c:	d04f      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x126>
 800552e:	d900      	bls.n	8005532 <HAL_TIM_ConfigClockSource+0x8a>
 8005530:	e076      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005532:	2b50      	cmp	r3, #80	@ 0x50
 8005534:	d03b      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x106>
 8005536:	d900      	bls.n	800553a <HAL_TIM_ConfigClockSource+0x92>
 8005538:	e072      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d057      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x146>
 800553e:	d900      	bls.n	8005542 <HAL_TIM_ConfigClockSource+0x9a>
 8005540:	e06e      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005542:	2b30      	cmp	r3, #48	@ 0x30
 8005544:	d063      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 8005546:	d86b      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 8005548:	2b20      	cmp	r3, #32
 800554a:	d060      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 800554c:	d868      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d05d      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 8005552:	2b10      	cmp	r3, #16
 8005554:	d05b      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x166>
 8005556:	e063      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	f000 fc10 	bl	8005d8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2277      	movs	r2, #119	@ 0x77
 8005578:	4313      	orrs	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
      break;
 8005584:	e052      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005596:	f000 fbf9 	bl	8005d8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2180      	movs	r1, #128	@ 0x80
 80055a6:	01c9      	lsls	r1, r1, #7
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e03e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	001a      	movs	r2, r3
 80055bc:	f000 fb6a 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2150      	movs	r1, #80	@ 0x50
 80055c6:	0018      	movs	r0, r3
 80055c8:	f000 fbc4 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e02e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055da:	001a      	movs	r2, r3
 80055dc:	f000 fb88 	bl	8005cf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2160      	movs	r1, #96	@ 0x60
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 fbb4 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e01e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fa:	001a      	movs	r2, r3
 80055fc:	f000 fb4a 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2140      	movs	r1, #64	@ 0x40
 8005606:	0018      	movs	r0, r3
 8005608:	f000 fba4 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 800560c:	e00e      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	0019      	movs	r1, r3
 8005618:	0010      	movs	r0, r2
 800561a:	f000 fb9b 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 800561e:	e005      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005620:	230f      	movs	r3, #15
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
      break;
 8005628:	e000      	b.n	800562c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800562a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	223d      	movs	r2, #61	@ 0x3d
 8005630:	2101      	movs	r1, #1
 8005632:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	223c      	movs	r2, #60	@ 0x3c
 8005638:	2100      	movs	r1, #0
 800563a:	5499      	strb	r1, [r3, r2]

  return status;
 800563c:	230f      	movs	r3, #15
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	781b      	ldrb	r3, [r3, #0]
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b004      	add	sp, #16
 8005648:	bd80      	pop	{r7, pc}
 800564a:	46c0      	nop			@ (mov r8, r8)
 800564c:	ffceff88 	.word	0xffceff88
 8005650:	ffff00ff 	.word	0xffff00ff

08005654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a37      	ldr	r2, [pc, #220]	@ (8005744 <TIM_Base_SetConfig+0xf0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d008      	beq.n	800567e <TIM_Base_SetConfig+0x2a>
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	2380      	movs	r3, #128	@ 0x80
 8005670:	05db      	lsls	r3, r3, #23
 8005672:	429a      	cmp	r2, r3
 8005674:	d003      	beq.n	800567e <TIM_Base_SetConfig+0x2a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a33      	ldr	r2, [pc, #204]	@ (8005748 <TIM_Base_SetConfig+0xf4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d108      	bne.n	8005690 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2270      	movs	r2, #112	@ 0x70
 8005682:	4393      	bics	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <TIM_Base_SetConfig+0xf0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d014      	beq.n	80056c2 <TIM_Base_SetConfig+0x6e>
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	2380      	movs	r3, #128	@ 0x80
 800569c:	05db      	lsls	r3, r3, #23
 800569e:	429a      	cmp	r2, r3
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0x6e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a28      	ldr	r2, [pc, #160]	@ (8005748 <TIM_Base_SetConfig+0xf4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0x6e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a27      	ldr	r2, [pc, #156]	@ (800574c <TIM_Base_SetConfig+0xf8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0x6e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a26      	ldr	r2, [pc, #152]	@ (8005750 <TIM_Base_SetConfig+0xfc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0x6e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a25      	ldr	r2, [pc, #148]	@ (8005754 <TIM_Base_SetConfig+0x100>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a24      	ldr	r2, [pc, #144]	@ (8005758 <TIM_Base_SetConfig+0x104>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2280      	movs	r2, #128	@ 0x80
 80056d8:	4393      	bics	r3, r2
 80056da:	001a      	movs	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a11      	ldr	r2, [pc, #68]	@ (8005744 <TIM_Base_SetConfig+0xf0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0xbe>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <TIM_Base_SetConfig+0xfc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0xbe>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a11      	ldr	r2, [pc, #68]	@ (8005754 <TIM_Base_SetConfig+0x100>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d103      	bne.n	800571a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2201      	movs	r2, #1
 8005726:	4013      	ands	r3, r2
 8005728:	2b01      	cmp	r3, #1
 800572a:	d106      	bne.n	800573a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2201      	movs	r2, #1
 8005732:	4393      	bics	r3, r2
 8005734:	001a      	movs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	611a      	str	r2, [r3, #16]
  }
}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	46bd      	mov	sp, r7
 800573e:	b004      	add	sp, #16
 8005740:	bd80      	pop	{r7, pc}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40000400 	.word	0x40000400
 800574c:	40002000 	.word	0x40002000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	fffffcff 	.word	0xfffffcff

0800575c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	2201      	movs	r2, #1
 8005772:	4393      	bics	r3, r2
 8005774:	001a      	movs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4a2e      	ldr	r2, [pc, #184]	@ (8005844 <TIM_OC1_SetConfig+0xe8>)
 800578a:	4013      	ands	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2203      	movs	r2, #3
 8005792:	4393      	bics	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2202      	movs	r2, #2
 80057a4:	4393      	bics	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a24      	ldr	r2, [pc, #144]	@ (8005848 <TIM_OC1_SetConfig+0xec>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_OC1_SetConfig+0x6e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a23      	ldr	r2, [pc, #140]	@ (800584c <TIM_OC1_SetConfig+0xf0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_OC1_SetConfig+0x6e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a22      	ldr	r2, [pc, #136]	@ (8005850 <TIM_OC1_SetConfig+0xf4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d10c      	bne.n	80057e4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2208      	movs	r2, #8
 80057ce:	4393      	bics	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2204      	movs	r2, #4
 80057e0:	4393      	bics	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a18      	ldr	r2, [pc, #96]	@ (8005848 <TIM_OC1_SetConfig+0xec>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d007      	beq.n	80057fc <TIM_OC1_SetConfig+0xa0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a17      	ldr	r2, [pc, #92]	@ (800584c <TIM_OC1_SetConfig+0xf0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_OC1_SetConfig+0xa0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a16      	ldr	r2, [pc, #88]	@ (8005850 <TIM_OC1_SetConfig+0xf4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d111      	bne.n	8005820 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <TIM_OC1_SetConfig+0xf8>)
 8005800:	4013      	ands	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4a14      	ldr	r2, [pc, #80]	@ (8005858 <TIM_OC1_SetConfig+0xfc>)
 8005808:	4013      	ands	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	b006      	add	sp, #24
 8005840:	bd80      	pop	{r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	fffeff8f 	.word	0xfffeff8f
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40014400 	.word	0x40014400
 8005850:	40014800 	.word	0x40014800
 8005854:	fffffeff 	.word	0xfffffeff
 8005858:	fffffdff 	.word	0xfffffdff

0800585c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	2210      	movs	r2, #16
 8005872:	4393      	bics	r3, r2
 8005874:	001a      	movs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a2c      	ldr	r2, [pc, #176]	@ (800593c <TIM_OC2_SetConfig+0xe0>)
 800588a:	4013      	ands	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a2b      	ldr	r2, [pc, #172]	@ (8005940 <TIM_OC2_SetConfig+0xe4>)
 8005892:	4013      	ands	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2220      	movs	r2, #32
 80058a6:	4393      	bics	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a22      	ldr	r2, [pc, #136]	@ (8005944 <TIM_OC2_SetConfig+0xe8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d10d      	bne.n	80058da <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2280      	movs	r2, #128	@ 0x80
 80058c2:	4393      	bics	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2240      	movs	r2, #64	@ 0x40
 80058d6:	4393      	bics	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a19      	ldr	r2, [pc, #100]	@ (8005944 <TIM_OC2_SetConfig+0xe8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d007      	beq.n	80058f2 <TIM_OC2_SetConfig+0x96>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a18      	ldr	r2, [pc, #96]	@ (8005948 <TIM_OC2_SetConfig+0xec>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d003      	beq.n	80058f2 <TIM_OC2_SetConfig+0x96>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a17      	ldr	r2, [pc, #92]	@ (800594c <TIM_OC2_SetConfig+0xf0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d113      	bne.n	800591a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4a16      	ldr	r2, [pc, #88]	@ (8005950 <TIM_OC2_SetConfig+0xf4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4a15      	ldr	r2, [pc, #84]	@ (8005954 <TIM_OC2_SetConfig+0xf8>)
 80058fe:	4013      	ands	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	46c0      	nop			@ (mov r8, r8)
 8005936:	46bd      	mov	sp, r7
 8005938:	b006      	add	sp, #24
 800593a:	bd80      	pop	{r7, pc}
 800593c:	feff8fff 	.word	0xfeff8fff
 8005940:	fffffcff 	.word	0xfffffcff
 8005944:	40012c00 	.word	0x40012c00
 8005948:	40014400 	.word	0x40014400
 800594c:	40014800 	.word	0x40014800
 8005950:	fffffbff 	.word	0xfffffbff
 8005954:	fffff7ff 	.word	0xfffff7ff

08005958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
 8005966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4a31      	ldr	r2, [pc, #196]	@ (8005a34 <TIM_OC3_SetConfig+0xdc>)
 800596e:	401a      	ands	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4a2d      	ldr	r2, [pc, #180]	@ (8005a38 <TIM_OC3_SetConfig+0xe0>)
 8005984:	4013      	ands	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2203      	movs	r2, #3
 800598c:	4393      	bics	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4a27      	ldr	r2, [pc, #156]	@ (8005a3c <TIM_OC3_SetConfig+0xe4>)
 800599e:	4013      	ands	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a23      	ldr	r2, [pc, #140]	@ (8005a40 <TIM_OC3_SetConfig+0xe8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10d      	bne.n	80059d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	4a22      	ldr	r2, [pc, #136]	@ (8005a44 <TIM_OC3_SetConfig+0xec>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005a48 <TIM_OC3_SetConfig+0xf0>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a40 <TIM_OC3_SetConfig+0xe8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_OC3_SetConfig+0x92>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a4c <TIM_OC3_SetConfig+0xf4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_OC3_SetConfig+0x92>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <TIM_OC3_SetConfig+0xf8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d113      	bne.n	8005a12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <TIM_OC3_SetConfig+0xfc>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <TIM_OC3_SetConfig+0x100>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	621a      	str	r2, [r3, #32]
}
 8005a2c:	46c0      	nop			@ (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b006      	add	sp, #24
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	fffffeff 	.word	0xfffffeff
 8005a38:	fffeff8f 	.word	0xfffeff8f
 8005a3c:	fffffdff 	.word	0xfffffdff
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	fffff7ff 	.word	0xfffff7ff
 8005a48:	fffffbff 	.word	0xfffffbff
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	ffffefff 	.word	0xffffefff
 8005a58:	ffffdfff 	.word	0xffffdfff

08005a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	4a24      	ldr	r2, [pc, #144]	@ (8005b04 <TIM_OC4_SetConfig+0xa8>)
 8005a72:	401a      	ands	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4a20      	ldr	r2, [pc, #128]	@ (8005b08 <TIM_OC4_SetConfig+0xac>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b0c <TIM_OC4_SetConfig+0xb0>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b10 <TIM_OC4_SetConfig+0xb4>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	031b      	lsls	r3, r3, #12
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a17      	ldr	r2, [pc, #92]	@ (8005b14 <TIM_OC4_SetConfig+0xb8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d007      	beq.n	8005acc <TIM_OC4_SetConfig+0x70>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a16      	ldr	r2, [pc, #88]	@ (8005b18 <TIM_OC4_SetConfig+0xbc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC4_SetConfig+0x70>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a15      	ldr	r2, [pc, #84]	@ (8005b1c <TIM_OC4_SetConfig+0xc0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d109      	bne.n	8005ae0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <TIM_OC4_SetConfig+0xc4>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b006      	add	sp, #24
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	ffffefff 	.word	0xffffefff
 8005b08:	feff8fff 	.word	0xfeff8fff
 8005b0c:	fffffcff 	.word	0xfffffcff
 8005b10:	ffffdfff 	.word	0xffffdfff
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800
 8005b20:	ffffbfff 	.word	0xffffbfff

08005b24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	4a21      	ldr	r2, [pc, #132]	@ (8005bc0 <TIM_OC5_SetConfig+0x9c>)
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc4 <TIM_OC5_SetConfig+0xa0>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4a19      	ldr	r2, [pc, #100]	@ (8005bc8 <TIM_OC5_SetConfig+0xa4>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	041b      	lsls	r3, r3, #16
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <TIM_OC5_SetConfig+0xa8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d007      	beq.n	8005b8a <TIM_OC5_SetConfig+0x66>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a14      	ldr	r2, [pc, #80]	@ (8005bd0 <TIM_OC5_SetConfig+0xac>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC5_SetConfig+0x66>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a13      	ldr	r2, [pc, #76]	@ (8005bd4 <TIM_OC5_SetConfig+0xb0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d109      	bne.n	8005b9e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc0 <TIM_OC5_SetConfig+0x9c>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	621a      	str	r2, [r3, #32]
}
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b006      	add	sp, #24
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	fffeffff 	.word	0xfffeffff
 8005bc4:	fffeff8f 	.word	0xfffeff8f
 8005bc8:	fffdffff 	.word	0xfffdffff
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40014400 	.word	0x40014400
 8005bd4:	40014800 	.word	0x40014800

08005bd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	4a22      	ldr	r2, [pc, #136]	@ (8005c78 <TIM_OC6_SetConfig+0xa0>)
 8005bee:	401a      	ands	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a1e      	ldr	r2, [pc, #120]	@ (8005c7c <TIM_OC6_SetConfig+0xa4>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <TIM_OC6_SetConfig+0xa8>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	051b      	lsls	r3, r3, #20
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a16      	ldr	r2, [pc, #88]	@ (8005c84 <TIM_OC6_SetConfig+0xac>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_OC6_SetConfig+0x68>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a15      	ldr	r2, [pc, #84]	@ (8005c88 <TIM_OC6_SetConfig+0xb0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_OC6_SetConfig+0x68>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a14      	ldr	r2, [pc, #80]	@ (8005c8c <TIM_OC6_SetConfig+0xb4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d109      	bne.n	8005c54 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	4a13      	ldr	r2, [pc, #76]	@ (8005c90 <TIM_OC6_SetConfig+0xb8>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	46c0      	nop			@ (mov r8, r8)
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b006      	add	sp, #24
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	46c0      	nop			@ (mov r8, r8)
 8005c78:	ffefffff 	.word	0xffefffff
 8005c7c:	feff8fff 	.word	0xfeff8fff
 8005c80:	ffdfffff 	.word	0xffdfffff
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800
 8005c90:	fffbffff 	.word	0xfffbffff

08005c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	2201      	movs	r2, #1
 8005cac:	4393      	bics	r3, r2
 8005cae:	001a      	movs	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	22f0      	movs	r2, #240	@ 0xf0
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	220a      	movs	r2, #10
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b006      	add	sp, #24
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	2210      	movs	r2, #16
 8005d08:	4393      	bics	r3, r2
 8005d0a:	001a      	movs	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4a0d      	ldr	r2, [pc, #52]	@ (8005d50 <TIM_TI2_ConfigInputStage+0x60>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	22a0      	movs	r2, #160	@ 0xa0
 8005d2c:	4393      	bics	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b006      	add	sp, #24
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	ffff0fff 	.word	0xffff0fff

08005d54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a08      	ldr	r2, [pc, #32]	@ (8005d88 <TIM_ITRx_SetConfig+0x34>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	2207      	movs	r2, #7
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	609a      	str	r2, [r3, #8]
}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b004      	add	sp, #16
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	ffcfff8f 	.word	0xffcfff8f

08005d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4a09      	ldr	r2, [pc, #36]	@ (8005dc8 <TIM_ETR_SetConfig+0x3c>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	021a      	lsls	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b006      	add	sp, #24
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	ffff00ff 	.word	0xffff00ff

08005dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	221f      	movs	r2, #31
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2201      	movs	r2, #1
 8005de0:	409a      	lsls	r2, r3
 8005de2:	0013      	movs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	43d2      	mvns	r2, r2
 8005dee:	401a      	ands	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1a      	ldr	r2, [r3, #32]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	211f      	movs	r1, #31
 8005dfc:	400b      	ands	r3, r1
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	4099      	lsls	r1, r3
 8005e02:	000b      	movs	r3, r1
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b006      	add	sp, #24
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	223c      	movs	r2, #60	@ 0x3c
 8005e22:	5c9b      	ldrb	r3, [r3, r2]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e050      	b.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	223c      	movs	r2, #60	@ 0x3c
 8005e30:	2101      	movs	r1, #1
 8005e32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	223d      	movs	r2, #61	@ 0x3d
 8005e38:	2102      	movs	r1, #2
 8005e3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a21      	ldr	r2, [pc, #132]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d108      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a20      	ldr	r2, [pc, #128]	@ (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2270      	movs	r2, #112	@ 0x70
 8005e6c:	4393      	bics	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a14      	ldr	r2, [pc, #80]	@ (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	2380      	movs	r3, #128	@ 0x80
 8005e92:	05db      	lsls	r3, r3, #23
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d004      	beq.n	8005ea2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a10      	ldr	r2, [pc, #64]	@ (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10c      	bne.n	8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2280      	movs	r2, #128	@ 0x80
 8005ea6:	4393      	bics	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	223d      	movs	r2, #61	@ 0x3d
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	223c      	movs	r2, #60	@ 0x3c
 8005ec8:	2100      	movs	r1, #0
 8005eca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b004      	add	sp, #16
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	40012c00 	.word	0x40012c00
 8005edc:	ff0fffff 	.word	0xff0fffff
 8005ee0:	40000400 	.word	0x40000400

08005ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	223c      	movs	r2, #60	@ 0x3c
 8005ef6:	5c9b      	ldrb	r3, [r3, r2]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e06f      	b.n	8005fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	223c      	movs	r2, #60	@ 0x3c
 8005f04:	2101      	movs	r1, #1
 8005f06:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	22ff      	movs	r2, #255	@ 0xff
 8005f0c:	4393      	bics	r3, r2
 8005f0e:	001a      	movs	r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4a33      	ldr	r2, [pc, #204]	@ (8005fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005f1c:	401a      	ands	r2, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4a30      	ldr	r2, [pc, #192]	@ (8005fec <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a2e      	ldr	r2, [pc, #184]	@ (8005ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005f38:	401a      	ands	r2, r3
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005f46:	401a      	ands	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a29      	ldr	r2, [pc, #164]	@ (8005ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005f54:	401a      	ands	r2, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005f62:	401a      	ands	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a24      	ldr	r2, [pc, #144]	@ (8006000 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005f70:	401a      	ands	r2, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	041b      	lsls	r3, r3, #16
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a21      	ldr	r2, [pc, #132]	@ (8006004 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005f80:	401a      	ands	r2, r3
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006008 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d11c      	bne.n	8005fce <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a1d      	ldr	r2, [pc, #116]	@ (800600c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005f98:	401a      	ands	r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	051b      	lsls	r3, r3, #20
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8006010 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005fa8:	401a      	ands	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4a17      	ldr	r2, [pc, #92]	@ (8006014 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a15      	ldr	r2, [pc, #84]	@ (8006018 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005fc4:	401a      	ands	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	223c      	movs	r2, #60	@ 0x3c
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b004      	add	sp, #16
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	fffffcff 	.word	0xfffffcff
 8005fec:	fffffbff 	.word	0xfffffbff
 8005ff0:	fffff7ff 	.word	0xfffff7ff
 8005ff4:	ffffefff 	.word	0xffffefff
 8005ff8:	ffffdfff 	.word	0xffffdfff
 8005ffc:	ffffbfff 	.word	0xffffbfff
 8006000:	fff0ffff 	.word	0xfff0ffff
 8006004:	efffffff 	.word	0xefffffff
 8006008:	40012c00 	.word	0x40012c00
 800600c:	ff0fffff 	.word	0xff0fffff
 8006010:	feffffff 	.word	0xfeffffff
 8006014:	fdffffff 	.word	0xfdffffff
 8006018:	dfffffff 	.word	0xdfffffff

0800601c <srand>:
 800601c:	4b11      	ldr	r3, [pc, #68]	@ (8006064 <srand+0x48>)
 800601e:	b570      	push	{r4, r5, r6, lr}
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	0004      	movs	r4, r0
 8006024:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006026:	2b00      	cmp	r3, #0
 8006028:	d116      	bne.n	8006058 <srand+0x3c>
 800602a:	2018      	movs	r0, #24
 800602c:	f000 f984 	bl	8006338 <malloc>
 8006030:	1e02      	subs	r2, r0, #0
 8006032:	6328      	str	r0, [r5, #48]	@ 0x30
 8006034:	d104      	bne.n	8006040 <srand+0x24>
 8006036:	2146      	movs	r1, #70	@ 0x46
 8006038:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <srand+0x4c>)
 800603a:	480c      	ldr	r0, [pc, #48]	@ (800606c <srand+0x50>)
 800603c:	f000 f95e 	bl	80062fc <__assert_func>
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <srand+0x54>)
 8006042:	2100      	movs	r1, #0
 8006044:	6003      	str	r3, [r0, #0]
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <srand+0x58>)
 8006048:	6043      	str	r3, [r0, #4]
 800604a:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <srand+0x5c>)
 800604c:	6083      	str	r3, [r0, #8]
 800604e:	230b      	movs	r3, #11
 8006050:	8183      	strh	r3, [r0, #12]
 8006052:	2001      	movs	r0, #1
 8006054:	6110      	str	r0, [r2, #16]
 8006056:	6151      	str	r1, [r2, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800605c:	611c      	str	r4, [r3, #16]
 800605e:	615a      	str	r2, [r3, #20]
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	46c0      	nop			@ (mov r8, r8)
 8006064:	20000820 	.word	0x20000820
 8006068:	080075c0 	.word	0x080075c0
 800606c:	080075d7 	.word	0x080075d7
 8006070:	abcd330e 	.word	0xabcd330e
 8006074:	e66d1234 	.word	0xe66d1234
 8006078:	0005deec 	.word	0x0005deec

0800607c <rand>:
 800607c:	4b16      	ldr	r3, [pc, #88]	@ (80060d8 <rand+0x5c>)
 800607e:	b510      	push	{r4, lr}
 8006080:	681c      	ldr	r4, [r3, #0]
 8006082:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006084:	2b00      	cmp	r3, #0
 8006086:	d116      	bne.n	80060b6 <rand+0x3a>
 8006088:	2018      	movs	r0, #24
 800608a:	f000 f955 	bl	8006338 <malloc>
 800608e:	1e02      	subs	r2, r0, #0
 8006090:	6320      	str	r0, [r4, #48]	@ 0x30
 8006092:	d104      	bne.n	800609e <rand+0x22>
 8006094:	2152      	movs	r1, #82	@ 0x52
 8006096:	4b11      	ldr	r3, [pc, #68]	@ (80060dc <rand+0x60>)
 8006098:	4811      	ldr	r0, [pc, #68]	@ (80060e0 <rand+0x64>)
 800609a:	f000 f92f 	bl	80062fc <__assert_func>
 800609e:	4b11      	ldr	r3, [pc, #68]	@ (80060e4 <rand+0x68>)
 80060a0:	2100      	movs	r1, #0
 80060a2:	6003      	str	r3, [r0, #0]
 80060a4:	4b10      	ldr	r3, [pc, #64]	@ (80060e8 <rand+0x6c>)
 80060a6:	6043      	str	r3, [r0, #4]
 80060a8:	4b10      	ldr	r3, [pc, #64]	@ (80060ec <rand+0x70>)
 80060aa:	6083      	str	r3, [r0, #8]
 80060ac:	230b      	movs	r3, #11
 80060ae:	8183      	strh	r3, [r0, #12]
 80060b0:	2001      	movs	r0, #1
 80060b2:	6110      	str	r0, [r2, #16]
 80060b4:	6151      	str	r1, [r2, #20]
 80060b6:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80060b8:	4a0d      	ldr	r2, [pc, #52]	@ (80060f0 <rand+0x74>)
 80060ba:	6920      	ldr	r0, [r4, #16]
 80060bc:	6961      	ldr	r1, [r4, #20]
 80060be:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <rand+0x78>)
 80060c0:	f7fa f9a0 	bl	8000404 <__aeabi_lmul>
 80060c4:	2201      	movs	r2, #1
 80060c6:	2300      	movs	r3, #0
 80060c8:	1880      	adds	r0, r0, r2
 80060ca:	4159      	adcs	r1, r3
 80060cc:	6120      	str	r0, [r4, #16]
 80060ce:	6161      	str	r1, [r4, #20]
 80060d0:	0048      	lsls	r0, r1, #1
 80060d2:	0840      	lsrs	r0, r0, #1
 80060d4:	bd10      	pop	{r4, pc}
 80060d6:	46c0      	nop			@ (mov r8, r8)
 80060d8:	20000820 	.word	0x20000820
 80060dc:	080075c0 	.word	0x080075c0
 80060e0:	080075d7 	.word	0x080075d7
 80060e4:	abcd330e 	.word	0xabcd330e
 80060e8:	e66d1234 	.word	0xe66d1234
 80060ec:	0005deec 	.word	0x0005deec
 80060f0:	4c957f2d 	.word	0x4c957f2d
 80060f4:	5851f42d 	.word	0x5851f42d

080060f8 <std>:
 80060f8:	2300      	movs	r3, #0
 80060fa:	b510      	push	{r4, lr}
 80060fc:	0004      	movs	r4, r0
 80060fe:	6003      	str	r3, [r0, #0]
 8006100:	6043      	str	r3, [r0, #4]
 8006102:	6083      	str	r3, [r0, #8]
 8006104:	8181      	strh	r1, [r0, #12]
 8006106:	6643      	str	r3, [r0, #100]	@ 0x64
 8006108:	81c2      	strh	r2, [r0, #14]
 800610a:	6103      	str	r3, [r0, #16]
 800610c:	6143      	str	r3, [r0, #20]
 800610e:	6183      	str	r3, [r0, #24]
 8006110:	0019      	movs	r1, r3
 8006112:	2208      	movs	r2, #8
 8006114:	305c      	adds	r0, #92	@ 0x5c
 8006116:	f000 f8b3 	bl	8006280 <memset>
 800611a:	4b0b      	ldr	r3, [pc, #44]	@ (8006148 <std+0x50>)
 800611c:	6224      	str	r4, [r4, #32]
 800611e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006120:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <std+0x54>)
 8006122:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006124:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <std+0x58>)
 8006126:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006128:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <std+0x5c>)
 800612a:	6323      	str	r3, [r4, #48]	@ 0x30
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <std+0x60>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d005      	beq.n	800613e <std+0x46>
 8006132:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <std+0x64>)
 8006134:	429c      	cmp	r4, r3
 8006136:	d002      	beq.n	800613e <std+0x46>
 8006138:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <std+0x68>)
 800613a:	429c      	cmp	r4, r3
 800613c:	d103      	bne.n	8006146 <std+0x4e>
 800613e:	0020      	movs	r0, r4
 8006140:	3058      	adds	r0, #88	@ 0x58
 8006142:	f000 f8cf 	bl	80062e4 <__retarget_lock_init_recursive>
 8006146:	bd10      	pop	{r4, pc}
 8006148:	08006615 	.word	0x08006615
 800614c:	0800663d 	.word	0x0800663d
 8006150:	08006675 	.word	0x08006675
 8006154:	080066a1 	.word	0x080066a1
 8006158:	20000e60 	.word	0x20000e60
 800615c:	20000ec8 	.word	0x20000ec8
 8006160:	20000f30 	.word	0x20000f30

08006164 <stdio_exit_handler>:
 8006164:	b510      	push	{r4, lr}
 8006166:	4a03      	ldr	r2, [pc, #12]	@ (8006174 <stdio_exit_handler+0x10>)
 8006168:	4903      	ldr	r1, [pc, #12]	@ (8006178 <stdio_exit_handler+0x14>)
 800616a:	4804      	ldr	r0, [pc, #16]	@ (800617c <stdio_exit_handler+0x18>)
 800616c:	f000 f86c 	bl	8006248 <_fwalk_sglue>
 8006170:	bd10      	pop	{r4, pc}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	20000814 	.word	0x20000814
 8006178:	0800659d 	.word	0x0800659d
 800617c:	20000824 	.word	0x20000824

08006180 <cleanup_stdio>:
 8006180:	6841      	ldr	r1, [r0, #4]
 8006182:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <cleanup_stdio+0x30>)
 8006184:	b510      	push	{r4, lr}
 8006186:	0004      	movs	r4, r0
 8006188:	4299      	cmp	r1, r3
 800618a:	d001      	beq.n	8006190 <cleanup_stdio+0x10>
 800618c:	f000 fa06 	bl	800659c <_fflush_r>
 8006190:	68a1      	ldr	r1, [r4, #8]
 8006192:	4b08      	ldr	r3, [pc, #32]	@ (80061b4 <cleanup_stdio+0x34>)
 8006194:	4299      	cmp	r1, r3
 8006196:	d002      	beq.n	800619e <cleanup_stdio+0x1e>
 8006198:	0020      	movs	r0, r4
 800619a:	f000 f9ff 	bl	800659c <_fflush_r>
 800619e:	68e1      	ldr	r1, [r4, #12]
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <cleanup_stdio+0x38>)
 80061a2:	4299      	cmp	r1, r3
 80061a4:	d002      	beq.n	80061ac <cleanup_stdio+0x2c>
 80061a6:	0020      	movs	r0, r4
 80061a8:	f000 f9f8 	bl	800659c <_fflush_r>
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	46c0      	nop			@ (mov r8, r8)
 80061b0:	20000e60 	.word	0x20000e60
 80061b4:	20000ec8 	.word	0x20000ec8
 80061b8:	20000f30 	.word	0x20000f30

080061bc <global_stdio_init.part.0>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <global_stdio_init.part.0+0x28>)
 80061c0:	4a09      	ldr	r2, [pc, #36]	@ (80061e8 <global_stdio_init.part.0+0x2c>)
 80061c2:	2104      	movs	r1, #4
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	4809      	ldr	r0, [pc, #36]	@ (80061ec <global_stdio_init.part.0+0x30>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	f7ff ff95 	bl	80060f8 <std>
 80061ce:	2201      	movs	r2, #1
 80061d0:	2109      	movs	r1, #9
 80061d2:	4807      	ldr	r0, [pc, #28]	@ (80061f0 <global_stdio_init.part.0+0x34>)
 80061d4:	f7ff ff90 	bl	80060f8 <std>
 80061d8:	2202      	movs	r2, #2
 80061da:	2112      	movs	r1, #18
 80061dc:	4805      	ldr	r0, [pc, #20]	@ (80061f4 <global_stdio_init.part.0+0x38>)
 80061de:	f7ff ff8b 	bl	80060f8 <std>
 80061e2:	bd10      	pop	{r4, pc}
 80061e4:	20000f98 	.word	0x20000f98
 80061e8:	08006165 	.word	0x08006165
 80061ec:	20000e60 	.word	0x20000e60
 80061f0:	20000ec8 	.word	0x20000ec8
 80061f4:	20000f30 	.word	0x20000f30

080061f8 <__sfp_lock_acquire>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4802      	ldr	r0, [pc, #8]	@ (8006204 <__sfp_lock_acquire+0xc>)
 80061fc:	f000 f873 	bl	80062e6 <__retarget_lock_acquire_recursive>
 8006200:	bd10      	pop	{r4, pc}
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	20000f9d 	.word	0x20000f9d

08006208 <__sfp_lock_release>:
 8006208:	b510      	push	{r4, lr}
 800620a:	4802      	ldr	r0, [pc, #8]	@ (8006214 <__sfp_lock_release+0xc>)
 800620c:	f000 f86c 	bl	80062e8 <__retarget_lock_release_recursive>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	20000f9d 	.word	0x20000f9d

08006218 <__sinit>:
 8006218:	b510      	push	{r4, lr}
 800621a:	0004      	movs	r4, r0
 800621c:	f7ff ffec 	bl	80061f8 <__sfp_lock_acquire>
 8006220:	6a23      	ldr	r3, [r4, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <__sinit+0x14>
 8006226:	f7ff ffef 	bl	8006208 <__sfp_lock_release>
 800622a:	bd10      	pop	{r4, pc}
 800622c:	4b04      	ldr	r3, [pc, #16]	@ (8006240 <__sinit+0x28>)
 800622e:	6223      	str	r3, [r4, #32]
 8006230:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <__sinit+0x2c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f6      	bne.n	8006226 <__sinit+0xe>
 8006238:	f7ff ffc0 	bl	80061bc <global_stdio_init.part.0>
 800623c:	e7f3      	b.n	8006226 <__sinit+0xe>
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	08006181 	.word	0x08006181
 8006244:	20000f98 	.word	0x20000f98

08006248 <_fwalk_sglue>:
 8006248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800624a:	0014      	movs	r4, r2
 800624c:	2600      	movs	r6, #0
 800624e:	9000      	str	r0, [sp, #0]
 8006250:	9101      	str	r1, [sp, #4]
 8006252:	68a5      	ldr	r5, [r4, #8]
 8006254:	6867      	ldr	r7, [r4, #4]
 8006256:	3f01      	subs	r7, #1
 8006258:	d504      	bpl.n	8006264 <_fwalk_sglue+0x1c>
 800625a:	6824      	ldr	r4, [r4, #0]
 800625c:	2c00      	cmp	r4, #0
 800625e:	d1f8      	bne.n	8006252 <_fwalk_sglue+0xa>
 8006260:	0030      	movs	r0, r6
 8006262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006264:	89ab      	ldrh	r3, [r5, #12]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d908      	bls.n	800627c <_fwalk_sglue+0x34>
 800626a:	220e      	movs	r2, #14
 800626c:	5eab      	ldrsh	r3, [r5, r2]
 800626e:	3301      	adds	r3, #1
 8006270:	d004      	beq.n	800627c <_fwalk_sglue+0x34>
 8006272:	0029      	movs	r1, r5
 8006274:	9800      	ldr	r0, [sp, #0]
 8006276:	9b01      	ldr	r3, [sp, #4]
 8006278:	4798      	blx	r3
 800627a:	4306      	orrs	r6, r0
 800627c:	3568      	adds	r5, #104	@ 0x68
 800627e:	e7ea      	b.n	8006256 <_fwalk_sglue+0xe>

08006280 <memset>:
 8006280:	0003      	movs	r3, r0
 8006282:	1882      	adds	r2, r0, r2
 8006284:	4293      	cmp	r3, r2
 8006286:	d100      	bne.n	800628a <memset+0xa>
 8006288:	4770      	bx	lr
 800628a:	7019      	strb	r1, [r3, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	e7f9      	b.n	8006284 <memset+0x4>

08006290 <__errno>:
 8006290:	4b01      	ldr	r3, [pc, #4]	@ (8006298 <__errno+0x8>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	4770      	bx	lr
 8006296:	46c0      	nop			@ (mov r8, r8)
 8006298:	20000820 	.word	0x20000820

0800629c <__libc_init_array>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	2600      	movs	r6, #0
 80062a0:	4c0c      	ldr	r4, [pc, #48]	@ (80062d4 <__libc_init_array+0x38>)
 80062a2:	4d0d      	ldr	r5, [pc, #52]	@ (80062d8 <__libc_init_array+0x3c>)
 80062a4:	1b64      	subs	r4, r4, r5
 80062a6:	10a4      	asrs	r4, r4, #2
 80062a8:	42a6      	cmp	r6, r4
 80062aa:	d109      	bne.n	80062c0 <__libc_init_array+0x24>
 80062ac:	2600      	movs	r6, #0
 80062ae:	f000 ff07 	bl	80070c0 <_init>
 80062b2:	4c0a      	ldr	r4, [pc, #40]	@ (80062dc <__libc_init_array+0x40>)
 80062b4:	4d0a      	ldr	r5, [pc, #40]	@ (80062e0 <__libc_init_array+0x44>)
 80062b6:	1b64      	subs	r4, r4, r5
 80062b8:	10a4      	asrs	r4, r4, #2
 80062ba:	42a6      	cmp	r6, r4
 80062bc:	d105      	bne.n	80062ca <__libc_init_array+0x2e>
 80062be:	bd70      	pop	{r4, r5, r6, pc}
 80062c0:	00b3      	lsls	r3, r6, #2
 80062c2:	58eb      	ldr	r3, [r5, r3]
 80062c4:	4798      	blx	r3
 80062c6:	3601      	adds	r6, #1
 80062c8:	e7ee      	b.n	80062a8 <__libc_init_array+0xc>
 80062ca:	00b3      	lsls	r3, r6, #2
 80062cc:	58eb      	ldr	r3, [r5, r3]
 80062ce:	4798      	blx	r3
 80062d0:	3601      	adds	r6, #1
 80062d2:	e7f2      	b.n	80062ba <__libc_init_array+0x1e>
 80062d4:	080076a0 	.word	0x080076a0
 80062d8:	080076a0 	.word	0x080076a0
 80062dc:	080076a4 	.word	0x080076a4
 80062e0:	080076a0 	.word	0x080076a0

080062e4 <__retarget_lock_init_recursive>:
 80062e4:	4770      	bx	lr

080062e6 <__retarget_lock_acquire_recursive>:
 80062e6:	4770      	bx	lr

080062e8 <__retarget_lock_release_recursive>:
 80062e8:	4770      	bx	lr

080062ea <memcpy>:
 80062ea:	2300      	movs	r3, #0
 80062ec:	b510      	push	{r4, lr}
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d100      	bne.n	80062f4 <memcpy+0xa>
 80062f2:	bd10      	pop	{r4, pc}
 80062f4:	5ccc      	ldrb	r4, [r1, r3]
 80062f6:	54c4      	strb	r4, [r0, r3]
 80062f8:	3301      	adds	r3, #1
 80062fa:	e7f8      	b.n	80062ee <memcpy+0x4>

080062fc <__assert_func>:
 80062fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80062fe:	0014      	movs	r4, r2
 8006300:	001a      	movs	r2, r3
 8006302:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <__assert_func+0x2c>)
 8006304:	0005      	movs	r5, r0
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	000e      	movs	r6, r1
 800630a:	68d8      	ldr	r0, [r3, #12]
 800630c:	4b07      	ldr	r3, [pc, #28]	@ (800632c <__assert_func+0x30>)
 800630e:	2c00      	cmp	r4, #0
 8006310:	d101      	bne.n	8006316 <__assert_func+0x1a>
 8006312:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <__assert_func+0x34>)
 8006314:	001c      	movs	r4, r3
 8006316:	4907      	ldr	r1, [pc, #28]	@ (8006334 <__assert_func+0x38>)
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	9402      	str	r4, [sp, #8]
 800631c:	002b      	movs	r3, r5
 800631e:	9600      	str	r6, [sp, #0]
 8006320:	f000 f9c4 	bl	80066ac <fiprintf>
 8006324:	f000 fa32 	bl	800678c <abort>
 8006328:	20000820 	.word	0x20000820
 800632c:	0800762f 	.word	0x0800762f
 8006330:	0800766a 	.word	0x0800766a
 8006334:	0800763c 	.word	0x0800763c

08006338 <malloc>:
 8006338:	b510      	push	{r4, lr}
 800633a:	4b03      	ldr	r3, [pc, #12]	@ (8006348 <malloc+0x10>)
 800633c:	0001      	movs	r1, r0
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	f000 f826 	bl	8006390 <_malloc_r>
 8006344:	bd10      	pop	{r4, pc}
 8006346:	46c0      	nop			@ (mov r8, r8)
 8006348:	20000820 	.word	0x20000820

0800634c <sbrk_aligned>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4e0f      	ldr	r6, [pc, #60]	@ (800638c <sbrk_aligned+0x40>)
 8006350:	000d      	movs	r5, r1
 8006352:	6831      	ldr	r1, [r6, #0]
 8006354:	0004      	movs	r4, r0
 8006356:	2900      	cmp	r1, #0
 8006358:	d102      	bne.n	8006360 <sbrk_aligned+0x14>
 800635a:	f000 f9f1 	bl	8006740 <_sbrk_r>
 800635e:	6030      	str	r0, [r6, #0]
 8006360:	0029      	movs	r1, r5
 8006362:	0020      	movs	r0, r4
 8006364:	f000 f9ec 	bl	8006740 <_sbrk_r>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d103      	bne.n	8006374 <sbrk_aligned+0x28>
 800636c:	2501      	movs	r5, #1
 800636e:	426d      	negs	r5, r5
 8006370:	0028      	movs	r0, r5
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	2303      	movs	r3, #3
 8006376:	1cc5      	adds	r5, r0, #3
 8006378:	439d      	bics	r5, r3
 800637a:	42a8      	cmp	r0, r5
 800637c:	d0f8      	beq.n	8006370 <sbrk_aligned+0x24>
 800637e:	1a29      	subs	r1, r5, r0
 8006380:	0020      	movs	r0, r4
 8006382:	f000 f9dd 	bl	8006740 <_sbrk_r>
 8006386:	3001      	adds	r0, #1
 8006388:	d1f2      	bne.n	8006370 <sbrk_aligned+0x24>
 800638a:	e7ef      	b.n	800636c <sbrk_aligned+0x20>
 800638c:	20000fa0 	.word	0x20000fa0

08006390 <_malloc_r>:
 8006390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006392:	2203      	movs	r2, #3
 8006394:	1ccb      	adds	r3, r1, #3
 8006396:	4393      	bics	r3, r2
 8006398:	3308      	adds	r3, #8
 800639a:	0005      	movs	r5, r0
 800639c:	001f      	movs	r7, r3
 800639e:	2b0c      	cmp	r3, #12
 80063a0:	d234      	bcs.n	800640c <_malloc_r+0x7c>
 80063a2:	270c      	movs	r7, #12
 80063a4:	42b9      	cmp	r1, r7
 80063a6:	d833      	bhi.n	8006410 <_malloc_r+0x80>
 80063a8:	0028      	movs	r0, r5
 80063aa:	f000 f923 	bl	80065f4 <__malloc_lock>
 80063ae:	4e37      	ldr	r6, [pc, #220]	@ (800648c <_malloc_r+0xfc>)
 80063b0:	6833      	ldr	r3, [r6, #0]
 80063b2:	001c      	movs	r4, r3
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	d12f      	bne.n	8006418 <_malloc_r+0x88>
 80063b8:	0039      	movs	r1, r7
 80063ba:	0028      	movs	r0, r5
 80063bc:	f7ff ffc6 	bl	800634c <sbrk_aligned>
 80063c0:	0004      	movs	r4, r0
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	d15f      	bne.n	8006486 <_malloc_r+0xf6>
 80063c6:	6834      	ldr	r4, [r6, #0]
 80063c8:	9400      	str	r4, [sp, #0]
 80063ca:	9b00      	ldr	r3, [sp, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d14a      	bne.n	8006466 <_malloc_r+0xd6>
 80063d0:	2c00      	cmp	r4, #0
 80063d2:	d052      	beq.n	800647a <_malloc_r+0xea>
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	0028      	movs	r0, r5
 80063d8:	18e3      	adds	r3, r4, r3
 80063da:	9900      	ldr	r1, [sp, #0]
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	f000 f9af 	bl	8006740 <_sbrk_r>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	4283      	cmp	r3, r0
 80063e6:	d148      	bne.n	800647a <_malloc_r+0xea>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	0028      	movs	r0, r5
 80063ec:	1aff      	subs	r7, r7, r3
 80063ee:	0039      	movs	r1, r7
 80063f0:	f7ff ffac 	bl	800634c <sbrk_aligned>
 80063f4:	3001      	adds	r0, #1
 80063f6:	d040      	beq.n	800647a <_malloc_r+0xea>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	19db      	adds	r3, r3, r7
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	6833      	ldr	r3, [r6, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	2a00      	cmp	r2, #0
 8006404:	d133      	bne.n	800646e <_malloc_r+0xde>
 8006406:	9b00      	ldr	r3, [sp, #0]
 8006408:	6033      	str	r3, [r6, #0]
 800640a:	e019      	b.n	8006440 <_malloc_r+0xb0>
 800640c:	2b00      	cmp	r3, #0
 800640e:	dac9      	bge.n	80063a4 <_malloc_r+0x14>
 8006410:	230c      	movs	r3, #12
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	2000      	movs	r0, #0
 8006416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006418:	6821      	ldr	r1, [r4, #0]
 800641a:	1bc9      	subs	r1, r1, r7
 800641c:	d420      	bmi.n	8006460 <_malloc_r+0xd0>
 800641e:	290b      	cmp	r1, #11
 8006420:	d90a      	bls.n	8006438 <_malloc_r+0xa8>
 8006422:	19e2      	adds	r2, r4, r7
 8006424:	6027      	str	r7, [r4, #0]
 8006426:	42a3      	cmp	r3, r4
 8006428:	d104      	bne.n	8006434 <_malloc_r+0xa4>
 800642a:	6032      	str	r2, [r6, #0]
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	6011      	str	r1, [r2, #0]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	e005      	b.n	8006440 <_malloc_r+0xb0>
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	e7f9      	b.n	800642c <_malloc_r+0x9c>
 8006438:	6862      	ldr	r2, [r4, #4]
 800643a:	42a3      	cmp	r3, r4
 800643c:	d10e      	bne.n	800645c <_malloc_r+0xcc>
 800643e:	6032      	str	r2, [r6, #0]
 8006440:	0028      	movs	r0, r5
 8006442:	f000 f8df 	bl	8006604 <__malloc_unlock>
 8006446:	0020      	movs	r0, r4
 8006448:	2207      	movs	r2, #7
 800644a:	300b      	adds	r0, #11
 800644c:	1d23      	adds	r3, r4, #4
 800644e:	4390      	bics	r0, r2
 8006450:	1ac2      	subs	r2, r0, r3
 8006452:	4298      	cmp	r0, r3
 8006454:	d0df      	beq.n	8006416 <_malloc_r+0x86>
 8006456:	1a1b      	subs	r3, r3, r0
 8006458:	50a3      	str	r3, [r4, r2]
 800645a:	e7dc      	b.n	8006416 <_malloc_r+0x86>
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	e7ef      	b.n	8006440 <_malloc_r+0xb0>
 8006460:	0023      	movs	r3, r4
 8006462:	6864      	ldr	r4, [r4, #4]
 8006464:	e7a6      	b.n	80063b4 <_malloc_r+0x24>
 8006466:	9c00      	ldr	r4, [sp, #0]
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	e7ad      	b.n	80063ca <_malloc_r+0x3a>
 800646e:	001a      	movs	r2, r3
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	42a3      	cmp	r3, r4
 8006474:	d1fb      	bne.n	800646e <_malloc_r+0xde>
 8006476:	2300      	movs	r3, #0
 8006478:	e7da      	b.n	8006430 <_malloc_r+0xa0>
 800647a:	230c      	movs	r3, #12
 800647c:	0028      	movs	r0, r5
 800647e:	602b      	str	r3, [r5, #0]
 8006480:	f000 f8c0 	bl	8006604 <__malloc_unlock>
 8006484:	e7c6      	b.n	8006414 <_malloc_r+0x84>
 8006486:	6007      	str	r7, [r0, #0]
 8006488:	e7da      	b.n	8006440 <_malloc_r+0xb0>
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	20000fa4 	.word	0x20000fa4

08006490 <__sflush_r>:
 8006490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006492:	220c      	movs	r2, #12
 8006494:	5e8b      	ldrsh	r3, [r1, r2]
 8006496:	0005      	movs	r5, r0
 8006498:	000c      	movs	r4, r1
 800649a:	071a      	lsls	r2, r3, #28
 800649c:	d456      	bmi.n	800654c <__sflush_r+0xbc>
 800649e:	684a      	ldr	r2, [r1, #4]
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	dc02      	bgt.n	80064aa <__sflush_r+0x1a>
 80064a4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	dd4e      	ble.n	8006548 <__sflush_r+0xb8>
 80064aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80064ac:	2f00      	cmp	r7, #0
 80064ae:	d04b      	beq.n	8006548 <__sflush_r+0xb8>
 80064b0:	2200      	movs	r2, #0
 80064b2:	2080      	movs	r0, #128	@ 0x80
 80064b4:	682e      	ldr	r6, [r5, #0]
 80064b6:	602a      	str	r2, [r5, #0]
 80064b8:	001a      	movs	r2, r3
 80064ba:	0140      	lsls	r0, r0, #5
 80064bc:	6a21      	ldr	r1, [r4, #32]
 80064be:	4002      	ands	r2, r0
 80064c0:	4203      	tst	r3, r0
 80064c2:	d033      	beq.n	800652c <__sflush_r+0x9c>
 80064c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	075b      	lsls	r3, r3, #29
 80064ca:	d506      	bpl.n	80064da <__sflush_r+0x4a>
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <__sflush_r+0x4a>
 80064d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	2300      	movs	r3, #0
 80064dc:	0028      	movs	r0, r5
 80064de:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80064e0:	6a21      	ldr	r1, [r4, #32]
 80064e2:	47b8      	blx	r7
 80064e4:	89a2      	ldrh	r2, [r4, #12]
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d106      	bne.n	80064f8 <__sflush_r+0x68>
 80064ea:	6829      	ldr	r1, [r5, #0]
 80064ec:	291d      	cmp	r1, #29
 80064ee:	d846      	bhi.n	800657e <__sflush_r+0xee>
 80064f0:	4b29      	ldr	r3, [pc, #164]	@ (8006598 <__sflush_r+0x108>)
 80064f2:	410b      	asrs	r3, r1
 80064f4:	07db      	lsls	r3, r3, #31
 80064f6:	d442      	bmi.n	800657e <__sflush_r+0xee>
 80064f8:	2300      	movs	r3, #0
 80064fa:	6063      	str	r3, [r4, #4]
 80064fc:	6923      	ldr	r3, [r4, #16]
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	04d2      	lsls	r2, r2, #19
 8006502:	d505      	bpl.n	8006510 <__sflush_r+0x80>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <__sflush_r+0x7e>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d100      	bne.n	8006510 <__sflush_r+0x80>
 800650e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006512:	602e      	str	r6, [r5, #0]
 8006514:	2900      	cmp	r1, #0
 8006516:	d017      	beq.n	8006548 <__sflush_r+0xb8>
 8006518:	0023      	movs	r3, r4
 800651a:	3344      	adds	r3, #68	@ 0x44
 800651c:	4299      	cmp	r1, r3
 800651e:	d002      	beq.n	8006526 <__sflush_r+0x96>
 8006520:	0028      	movs	r0, r5
 8006522:	f000 f93b 	bl	800679c <_free_r>
 8006526:	2300      	movs	r3, #0
 8006528:	6363      	str	r3, [r4, #52]	@ 0x34
 800652a:	e00d      	b.n	8006548 <__sflush_r+0xb8>
 800652c:	2301      	movs	r3, #1
 800652e:	0028      	movs	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	0002      	movs	r2, r0
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d1c6      	bne.n	80064c6 <__sflush_r+0x36>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d0c3      	beq.n	80064c6 <__sflush_r+0x36>
 800653e:	2b1d      	cmp	r3, #29
 8006540:	d001      	beq.n	8006546 <__sflush_r+0xb6>
 8006542:	2b16      	cmp	r3, #22
 8006544:	d11a      	bne.n	800657c <__sflush_r+0xec>
 8006546:	602e      	str	r6, [r5, #0]
 8006548:	2000      	movs	r0, #0
 800654a:	e01e      	b.n	800658a <__sflush_r+0xfa>
 800654c:	690e      	ldr	r6, [r1, #16]
 800654e:	2e00      	cmp	r6, #0
 8006550:	d0fa      	beq.n	8006548 <__sflush_r+0xb8>
 8006552:	680f      	ldr	r7, [r1, #0]
 8006554:	600e      	str	r6, [r1, #0]
 8006556:	1bba      	subs	r2, r7, r6
 8006558:	9201      	str	r2, [sp, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	079b      	lsls	r3, r3, #30
 800655e:	d100      	bne.n	8006562 <__sflush_r+0xd2>
 8006560:	694a      	ldr	r2, [r1, #20]
 8006562:	60a2      	str	r2, [r4, #8]
 8006564:	9b01      	ldr	r3, [sp, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	ddee      	ble.n	8006548 <__sflush_r+0xb8>
 800656a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800656c:	0032      	movs	r2, r6
 800656e:	001f      	movs	r7, r3
 8006570:	0028      	movs	r0, r5
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	6a21      	ldr	r1, [r4, #32]
 8006576:	47b8      	blx	r7
 8006578:	2800      	cmp	r0, #0
 800657a:	dc07      	bgt.n	800658c <__sflush_r+0xfc>
 800657c:	89a2      	ldrh	r2, [r4, #12]
 800657e:	2340      	movs	r3, #64	@ 0x40
 8006580:	2001      	movs	r0, #1
 8006582:	4313      	orrs	r3, r2
 8006584:	b21b      	sxth	r3, r3
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	4240      	negs	r0, r0
 800658a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800658c:	9b01      	ldr	r3, [sp, #4]
 800658e:	1836      	adds	r6, r6, r0
 8006590:	1a1b      	subs	r3, r3, r0
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	e7e6      	b.n	8006564 <__sflush_r+0xd4>
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	dfbffffe 	.word	0xdfbffffe

0800659c <_fflush_r>:
 800659c:	690b      	ldr	r3, [r1, #16]
 800659e:	b570      	push	{r4, r5, r6, lr}
 80065a0:	0005      	movs	r5, r0
 80065a2:	000c      	movs	r4, r1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d102      	bne.n	80065ae <_fflush_r+0x12>
 80065a8:	2500      	movs	r5, #0
 80065aa:	0028      	movs	r0, r5
 80065ac:	bd70      	pop	{r4, r5, r6, pc}
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d004      	beq.n	80065bc <_fflush_r+0x20>
 80065b2:	6a03      	ldr	r3, [r0, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <_fflush_r+0x20>
 80065b8:	f7ff fe2e 	bl	8006218 <__sinit>
 80065bc:	220c      	movs	r2, #12
 80065be:	5ea3      	ldrsh	r3, [r4, r2]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0f1      	beq.n	80065a8 <_fflush_r+0xc>
 80065c4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065c6:	07d2      	lsls	r2, r2, #31
 80065c8:	d404      	bmi.n	80065d4 <_fflush_r+0x38>
 80065ca:	059b      	lsls	r3, r3, #22
 80065cc:	d402      	bmi.n	80065d4 <_fflush_r+0x38>
 80065ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d0:	f7ff fe89 	bl	80062e6 <__retarget_lock_acquire_recursive>
 80065d4:	0028      	movs	r0, r5
 80065d6:	0021      	movs	r1, r4
 80065d8:	f7ff ff5a 	bl	8006490 <__sflush_r>
 80065dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065de:	0005      	movs	r5, r0
 80065e0:	07db      	lsls	r3, r3, #31
 80065e2:	d4e2      	bmi.n	80065aa <_fflush_r+0xe>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	059b      	lsls	r3, r3, #22
 80065e8:	d4df      	bmi.n	80065aa <_fflush_r+0xe>
 80065ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ec:	f7ff fe7c 	bl	80062e8 <__retarget_lock_release_recursive>
 80065f0:	e7db      	b.n	80065aa <_fflush_r+0xe>
	...

080065f4 <__malloc_lock>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4802      	ldr	r0, [pc, #8]	@ (8006600 <__malloc_lock+0xc>)
 80065f8:	f7ff fe75 	bl	80062e6 <__retarget_lock_acquire_recursive>
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	46c0      	nop			@ (mov r8, r8)
 8006600:	20000f9c 	.word	0x20000f9c

08006604 <__malloc_unlock>:
 8006604:	b510      	push	{r4, lr}
 8006606:	4802      	ldr	r0, [pc, #8]	@ (8006610 <__malloc_unlock+0xc>)
 8006608:	f7ff fe6e 	bl	80062e8 <__retarget_lock_release_recursive>
 800660c:	bd10      	pop	{r4, pc}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	20000f9c 	.word	0x20000f9c

08006614 <__sread>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	000c      	movs	r4, r1
 8006618:	250e      	movs	r5, #14
 800661a:	5f49      	ldrsh	r1, [r1, r5]
 800661c:	f000 f87c 	bl	8006718 <_read_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	db03      	blt.n	800662c <__sread+0x18>
 8006624:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006626:	181b      	adds	r3, r3, r0
 8006628:	6563      	str	r3, [r4, #84]	@ 0x54
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	4a02      	ldr	r2, [pc, #8]	@ (8006638 <__sread+0x24>)
 8006630:	4013      	ands	r3, r2
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	e7f9      	b.n	800662a <__sread+0x16>
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	ffffefff 	.word	0xffffefff

0800663c <__swrite>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	001f      	movs	r7, r3
 8006640:	898b      	ldrh	r3, [r1, #12]
 8006642:	0005      	movs	r5, r0
 8006644:	000c      	movs	r4, r1
 8006646:	0016      	movs	r6, r2
 8006648:	05db      	lsls	r3, r3, #23
 800664a:	d505      	bpl.n	8006658 <__swrite+0x1c>
 800664c:	230e      	movs	r3, #14
 800664e:	5ec9      	ldrsh	r1, [r1, r3]
 8006650:	2200      	movs	r2, #0
 8006652:	2302      	movs	r3, #2
 8006654:	f000 f84c 	bl	80066f0 <_lseek_r>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	4a05      	ldr	r2, [pc, #20]	@ (8006670 <__swrite+0x34>)
 800665c:	0028      	movs	r0, r5
 800665e:	4013      	ands	r3, r2
 8006660:	81a3      	strh	r3, [r4, #12]
 8006662:	0032      	movs	r2, r6
 8006664:	230e      	movs	r3, #14
 8006666:	5ee1      	ldrsh	r1, [r4, r3]
 8006668:	003b      	movs	r3, r7
 800666a:	f000 f87b 	bl	8006764 <_write_r>
 800666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006670:	ffffefff 	.word	0xffffefff

08006674 <__sseek>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	000c      	movs	r4, r1
 8006678:	250e      	movs	r5, #14
 800667a:	5f49      	ldrsh	r1, [r1, r5]
 800667c:	f000 f838 	bl	80066f0 <_lseek_r>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	1c42      	adds	r2, r0, #1
 8006684:	d103      	bne.n	800668e <__sseek+0x1a>
 8006686:	4a05      	ldr	r2, [pc, #20]	@ (800669c <__sseek+0x28>)
 8006688:	4013      	ands	r3, r2
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	2280      	movs	r2, #128	@ 0x80
 8006690:	0152      	lsls	r2, r2, #5
 8006692:	4313      	orrs	r3, r2
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	6560      	str	r0, [r4, #84]	@ 0x54
 8006698:	e7f8      	b.n	800668c <__sseek+0x18>
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	ffffefff 	.word	0xffffefff

080066a0 <__sclose>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	230e      	movs	r3, #14
 80066a4:	5ec9      	ldrsh	r1, [r1, r3]
 80066a6:	f000 f811 	bl	80066cc <_close_r>
 80066aa:	bd10      	pop	{r4, pc}

080066ac <fiprintf>:
 80066ac:	b40e      	push	{r1, r2, r3}
 80066ae:	b517      	push	{r0, r1, r2, r4, lr}
 80066b0:	4c05      	ldr	r4, [pc, #20]	@ (80066c8 <fiprintf+0x1c>)
 80066b2:	ab05      	add	r3, sp, #20
 80066b4:	cb04      	ldmia	r3!, {r2}
 80066b6:	0001      	movs	r1, r0
 80066b8:	6820      	ldr	r0, [r4, #0]
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	f000 f8e0 	bl	8006880 <_vfiprintf_r>
 80066c0:	bc1e      	pop	{r1, r2, r3, r4}
 80066c2:	bc08      	pop	{r3}
 80066c4:	b003      	add	sp, #12
 80066c6:	4718      	bx	r3
 80066c8:	20000820 	.word	0x20000820

080066cc <_close_r>:
 80066cc:	2300      	movs	r3, #0
 80066ce:	b570      	push	{r4, r5, r6, lr}
 80066d0:	4d06      	ldr	r5, [pc, #24]	@ (80066ec <_close_r+0x20>)
 80066d2:	0004      	movs	r4, r0
 80066d4:	0008      	movs	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fb fe02 	bl	80022e0 <_close>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d103      	bne.n	80066e8 <_close_r+0x1c>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d000      	beq.n	80066e8 <_close_r+0x1c>
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	20000fa8 	.word	0x20000fa8

080066f0 <_lseek_r>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	0004      	movs	r4, r0
 80066f4:	0008      	movs	r0, r1
 80066f6:	0011      	movs	r1, r2
 80066f8:	001a      	movs	r2, r3
 80066fa:	2300      	movs	r3, #0
 80066fc:	4d05      	ldr	r5, [pc, #20]	@ (8006714 <_lseek_r+0x24>)
 80066fe:	602b      	str	r3, [r5, #0]
 8006700:	f7fb fe0f 	bl	8002322 <_lseek>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d103      	bne.n	8006710 <_lseek_r+0x20>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d000      	beq.n	8006710 <_lseek_r+0x20>
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	46c0      	nop			@ (mov r8, r8)
 8006714:	20000fa8 	.word	0x20000fa8

08006718 <_read_r>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	0004      	movs	r4, r0
 800671c:	0008      	movs	r0, r1
 800671e:	0011      	movs	r1, r2
 8006720:	001a      	movs	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	4d05      	ldr	r5, [pc, #20]	@ (800673c <_read_r+0x24>)
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	f7fb fda1 	bl	800226e <_read>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d103      	bne.n	8006738 <_read_r+0x20>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d000      	beq.n	8006738 <_read_r+0x20>
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	bd70      	pop	{r4, r5, r6, pc}
 800673a:	46c0      	nop			@ (mov r8, r8)
 800673c:	20000fa8 	.word	0x20000fa8

08006740 <_sbrk_r>:
 8006740:	2300      	movs	r3, #0
 8006742:	b570      	push	{r4, r5, r6, lr}
 8006744:	4d06      	ldr	r5, [pc, #24]	@ (8006760 <_sbrk_r+0x20>)
 8006746:	0004      	movs	r4, r0
 8006748:	0008      	movs	r0, r1
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	f7fb fdf4 	bl	8002338 <_sbrk>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d103      	bne.n	800675c <_sbrk_r+0x1c>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d000      	beq.n	800675c <_sbrk_r+0x1c>
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	bd70      	pop	{r4, r5, r6, pc}
 800675e:	46c0      	nop			@ (mov r8, r8)
 8006760:	20000fa8 	.word	0x20000fa8

08006764 <_write_r>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	0004      	movs	r4, r0
 8006768:	0008      	movs	r0, r1
 800676a:	0011      	movs	r1, r2
 800676c:	001a      	movs	r2, r3
 800676e:	2300      	movs	r3, #0
 8006770:	4d05      	ldr	r5, [pc, #20]	@ (8006788 <_write_r+0x24>)
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fb fd98 	bl	80022a8 <_write>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d103      	bne.n	8006784 <_write_r+0x20>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d000      	beq.n	8006784 <_write_r+0x20>
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	bd70      	pop	{r4, r5, r6, pc}
 8006786:	46c0      	nop			@ (mov r8, r8)
 8006788:	20000fa8 	.word	0x20000fa8

0800678c <abort>:
 800678c:	2006      	movs	r0, #6
 800678e:	b510      	push	{r4, lr}
 8006790:	f000 fc6a 	bl	8007068 <raise>
 8006794:	2001      	movs	r0, #1
 8006796:	f7fb fd5d 	bl	8002254 <_exit>
	...

0800679c <_free_r>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	0005      	movs	r5, r0
 80067a0:	1e0c      	subs	r4, r1, #0
 80067a2:	d010      	beq.n	80067c6 <_free_r+0x2a>
 80067a4:	3c04      	subs	r4, #4
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	da00      	bge.n	80067ae <_free_r+0x12>
 80067ac:	18e4      	adds	r4, r4, r3
 80067ae:	0028      	movs	r0, r5
 80067b0:	f7ff ff20 	bl	80065f4 <__malloc_lock>
 80067b4:	4a1d      	ldr	r2, [pc, #116]	@ (800682c <_free_r+0x90>)
 80067b6:	6813      	ldr	r3, [r2, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <_free_r+0x2c>
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	6014      	str	r4, [r2, #0]
 80067c0:	0028      	movs	r0, r5
 80067c2:	f7ff ff1f 	bl	8006604 <__malloc_unlock>
 80067c6:	bd70      	pop	{r4, r5, r6, pc}
 80067c8:	42a3      	cmp	r3, r4
 80067ca:	d908      	bls.n	80067de <_free_r+0x42>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	1821      	adds	r1, r4, r0
 80067d0:	428b      	cmp	r3, r1
 80067d2:	d1f3      	bne.n	80067bc <_free_r+0x20>
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	1809      	adds	r1, r1, r0
 80067da:	6021      	str	r1, [r4, #0]
 80067dc:	e7ee      	b.n	80067bc <_free_r+0x20>
 80067de:	001a      	movs	r2, r3
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <_free_r+0x4e>
 80067e6:	42a3      	cmp	r3, r4
 80067e8:	d9f9      	bls.n	80067de <_free_r+0x42>
 80067ea:	6811      	ldr	r1, [r2, #0]
 80067ec:	1850      	adds	r0, r2, r1
 80067ee:	42a0      	cmp	r0, r4
 80067f0:	d10b      	bne.n	800680a <_free_r+0x6e>
 80067f2:	6820      	ldr	r0, [r4, #0]
 80067f4:	1809      	adds	r1, r1, r0
 80067f6:	1850      	adds	r0, r2, r1
 80067f8:	6011      	str	r1, [r2, #0]
 80067fa:	4283      	cmp	r3, r0
 80067fc:	d1e0      	bne.n	80067c0 <_free_r+0x24>
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	1841      	adds	r1, r0, r1
 8006804:	6011      	str	r1, [r2, #0]
 8006806:	6053      	str	r3, [r2, #4]
 8006808:	e7da      	b.n	80067c0 <_free_r+0x24>
 800680a:	42a0      	cmp	r0, r4
 800680c:	d902      	bls.n	8006814 <_free_r+0x78>
 800680e:	230c      	movs	r3, #12
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	e7d5      	b.n	80067c0 <_free_r+0x24>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	1821      	adds	r1, r4, r0
 8006818:	428b      	cmp	r3, r1
 800681a:	d103      	bne.n	8006824 <_free_r+0x88>
 800681c:	6819      	ldr	r1, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	1809      	adds	r1, r1, r0
 8006822:	6021      	str	r1, [r4, #0]
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	6054      	str	r4, [r2, #4]
 8006828:	e7ca      	b.n	80067c0 <_free_r+0x24>
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	20000fa4 	.word	0x20000fa4

08006830 <__sfputc_r>:
 8006830:	6893      	ldr	r3, [r2, #8]
 8006832:	b510      	push	{r4, lr}
 8006834:	3b01      	subs	r3, #1
 8006836:	6093      	str	r3, [r2, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da04      	bge.n	8006846 <__sfputc_r+0x16>
 800683c:	6994      	ldr	r4, [r2, #24]
 800683e:	42a3      	cmp	r3, r4
 8006840:	db07      	blt.n	8006852 <__sfputc_r+0x22>
 8006842:	290a      	cmp	r1, #10
 8006844:	d005      	beq.n	8006852 <__sfputc_r+0x22>
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	1c58      	adds	r0, r3, #1
 800684a:	6010      	str	r0, [r2, #0]
 800684c:	7019      	strb	r1, [r3, #0]
 800684e:	0008      	movs	r0, r1
 8006850:	bd10      	pop	{r4, pc}
 8006852:	f000 faaf 	bl	8006db4 <__swbuf_r>
 8006856:	0001      	movs	r1, r0
 8006858:	e7f9      	b.n	800684e <__sfputc_r+0x1e>

0800685a <__sfputs_r>:
 800685a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685c:	0006      	movs	r6, r0
 800685e:	000f      	movs	r7, r1
 8006860:	0014      	movs	r4, r2
 8006862:	18d5      	adds	r5, r2, r3
 8006864:	42ac      	cmp	r4, r5
 8006866:	d101      	bne.n	800686c <__sfputs_r+0x12>
 8006868:	2000      	movs	r0, #0
 800686a:	e007      	b.n	800687c <__sfputs_r+0x22>
 800686c:	7821      	ldrb	r1, [r4, #0]
 800686e:	003a      	movs	r2, r7
 8006870:	0030      	movs	r0, r6
 8006872:	f7ff ffdd 	bl	8006830 <__sfputc_r>
 8006876:	3401      	adds	r4, #1
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d1f3      	bne.n	8006864 <__sfputs_r+0xa>
 800687c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006880 <_vfiprintf_r>:
 8006880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006882:	b0a1      	sub	sp, #132	@ 0x84
 8006884:	000f      	movs	r7, r1
 8006886:	0015      	movs	r5, r2
 8006888:	001e      	movs	r6, r3
 800688a:	9003      	str	r0, [sp, #12]
 800688c:	2800      	cmp	r0, #0
 800688e:	d004      	beq.n	800689a <_vfiprintf_r+0x1a>
 8006890:	6a03      	ldr	r3, [r0, #32]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <_vfiprintf_r+0x1a>
 8006896:	f7ff fcbf 	bl	8006218 <__sinit>
 800689a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800689c:	07db      	lsls	r3, r3, #31
 800689e:	d405      	bmi.n	80068ac <_vfiprintf_r+0x2c>
 80068a0:	89bb      	ldrh	r3, [r7, #12]
 80068a2:	059b      	lsls	r3, r3, #22
 80068a4:	d402      	bmi.n	80068ac <_vfiprintf_r+0x2c>
 80068a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80068a8:	f7ff fd1d 	bl	80062e6 <__retarget_lock_acquire_recursive>
 80068ac:	89bb      	ldrh	r3, [r7, #12]
 80068ae:	071b      	lsls	r3, r3, #28
 80068b0:	d502      	bpl.n	80068b8 <_vfiprintf_r+0x38>
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d113      	bne.n	80068e0 <_vfiprintf_r+0x60>
 80068b8:	0039      	movs	r1, r7
 80068ba:	9803      	ldr	r0, [sp, #12]
 80068bc:	f000 fabc 	bl	8006e38 <__swsetup_r>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d00d      	beq.n	80068e0 <_vfiprintf_r+0x60>
 80068c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068c6:	07db      	lsls	r3, r3, #31
 80068c8:	d503      	bpl.n	80068d2 <_vfiprintf_r+0x52>
 80068ca:	2001      	movs	r0, #1
 80068cc:	4240      	negs	r0, r0
 80068ce:	b021      	add	sp, #132	@ 0x84
 80068d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d2:	89bb      	ldrh	r3, [r7, #12]
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	d4f8      	bmi.n	80068ca <_vfiprintf_r+0x4a>
 80068d8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80068da:	f7ff fd05 	bl	80062e8 <__retarget_lock_release_recursive>
 80068de:	e7f4      	b.n	80068ca <_vfiprintf_r+0x4a>
 80068e0:	2300      	movs	r3, #0
 80068e2:	ac08      	add	r4, sp, #32
 80068e4:	6163      	str	r3, [r4, #20]
 80068e6:	3320      	adds	r3, #32
 80068e8:	7663      	strb	r3, [r4, #25]
 80068ea:	3310      	adds	r3, #16
 80068ec:	76a3      	strb	r3, [r4, #26]
 80068ee:	9607      	str	r6, [sp, #28]
 80068f0:	002e      	movs	r6, r5
 80068f2:	7833      	ldrb	r3, [r6, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <_vfiprintf_r+0x7c>
 80068f8:	2b25      	cmp	r3, #37	@ 0x25
 80068fa:	d148      	bne.n	800698e <_vfiprintf_r+0x10e>
 80068fc:	1b73      	subs	r3, r6, r5
 80068fe:	9305      	str	r3, [sp, #20]
 8006900:	42ae      	cmp	r6, r5
 8006902:	d00b      	beq.n	800691c <_vfiprintf_r+0x9c>
 8006904:	002a      	movs	r2, r5
 8006906:	0039      	movs	r1, r7
 8006908:	9803      	ldr	r0, [sp, #12]
 800690a:	f7ff ffa6 	bl	800685a <__sfputs_r>
 800690e:	3001      	adds	r0, #1
 8006910:	d100      	bne.n	8006914 <_vfiprintf_r+0x94>
 8006912:	e0ae      	b.n	8006a72 <_vfiprintf_r+0x1f2>
 8006914:	6963      	ldr	r3, [r4, #20]
 8006916:	9a05      	ldr	r2, [sp, #20]
 8006918:	189b      	adds	r3, r3, r2
 800691a:	6163      	str	r3, [r4, #20]
 800691c:	7833      	ldrb	r3, [r6, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d100      	bne.n	8006924 <_vfiprintf_r+0xa4>
 8006922:	e0a6      	b.n	8006a72 <_vfiprintf_r+0x1f2>
 8006924:	2201      	movs	r2, #1
 8006926:	2300      	movs	r3, #0
 8006928:	4252      	negs	r2, r2
 800692a:	6062      	str	r2, [r4, #4]
 800692c:	a904      	add	r1, sp, #16
 800692e:	3254      	adds	r2, #84	@ 0x54
 8006930:	1852      	adds	r2, r2, r1
 8006932:	1c75      	adds	r5, r6, #1
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	60e3      	str	r3, [r4, #12]
 8006938:	60a3      	str	r3, [r4, #8]
 800693a:	7013      	strb	r3, [r2, #0]
 800693c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800693e:	4b59      	ldr	r3, [pc, #356]	@ (8006aa4 <_vfiprintf_r+0x224>)
 8006940:	2205      	movs	r2, #5
 8006942:	0018      	movs	r0, r3
 8006944:	7829      	ldrb	r1, [r5, #0]
 8006946:	9305      	str	r3, [sp, #20]
 8006948:	f000 fbae 	bl	80070a8 <memchr>
 800694c:	1c6e      	adds	r6, r5, #1
 800694e:	2800      	cmp	r0, #0
 8006950:	d11f      	bne.n	8006992 <_vfiprintf_r+0x112>
 8006952:	6822      	ldr	r2, [r4, #0]
 8006954:	06d3      	lsls	r3, r2, #27
 8006956:	d504      	bpl.n	8006962 <_vfiprintf_r+0xe2>
 8006958:	2353      	movs	r3, #83	@ 0x53
 800695a:	a904      	add	r1, sp, #16
 800695c:	185b      	adds	r3, r3, r1
 800695e:	2120      	movs	r1, #32
 8006960:	7019      	strb	r1, [r3, #0]
 8006962:	0713      	lsls	r3, r2, #28
 8006964:	d504      	bpl.n	8006970 <_vfiprintf_r+0xf0>
 8006966:	2353      	movs	r3, #83	@ 0x53
 8006968:	a904      	add	r1, sp, #16
 800696a:	185b      	adds	r3, r3, r1
 800696c:	212b      	movs	r1, #43	@ 0x2b
 800696e:	7019      	strb	r1, [r3, #0]
 8006970:	782b      	ldrb	r3, [r5, #0]
 8006972:	2b2a      	cmp	r3, #42	@ 0x2a
 8006974:	d016      	beq.n	80069a4 <_vfiprintf_r+0x124>
 8006976:	002e      	movs	r6, r5
 8006978:	2100      	movs	r1, #0
 800697a:	200a      	movs	r0, #10
 800697c:	68e3      	ldr	r3, [r4, #12]
 800697e:	7832      	ldrb	r2, [r6, #0]
 8006980:	1c75      	adds	r5, r6, #1
 8006982:	3a30      	subs	r2, #48	@ 0x30
 8006984:	2a09      	cmp	r2, #9
 8006986:	d950      	bls.n	8006a2a <_vfiprintf_r+0x1aa>
 8006988:	2900      	cmp	r1, #0
 800698a:	d111      	bne.n	80069b0 <_vfiprintf_r+0x130>
 800698c:	e017      	b.n	80069be <_vfiprintf_r+0x13e>
 800698e:	3601      	adds	r6, #1
 8006990:	e7af      	b.n	80068f2 <_vfiprintf_r+0x72>
 8006992:	9b05      	ldr	r3, [sp, #20]
 8006994:	6822      	ldr	r2, [r4, #0]
 8006996:	1ac0      	subs	r0, r0, r3
 8006998:	2301      	movs	r3, #1
 800699a:	4083      	lsls	r3, r0
 800699c:	4313      	orrs	r3, r2
 800699e:	0035      	movs	r5, r6
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	e7cc      	b.n	800693e <_vfiprintf_r+0xbe>
 80069a4:	9b07      	ldr	r3, [sp, #28]
 80069a6:	1d19      	adds	r1, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	9107      	str	r1, [sp, #28]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db01      	blt.n	80069b4 <_vfiprintf_r+0x134>
 80069b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069b2:	e004      	b.n	80069be <_vfiprintf_r+0x13e>
 80069b4:	425b      	negs	r3, r3
 80069b6:	60e3      	str	r3, [r4, #12]
 80069b8:	2302      	movs	r3, #2
 80069ba:	4313      	orrs	r3, r2
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	7833      	ldrb	r3, [r6, #0]
 80069c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80069c2:	d10c      	bne.n	80069de <_vfiprintf_r+0x15e>
 80069c4:	7873      	ldrb	r3, [r6, #1]
 80069c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80069c8:	d134      	bne.n	8006a34 <_vfiprintf_r+0x1b4>
 80069ca:	9b07      	ldr	r3, [sp, #28]
 80069cc:	3602      	adds	r6, #2
 80069ce:	1d1a      	adds	r2, r3, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	9207      	str	r2, [sp, #28]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	da01      	bge.n	80069dc <_vfiprintf_r+0x15c>
 80069d8:	2301      	movs	r3, #1
 80069da:	425b      	negs	r3, r3
 80069dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069de:	4d32      	ldr	r5, [pc, #200]	@ (8006aa8 <_vfiprintf_r+0x228>)
 80069e0:	2203      	movs	r2, #3
 80069e2:	0028      	movs	r0, r5
 80069e4:	7831      	ldrb	r1, [r6, #0]
 80069e6:	f000 fb5f 	bl	80070a8 <memchr>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d006      	beq.n	80069fc <_vfiprintf_r+0x17c>
 80069ee:	2340      	movs	r3, #64	@ 0x40
 80069f0:	1b40      	subs	r0, r0, r5
 80069f2:	4083      	lsls	r3, r0
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	3601      	adds	r6, #1
 80069f8:	4313      	orrs	r3, r2
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	7831      	ldrb	r1, [r6, #0]
 80069fe:	2206      	movs	r2, #6
 8006a00:	482a      	ldr	r0, [pc, #168]	@ (8006aac <_vfiprintf_r+0x22c>)
 8006a02:	1c75      	adds	r5, r6, #1
 8006a04:	7621      	strb	r1, [r4, #24]
 8006a06:	f000 fb4f 	bl	80070a8 <memchr>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d040      	beq.n	8006a90 <_vfiprintf_r+0x210>
 8006a0e:	4b28      	ldr	r3, [pc, #160]	@ (8006ab0 <_vfiprintf_r+0x230>)
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d122      	bne.n	8006a5a <_vfiprintf_r+0x1da>
 8006a14:	2207      	movs	r2, #7
 8006a16:	9b07      	ldr	r3, [sp, #28]
 8006a18:	3307      	adds	r3, #7
 8006a1a:	4393      	bics	r3, r2
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	6963      	ldr	r3, [r4, #20]
 8006a22:	9a04      	ldr	r2, [sp, #16]
 8006a24:	189b      	adds	r3, r3, r2
 8006a26:	6163      	str	r3, [r4, #20]
 8006a28:	e762      	b.n	80068f0 <_vfiprintf_r+0x70>
 8006a2a:	4343      	muls	r3, r0
 8006a2c:	002e      	movs	r6, r5
 8006a2e:	2101      	movs	r1, #1
 8006a30:	189b      	adds	r3, r3, r2
 8006a32:	e7a4      	b.n	800697e <_vfiprintf_r+0xfe>
 8006a34:	2300      	movs	r3, #0
 8006a36:	200a      	movs	r0, #10
 8006a38:	0019      	movs	r1, r3
 8006a3a:	3601      	adds	r6, #1
 8006a3c:	6063      	str	r3, [r4, #4]
 8006a3e:	7832      	ldrb	r2, [r6, #0]
 8006a40:	1c75      	adds	r5, r6, #1
 8006a42:	3a30      	subs	r2, #48	@ 0x30
 8006a44:	2a09      	cmp	r2, #9
 8006a46:	d903      	bls.n	8006a50 <_vfiprintf_r+0x1d0>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0c8      	beq.n	80069de <_vfiprintf_r+0x15e>
 8006a4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a4e:	e7c6      	b.n	80069de <_vfiprintf_r+0x15e>
 8006a50:	4341      	muls	r1, r0
 8006a52:	002e      	movs	r6, r5
 8006a54:	2301      	movs	r3, #1
 8006a56:	1889      	adds	r1, r1, r2
 8006a58:	e7f1      	b.n	8006a3e <_vfiprintf_r+0x1be>
 8006a5a:	aa07      	add	r2, sp, #28
 8006a5c:	9200      	str	r2, [sp, #0]
 8006a5e:	0021      	movs	r1, r4
 8006a60:	003a      	movs	r2, r7
 8006a62:	4b14      	ldr	r3, [pc, #80]	@ (8006ab4 <_vfiprintf_r+0x234>)
 8006a64:	9803      	ldr	r0, [sp, #12]
 8006a66:	e000      	b.n	8006a6a <_vfiprintf_r+0x1ea>
 8006a68:	bf00      	nop
 8006a6a:	9004      	str	r0, [sp, #16]
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	d1d6      	bne.n	8006a20 <_vfiprintf_r+0x1a0>
 8006a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a74:	07db      	lsls	r3, r3, #31
 8006a76:	d405      	bmi.n	8006a84 <_vfiprintf_r+0x204>
 8006a78:	89bb      	ldrh	r3, [r7, #12]
 8006a7a:	059b      	lsls	r3, r3, #22
 8006a7c:	d402      	bmi.n	8006a84 <_vfiprintf_r+0x204>
 8006a7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006a80:	f7ff fc32 	bl	80062e8 <__retarget_lock_release_recursive>
 8006a84:	89bb      	ldrh	r3, [r7, #12]
 8006a86:	065b      	lsls	r3, r3, #25
 8006a88:	d500      	bpl.n	8006a8c <_vfiprintf_r+0x20c>
 8006a8a:	e71e      	b.n	80068ca <_vfiprintf_r+0x4a>
 8006a8c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006a8e:	e71e      	b.n	80068ce <_vfiprintf_r+0x4e>
 8006a90:	aa07      	add	r2, sp, #28
 8006a92:	9200      	str	r2, [sp, #0]
 8006a94:	0021      	movs	r1, r4
 8006a96:	003a      	movs	r2, r7
 8006a98:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <_vfiprintf_r+0x234>)
 8006a9a:	9803      	ldr	r0, [sp, #12]
 8006a9c:	f000 f87c 	bl	8006b98 <_printf_i>
 8006aa0:	e7e3      	b.n	8006a6a <_vfiprintf_r+0x1ea>
 8006aa2:	46c0      	nop			@ (mov r8, r8)
 8006aa4:	0800766b 	.word	0x0800766b
 8006aa8:	08007671 	.word	0x08007671
 8006aac:	08007675 	.word	0x08007675
 8006ab0:	00000000 	.word	0x00000000
 8006ab4:	0800685b 	.word	0x0800685b

08006ab8 <_printf_common>:
 8006ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aba:	0016      	movs	r6, r2
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	688a      	ldr	r2, [r1, #8]
 8006ac0:	690b      	ldr	r3, [r1, #16]
 8006ac2:	000c      	movs	r4, r1
 8006ac4:	9000      	str	r0, [sp, #0]
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	da00      	bge.n	8006acc <_printf_common+0x14>
 8006aca:	0013      	movs	r3, r2
 8006acc:	0022      	movs	r2, r4
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	3243      	adds	r2, #67	@ 0x43
 8006ad2:	7812      	ldrb	r2, [r2, #0]
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	d001      	beq.n	8006adc <_printf_common+0x24>
 8006ad8:	3301      	adds	r3, #1
 8006ada:	6033      	str	r3, [r6, #0]
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	069b      	lsls	r3, r3, #26
 8006ae0:	d502      	bpl.n	8006ae8 <_printf_common+0x30>
 8006ae2:	6833      	ldr	r3, [r6, #0]
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	6822      	ldr	r2, [r4, #0]
 8006aea:	2306      	movs	r3, #6
 8006aec:	0015      	movs	r5, r2
 8006aee:	401d      	ands	r5, r3
 8006af0:	421a      	tst	r2, r3
 8006af2:	d027      	beq.n	8006b44 <_printf_common+0x8c>
 8006af4:	0023      	movs	r3, r4
 8006af6:	3343      	adds	r3, #67	@ 0x43
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	1e5a      	subs	r2, r3, #1
 8006afc:	4193      	sbcs	r3, r2
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	0692      	lsls	r2, r2, #26
 8006b02:	d430      	bmi.n	8006b66 <_printf_common+0xae>
 8006b04:	0022      	movs	r2, r4
 8006b06:	9901      	ldr	r1, [sp, #4]
 8006b08:	9800      	ldr	r0, [sp, #0]
 8006b0a:	9d08      	ldr	r5, [sp, #32]
 8006b0c:	3243      	adds	r2, #67	@ 0x43
 8006b0e:	47a8      	blx	r5
 8006b10:	3001      	adds	r0, #1
 8006b12:	d025      	beq.n	8006b60 <_printf_common+0xa8>
 8006b14:	2206      	movs	r2, #6
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	2500      	movs	r5, #0
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d105      	bne.n	8006b2c <_printf_common+0x74>
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	68e5      	ldr	r5, [r4, #12]
 8006b24:	1aed      	subs	r5, r5, r3
 8006b26:	43eb      	mvns	r3, r5
 8006b28:	17db      	asrs	r3, r3, #31
 8006b2a:	401d      	ands	r5, r3
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	6922      	ldr	r2, [r4, #16]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	dd01      	ble.n	8006b38 <_printf_common+0x80>
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	18ed      	adds	r5, r5, r3
 8006b38:	2600      	movs	r6, #0
 8006b3a:	42b5      	cmp	r5, r6
 8006b3c:	d120      	bne.n	8006b80 <_printf_common+0xc8>
 8006b3e:	2000      	movs	r0, #0
 8006b40:	e010      	b.n	8006b64 <_printf_common+0xac>
 8006b42:	3501      	adds	r5, #1
 8006b44:	68e3      	ldr	r3, [r4, #12]
 8006b46:	6832      	ldr	r2, [r6, #0]
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	42ab      	cmp	r3, r5
 8006b4c:	ddd2      	ble.n	8006af4 <_printf_common+0x3c>
 8006b4e:	0022      	movs	r2, r4
 8006b50:	2301      	movs	r3, #1
 8006b52:	9901      	ldr	r1, [sp, #4]
 8006b54:	9800      	ldr	r0, [sp, #0]
 8006b56:	9f08      	ldr	r7, [sp, #32]
 8006b58:	3219      	adds	r2, #25
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d1f0      	bne.n	8006b42 <_printf_common+0x8a>
 8006b60:	2001      	movs	r0, #1
 8006b62:	4240      	negs	r0, r0
 8006b64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b66:	2030      	movs	r0, #48	@ 0x30
 8006b68:	18e1      	adds	r1, r4, r3
 8006b6a:	3143      	adds	r1, #67	@ 0x43
 8006b6c:	7008      	strb	r0, [r1, #0]
 8006b6e:	0021      	movs	r1, r4
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	3145      	adds	r1, #69	@ 0x45
 8006b74:	7809      	ldrb	r1, [r1, #0]
 8006b76:	18a2      	adds	r2, r4, r2
 8006b78:	3243      	adds	r2, #67	@ 0x43
 8006b7a:	3302      	adds	r3, #2
 8006b7c:	7011      	strb	r1, [r2, #0]
 8006b7e:	e7c1      	b.n	8006b04 <_printf_common+0x4c>
 8006b80:	0022      	movs	r2, r4
 8006b82:	2301      	movs	r3, #1
 8006b84:	9901      	ldr	r1, [sp, #4]
 8006b86:	9800      	ldr	r0, [sp, #0]
 8006b88:	9f08      	ldr	r7, [sp, #32]
 8006b8a:	321a      	adds	r2, #26
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d0e6      	beq.n	8006b60 <_printf_common+0xa8>
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7d1      	b.n	8006b3a <_printf_common+0x82>
	...

08006b98 <_printf_i>:
 8006b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b9a:	b08b      	sub	sp, #44	@ 0x2c
 8006b9c:	9206      	str	r2, [sp, #24]
 8006b9e:	000a      	movs	r2, r1
 8006ba0:	3243      	adds	r2, #67	@ 0x43
 8006ba2:	9307      	str	r3, [sp, #28]
 8006ba4:	9005      	str	r0, [sp, #20]
 8006ba6:	9203      	str	r2, [sp, #12]
 8006ba8:	7e0a      	ldrb	r2, [r1, #24]
 8006baa:	000c      	movs	r4, r1
 8006bac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006bae:	2a78      	cmp	r2, #120	@ 0x78
 8006bb0:	d809      	bhi.n	8006bc6 <_printf_i+0x2e>
 8006bb2:	2a62      	cmp	r2, #98	@ 0x62
 8006bb4:	d80b      	bhi.n	8006bce <_printf_i+0x36>
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	d100      	bne.n	8006bbc <_printf_i+0x24>
 8006bba:	e0bc      	b.n	8006d36 <_printf_i+0x19e>
 8006bbc:	497b      	ldr	r1, [pc, #492]	@ (8006dac <_printf_i+0x214>)
 8006bbe:	9104      	str	r1, [sp, #16]
 8006bc0:	2a58      	cmp	r2, #88	@ 0x58
 8006bc2:	d100      	bne.n	8006bc6 <_printf_i+0x2e>
 8006bc4:	e090      	b.n	8006ce8 <_printf_i+0x150>
 8006bc6:	0025      	movs	r5, r4
 8006bc8:	3542      	adds	r5, #66	@ 0x42
 8006bca:	702a      	strb	r2, [r5, #0]
 8006bcc:	e022      	b.n	8006c14 <_printf_i+0x7c>
 8006bce:	0010      	movs	r0, r2
 8006bd0:	3863      	subs	r0, #99	@ 0x63
 8006bd2:	2815      	cmp	r0, #21
 8006bd4:	d8f7      	bhi.n	8006bc6 <_printf_i+0x2e>
 8006bd6:	f7f9 fa95 	bl	8000104 <__gnu_thumb1_case_shi>
 8006bda:	0016      	.short	0x0016
 8006bdc:	fff6001f 	.word	0xfff6001f
 8006be0:	fff6fff6 	.word	0xfff6fff6
 8006be4:	001ffff6 	.word	0x001ffff6
 8006be8:	fff6fff6 	.word	0xfff6fff6
 8006bec:	fff6fff6 	.word	0xfff6fff6
 8006bf0:	003600a1 	.word	0x003600a1
 8006bf4:	fff60080 	.word	0xfff60080
 8006bf8:	00b2fff6 	.word	0x00b2fff6
 8006bfc:	0036fff6 	.word	0x0036fff6
 8006c00:	fff6fff6 	.word	0xfff6fff6
 8006c04:	0084      	.short	0x0084
 8006c06:	0025      	movs	r5, r4
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	3542      	adds	r5, #66	@ 0x42
 8006c0c:	1d11      	adds	r1, r2, #4
 8006c0e:	6019      	str	r1, [r3, #0]
 8006c10:	6813      	ldr	r3, [r2, #0]
 8006c12:	702b      	strb	r3, [r5, #0]
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0a0      	b.n	8006d5a <_printf_i+0x1c2>
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	6809      	ldr	r1, [r1, #0]
 8006c1c:	1d02      	adds	r2, r0, #4
 8006c1e:	060d      	lsls	r5, r1, #24
 8006c20:	d50b      	bpl.n	8006c3a <_printf_i+0xa2>
 8006c22:	6806      	ldr	r6, [r0, #0]
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	da03      	bge.n	8006c32 <_printf_i+0x9a>
 8006c2a:	232d      	movs	r3, #45	@ 0x2d
 8006c2c:	9a03      	ldr	r2, [sp, #12]
 8006c2e:	4276      	negs	r6, r6
 8006c30:	7013      	strb	r3, [r2, #0]
 8006c32:	4b5e      	ldr	r3, [pc, #376]	@ (8006dac <_printf_i+0x214>)
 8006c34:	270a      	movs	r7, #10
 8006c36:	9304      	str	r3, [sp, #16]
 8006c38:	e018      	b.n	8006c6c <_printf_i+0xd4>
 8006c3a:	6806      	ldr	r6, [r0, #0]
 8006c3c:	601a      	str	r2, [r3, #0]
 8006c3e:	0649      	lsls	r1, r1, #25
 8006c40:	d5f1      	bpl.n	8006c26 <_printf_i+0x8e>
 8006c42:	b236      	sxth	r6, r6
 8006c44:	e7ef      	b.n	8006c26 <_printf_i+0x8e>
 8006c46:	6808      	ldr	r0, [r1, #0]
 8006c48:	6819      	ldr	r1, [r3, #0]
 8006c4a:	c940      	ldmia	r1!, {r6}
 8006c4c:	0605      	lsls	r5, r0, #24
 8006c4e:	d402      	bmi.n	8006c56 <_printf_i+0xbe>
 8006c50:	0640      	lsls	r0, r0, #25
 8006c52:	d500      	bpl.n	8006c56 <_printf_i+0xbe>
 8006c54:	b2b6      	uxth	r6, r6
 8006c56:	6019      	str	r1, [r3, #0]
 8006c58:	4b54      	ldr	r3, [pc, #336]	@ (8006dac <_printf_i+0x214>)
 8006c5a:	270a      	movs	r7, #10
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006c60:	d100      	bne.n	8006c64 <_printf_i+0xcc>
 8006c62:	3f02      	subs	r7, #2
 8006c64:	0023      	movs	r3, r4
 8006c66:	2200      	movs	r2, #0
 8006c68:	3343      	adds	r3, #67	@ 0x43
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	60a3      	str	r3, [r4, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db03      	blt.n	8006c7c <_printf_i+0xe4>
 8006c74:	2104      	movs	r1, #4
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	438a      	bics	r2, r1
 8006c7a:	6022      	str	r2, [r4, #0]
 8006c7c:	2e00      	cmp	r6, #0
 8006c7e:	d102      	bne.n	8006c86 <_printf_i+0xee>
 8006c80:	9d03      	ldr	r5, [sp, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00c      	beq.n	8006ca0 <_printf_i+0x108>
 8006c86:	9d03      	ldr	r5, [sp, #12]
 8006c88:	0030      	movs	r0, r6
 8006c8a:	0039      	movs	r1, r7
 8006c8c:	f7f9 faca 	bl	8000224 <__aeabi_uidivmod>
 8006c90:	9b04      	ldr	r3, [sp, #16]
 8006c92:	3d01      	subs	r5, #1
 8006c94:	5c5b      	ldrb	r3, [r3, r1]
 8006c96:	702b      	strb	r3, [r5, #0]
 8006c98:	0033      	movs	r3, r6
 8006c9a:	0006      	movs	r6, r0
 8006c9c:	429f      	cmp	r7, r3
 8006c9e:	d9f3      	bls.n	8006c88 <_printf_i+0xf0>
 8006ca0:	2f08      	cmp	r7, #8
 8006ca2:	d109      	bne.n	8006cb8 <_printf_i+0x120>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d506      	bpl.n	8006cb8 <_printf_i+0x120>
 8006caa:	6862      	ldr	r2, [r4, #4]
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	dc02      	bgt.n	8006cb8 <_printf_i+0x120>
 8006cb2:	2330      	movs	r3, #48	@ 0x30
 8006cb4:	3d01      	subs	r5, #1
 8006cb6:	702b      	strb	r3, [r5, #0]
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	1b5b      	subs	r3, r3, r5
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	9b07      	ldr	r3, [sp, #28]
 8006cc0:	0021      	movs	r1, r4
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	9805      	ldr	r0, [sp, #20]
 8006cc6:	9b06      	ldr	r3, [sp, #24]
 8006cc8:	aa09      	add	r2, sp, #36	@ 0x24
 8006cca:	f7ff fef5 	bl	8006ab8 <_printf_common>
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d148      	bne.n	8006d64 <_printf_i+0x1cc>
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	4240      	negs	r0, r0
 8006cd6:	b00b      	add	sp, #44	@ 0x2c
 8006cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cda:	2220      	movs	r2, #32
 8006cdc:	6809      	ldr	r1, [r1, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	6022      	str	r2, [r4, #0]
 8006ce2:	2278      	movs	r2, #120	@ 0x78
 8006ce4:	4932      	ldr	r1, [pc, #200]	@ (8006db0 <_printf_i+0x218>)
 8006ce6:	9104      	str	r1, [sp, #16]
 8006ce8:	0021      	movs	r1, r4
 8006cea:	3145      	adds	r1, #69	@ 0x45
 8006cec:	700a      	strb	r2, [r1, #0]
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	6822      	ldr	r2, [r4, #0]
 8006cf2:	c940      	ldmia	r1!, {r6}
 8006cf4:	0610      	lsls	r0, r2, #24
 8006cf6:	d402      	bmi.n	8006cfe <_printf_i+0x166>
 8006cf8:	0650      	lsls	r0, r2, #25
 8006cfa:	d500      	bpl.n	8006cfe <_printf_i+0x166>
 8006cfc:	b2b6      	uxth	r6, r6
 8006cfe:	6019      	str	r1, [r3, #0]
 8006d00:	07d3      	lsls	r3, r2, #31
 8006d02:	d502      	bpl.n	8006d0a <_printf_i+0x172>
 8006d04:	2320      	movs	r3, #32
 8006d06:	4313      	orrs	r3, r2
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	2e00      	cmp	r6, #0
 8006d0c:	d001      	beq.n	8006d12 <_printf_i+0x17a>
 8006d0e:	2710      	movs	r7, #16
 8006d10:	e7a8      	b.n	8006c64 <_printf_i+0xcc>
 8006d12:	2220      	movs	r2, #32
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	4393      	bics	r3, r2
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	e7f8      	b.n	8006d0e <_printf_i+0x176>
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	680d      	ldr	r5, [r1, #0]
 8006d20:	1d10      	adds	r0, r2, #4
 8006d22:	6949      	ldr	r1, [r1, #20]
 8006d24:	6018      	str	r0, [r3, #0]
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	062e      	lsls	r6, r5, #24
 8006d2a:	d501      	bpl.n	8006d30 <_printf_i+0x198>
 8006d2c:	6019      	str	r1, [r3, #0]
 8006d2e:	e002      	b.n	8006d36 <_printf_i+0x19e>
 8006d30:	066d      	lsls	r5, r5, #25
 8006d32:	d5fb      	bpl.n	8006d2c <_printf_i+0x194>
 8006d34:	8019      	strh	r1, [r3, #0]
 8006d36:	2300      	movs	r3, #0
 8006d38:	9d03      	ldr	r5, [sp, #12]
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	e7bf      	b.n	8006cbe <_printf_i+0x126>
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	1d11      	adds	r1, r2, #4
 8006d42:	6019      	str	r1, [r3, #0]
 8006d44:	6815      	ldr	r5, [r2, #0]
 8006d46:	2100      	movs	r1, #0
 8006d48:	0028      	movs	r0, r5
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	f000 f9ac 	bl	80070a8 <memchr>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d001      	beq.n	8006d58 <_printf_i+0x1c0>
 8006d54:	1b40      	subs	r0, r0, r5
 8006d56:	6060      	str	r0, [r4, #4]
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	6123      	str	r3, [r4, #16]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9a03      	ldr	r2, [sp, #12]
 8006d60:	7013      	strb	r3, [r2, #0]
 8006d62:	e7ac      	b.n	8006cbe <_printf_i+0x126>
 8006d64:	002a      	movs	r2, r5
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	9906      	ldr	r1, [sp, #24]
 8006d6a:	9805      	ldr	r0, [sp, #20]
 8006d6c:	9d07      	ldr	r5, [sp, #28]
 8006d6e:	47a8      	blx	r5
 8006d70:	3001      	adds	r0, #1
 8006d72:	d0ae      	beq.n	8006cd2 <_printf_i+0x13a>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	079b      	lsls	r3, r3, #30
 8006d78:	d415      	bmi.n	8006da6 <_printf_i+0x20e>
 8006d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7c:	68e0      	ldr	r0, [r4, #12]
 8006d7e:	4298      	cmp	r0, r3
 8006d80:	daa9      	bge.n	8006cd6 <_printf_i+0x13e>
 8006d82:	0018      	movs	r0, r3
 8006d84:	e7a7      	b.n	8006cd6 <_printf_i+0x13e>
 8006d86:	0022      	movs	r2, r4
 8006d88:	2301      	movs	r3, #1
 8006d8a:	9906      	ldr	r1, [sp, #24]
 8006d8c:	9805      	ldr	r0, [sp, #20]
 8006d8e:	9e07      	ldr	r6, [sp, #28]
 8006d90:	3219      	adds	r2, #25
 8006d92:	47b0      	blx	r6
 8006d94:	3001      	adds	r0, #1
 8006d96:	d09c      	beq.n	8006cd2 <_printf_i+0x13a>
 8006d98:	3501      	adds	r5, #1
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	dcf0      	bgt.n	8006d86 <_printf_i+0x1ee>
 8006da4:	e7e9      	b.n	8006d7a <_printf_i+0x1e2>
 8006da6:	2500      	movs	r5, #0
 8006da8:	e7f7      	b.n	8006d9a <_printf_i+0x202>
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	0800767c 	.word	0x0800767c
 8006db0:	0800768d 	.word	0x0800768d

08006db4 <__swbuf_r>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	0006      	movs	r6, r0
 8006db8:	000d      	movs	r5, r1
 8006dba:	0014      	movs	r4, r2
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d004      	beq.n	8006dca <__swbuf_r+0x16>
 8006dc0:	6a03      	ldr	r3, [r0, #32]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <__swbuf_r+0x16>
 8006dc6:	f7ff fa27 	bl	8006218 <__sinit>
 8006dca:	69a3      	ldr	r3, [r4, #24]
 8006dcc:	60a3      	str	r3, [r4, #8]
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	071b      	lsls	r3, r3, #28
 8006dd2:	d502      	bpl.n	8006dda <__swbuf_r+0x26>
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <__swbuf_r+0x3a>
 8006dda:	0021      	movs	r1, r4
 8006ddc:	0030      	movs	r0, r6
 8006dde:	f000 f82b 	bl	8006e38 <__swsetup_r>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d003      	beq.n	8006dee <__swbuf_r+0x3a>
 8006de6:	2501      	movs	r5, #1
 8006de8:	426d      	negs	r5, r5
 8006dea:	0028      	movs	r0, r5
 8006dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	b2ef      	uxtb	r7, r5
 8006df4:	1ac0      	subs	r0, r0, r3
 8006df6:	6963      	ldr	r3, [r4, #20]
 8006df8:	b2ed      	uxtb	r5, r5
 8006dfa:	4283      	cmp	r3, r0
 8006dfc:	dc05      	bgt.n	8006e0a <__swbuf_r+0x56>
 8006dfe:	0021      	movs	r1, r4
 8006e00:	0030      	movs	r0, r6
 8006e02:	f7ff fbcb 	bl	800659c <_fflush_r>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d1ed      	bne.n	8006de6 <__swbuf_r+0x32>
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	60a3      	str	r3, [r4, #8]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	701f      	strb	r7, [r3, #0]
 8006e1a:	6963      	ldr	r3, [r4, #20]
 8006e1c:	4283      	cmp	r3, r0
 8006e1e:	d004      	beq.n	8006e2a <__swbuf_r+0x76>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	d5e1      	bpl.n	8006dea <__swbuf_r+0x36>
 8006e26:	2d0a      	cmp	r5, #10
 8006e28:	d1df      	bne.n	8006dea <__swbuf_r+0x36>
 8006e2a:	0021      	movs	r1, r4
 8006e2c:	0030      	movs	r0, r6
 8006e2e:	f7ff fbb5 	bl	800659c <_fflush_r>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d0d9      	beq.n	8006dea <__swbuf_r+0x36>
 8006e36:	e7d6      	b.n	8006de6 <__swbuf_r+0x32>

08006e38 <__swsetup_r>:
 8006e38:	4b2d      	ldr	r3, [pc, #180]	@ (8006ef0 <__swsetup_r+0xb8>)
 8006e3a:	b570      	push	{r4, r5, r6, lr}
 8006e3c:	0005      	movs	r5, r0
 8006e3e:	6818      	ldr	r0, [r3, #0]
 8006e40:	000c      	movs	r4, r1
 8006e42:	2800      	cmp	r0, #0
 8006e44:	d004      	beq.n	8006e50 <__swsetup_r+0x18>
 8006e46:	6a03      	ldr	r3, [r0, #32]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <__swsetup_r+0x18>
 8006e4c:	f7ff f9e4 	bl	8006218 <__sinit>
 8006e50:	230c      	movs	r3, #12
 8006e52:	5ee2      	ldrsh	r2, [r4, r3]
 8006e54:	0713      	lsls	r3, r2, #28
 8006e56:	d423      	bmi.n	8006ea0 <__swsetup_r+0x68>
 8006e58:	06d3      	lsls	r3, r2, #27
 8006e5a:	d407      	bmi.n	8006e6c <__swsetup_r+0x34>
 8006e5c:	2309      	movs	r3, #9
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	2340      	movs	r3, #64	@ 0x40
 8006e62:	2001      	movs	r0, #1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	81a3      	strh	r3, [r4, #12]
 8006e68:	4240      	negs	r0, r0
 8006e6a:	e03a      	b.n	8006ee2 <__swsetup_r+0xaa>
 8006e6c:	0752      	lsls	r2, r2, #29
 8006e6e:	d513      	bpl.n	8006e98 <__swsetup_r+0x60>
 8006e70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e72:	2900      	cmp	r1, #0
 8006e74:	d008      	beq.n	8006e88 <__swsetup_r+0x50>
 8006e76:	0023      	movs	r3, r4
 8006e78:	3344      	adds	r3, #68	@ 0x44
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d002      	beq.n	8006e84 <__swsetup_r+0x4c>
 8006e7e:	0028      	movs	r0, r5
 8006e80:	f7ff fc8c 	bl	800679c <_free_r>
 8006e84:	2300      	movs	r3, #0
 8006e86:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e88:	2224      	movs	r2, #36	@ 0x24
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	4393      	bics	r3, r2
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	2300      	movs	r3, #0
 8006e92:	6063      	str	r3, [r4, #4]
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	2308      	movs	r3, #8
 8006e9a:	89a2      	ldrh	r2, [r4, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	81a3      	strh	r3, [r4, #12]
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <__swsetup_r+0x86>
 8006ea6:	21a0      	movs	r1, #160	@ 0xa0
 8006ea8:	2280      	movs	r2, #128	@ 0x80
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	0089      	lsls	r1, r1, #2
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	400b      	ands	r3, r1
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <__swsetup_r+0x86>
 8006eb6:	0021      	movs	r1, r4
 8006eb8:	0028      	movs	r0, r5
 8006eba:	f000 f845 	bl	8006f48 <__smakebuf_r>
 8006ebe:	230c      	movs	r3, #12
 8006ec0:	5ee2      	ldrsh	r2, [r4, r3]
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	0013      	movs	r3, r2
 8006ec6:	400b      	ands	r3, r1
 8006ec8:	420a      	tst	r2, r1
 8006eca:	d00b      	beq.n	8006ee4 <__swsetup_r+0xac>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60a3      	str	r3, [r4, #8]
 8006ed0:	6963      	ldr	r3, [r4, #20]
 8006ed2:	425b      	negs	r3, r3
 8006ed4:	61a3      	str	r3, [r4, #24]
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	4283      	cmp	r3, r0
 8006edc:	d101      	bne.n	8006ee2 <__swsetup_r+0xaa>
 8006ede:	0613      	lsls	r3, r2, #24
 8006ee0:	d4be      	bmi.n	8006e60 <__swsetup_r+0x28>
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}
 8006ee4:	0791      	lsls	r1, r2, #30
 8006ee6:	d400      	bmi.n	8006eea <__swsetup_r+0xb2>
 8006ee8:	6963      	ldr	r3, [r4, #20]
 8006eea:	60a3      	str	r3, [r4, #8]
 8006eec:	e7f3      	b.n	8006ed6 <__swsetup_r+0x9e>
 8006eee:	46c0      	nop			@ (mov r8, r8)
 8006ef0:	20000820 	.word	0x20000820

08006ef4 <__swhatbuf_r>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	000e      	movs	r6, r1
 8006ef8:	001d      	movs	r5, r3
 8006efa:	230e      	movs	r3, #14
 8006efc:	5ec9      	ldrsh	r1, [r1, r3]
 8006efe:	0014      	movs	r4, r2
 8006f00:	b096      	sub	sp, #88	@ 0x58
 8006f02:	2900      	cmp	r1, #0
 8006f04:	da0c      	bge.n	8006f20 <__swhatbuf_r+0x2c>
 8006f06:	89b2      	ldrh	r2, [r6, #12]
 8006f08:	2380      	movs	r3, #128	@ 0x80
 8006f0a:	0011      	movs	r1, r2
 8006f0c:	4019      	ands	r1, r3
 8006f0e:	421a      	tst	r2, r3
 8006f10:	d114      	bne.n	8006f3c <__swhatbuf_r+0x48>
 8006f12:	2380      	movs	r3, #128	@ 0x80
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	2000      	movs	r0, #0
 8006f18:	6029      	str	r1, [r5, #0]
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	b016      	add	sp, #88	@ 0x58
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}
 8006f20:	466a      	mov	r2, sp
 8006f22:	f000 f853 	bl	8006fcc <_fstat_r>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	dbed      	blt.n	8006f06 <__swhatbuf_r+0x12>
 8006f2a:	23f0      	movs	r3, #240	@ 0xf0
 8006f2c:	9901      	ldr	r1, [sp, #4]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	4019      	ands	r1, r3
 8006f32:	4b04      	ldr	r3, [pc, #16]	@ (8006f44 <__swhatbuf_r+0x50>)
 8006f34:	18c9      	adds	r1, r1, r3
 8006f36:	424b      	negs	r3, r1
 8006f38:	4159      	adcs	r1, r3
 8006f3a:	e7ea      	b.n	8006f12 <__swhatbuf_r+0x1e>
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	2340      	movs	r3, #64	@ 0x40
 8006f40:	e7e9      	b.n	8006f16 <__swhatbuf_r+0x22>
 8006f42:	46c0      	nop			@ (mov r8, r8)
 8006f44:	ffffe000 	.word	0xffffe000

08006f48 <__smakebuf_r>:
 8006f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4a:	2602      	movs	r6, #2
 8006f4c:	898b      	ldrh	r3, [r1, #12]
 8006f4e:	0005      	movs	r5, r0
 8006f50:	000c      	movs	r4, r1
 8006f52:	b085      	sub	sp, #20
 8006f54:	4233      	tst	r3, r6
 8006f56:	d007      	beq.n	8006f68 <__smakebuf_r+0x20>
 8006f58:	0023      	movs	r3, r4
 8006f5a:	3347      	adds	r3, #71	@ 0x47
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	2301      	movs	r3, #1
 8006f62:	6163      	str	r3, [r4, #20]
 8006f64:	b005      	add	sp, #20
 8006f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f68:	ab03      	add	r3, sp, #12
 8006f6a:	aa02      	add	r2, sp, #8
 8006f6c:	f7ff ffc2 	bl	8006ef4 <__swhatbuf_r>
 8006f70:	9f02      	ldr	r7, [sp, #8]
 8006f72:	9001      	str	r0, [sp, #4]
 8006f74:	0039      	movs	r1, r7
 8006f76:	0028      	movs	r0, r5
 8006f78:	f7ff fa0a 	bl	8006390 <_malloc_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d108      	bne.n	8006f92 <__smakebuf_r+0x4a>
 8006f80:	220c      	movs	r2, #12
 8006f82:	5ea3      	ldrsh	r3, [r4, r2]
 8006f84:	059a      	lsls	r2, r3, #22
 8006f86:	d4ed      	bmi.n	8006f64 <__smakebuf_r+0x1c>
 8006f88:	2203      	movs	r2, #3
 8006f8a:	4393      	bics	r3, r2
 8006f8c:	431e      	orrs	r6, r3
 8006f8e:	81a6      	strh	r6, [r4, #12]
 8006f90:	e7e2      	b.n	8006f58 <__smakebuf_r+0x10>
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	89a2      	ldrh	r2, [r4, #12]
 8006f96:	6020      	str	r0, [r4, #0]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	6120      	str	r0, [r4, #16]
 8006fa0:	6167      	str	r7, [r4, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <__smakebuf_r+0x78>
 8006fa6:	0028      	movs	r0, r5
 8006fa8:	230e      	movs	r3, #14
 8006faa:	5ee1      	ldrsh	r1, [r4, r3]
 8006fac:	f000 f820 	bl	8006ff0 <_isatty_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d005      	beq.n	8006fc0 <__smakebuf_r+0x78>
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	89a2      	ldrh	r2, [r4, #12]
 8006fb8:	439a      	bics	r2, r3
 8006fba:	3b02      	subs	r3, #2
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	9a01      	ldr	r2, [sp, #4]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	81a3      	strh	r3, [r4, #12]
 8006fc8:	e7cc      	b.n	8006f64 <__smakebuf_r+0x1c>
	...

08006fcc <_fstat_r>:
 8006fcc:	2300      	movs	r3, #0
 8006fce:	b570      	push	{r4, r5, r6, lr}
 8006fd0:	4d06      	ldr	r5, [pc, #24]	@ (8006fec <_fstat_r+0x20>)
 8006fd2:	0004      	movs	r4, r0
 8006fd4:	0008      	movs	r0, r1
 8006fd6:	0011      	movs	r1, r2
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	f7fb f98b 	bl	80022f4 <_fstat>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	d103      	bne.n	8006fea <_fstat_r+0x1e>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d000      	beq.n	8006fea <_fstat_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	20000fa8 	.word	0x20000fa8

08006ff0 <_isatty_r>:
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	b570      	push	{r4, r5, r6, lr}
 8006ff4:	4d06      	ldr	r5, [pc, #24]	@ (8007010 <_isatty_r+0x20>)
 8006ff6:	0004      	movs	r4, r0
 8006ff8:	0008      	movs	r0, r1
 8006ffa:	602b      	str	r3, [r5, #0]
 8006ffc:	f7fb f988 	bl	8002310 <_isatty>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d103      	bne.n	800700c <_isatty_r+0x1c>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d000      	beq.n	800700c <_isatty_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	20000fa8 	.word	0x20000fa8

08007014 <_raise_r>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	0004      	movs	r4, r0
 8007018:	000d      	movs	r5, r1
 800701a:	291f      	cmp	r1, #31
 800701c:	d904      	bls.n	8007028 <_raise_r+0x14>
 800701e:	2316      	movs	r3, #22
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	2001      	movs	r0, #1
 8007024:	4240      	negs	r0, r0
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <_raise_r+0x24>
 800702e:	008a      	lsls	r2, r1, #2
 8007030:	189b      	adds	r3, r3, r2
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	2a00      	cmp	r2, #0
 8007036:	d108      	bne.n	800704a <_raise_r+0x36>
 8007038:	0020      	movs	r0, r4
 800703a:	f000 f831 	bl	80070a0 <_getpid_r>
 800703e:	002a      	movs	r2, r5
 8007040:	0001      	movs	r1, r0
 8007042:	0020      	movs	r0, r4
 8007044:	f000 f81a 	bl	800707c <_kill_r>
 8007048:	e7ed      	b.n	8007026 <_raise_r+0x12>
 800704a:	2a01      	cmp	r2, #1
 800704c:	d009      	beq.n	8007062 <_raise_r+0x4e>
 800704e:	1c51      	adds	r1, r2, #1
 8007050:	d103      	bne.n	800705a <_raise_r+0x46>
 8007052:	2316      	movs	r3, #22
 8007054:	6003      	str	r3, [r0, #0]
 8007056:	2001      	movs	r0, #1
 8007058:	e7e5      	b.n	8007026 <_raise_r+0x12>
 800705a:	2100      	movs	r1, #0
 800705c:	0028      	movs	r0, r5
 800705e:	6019      	str	r1, [r3, #0]
 8007060:	4790      	blx	r2
 8007062:	2000      	movs	r0, #0
 8007064:	e7df      	b.n	8007026 <_raise_r+0x12>
	...

08007068 <raise>:
 8007068:	b510      	push	{r4, lr}
 800706a:	4b03      	ldr	r3, [pc, #12]	@ (8007078 <raise+0x10>)
 800706c:	0001      	movs	r1, r0
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	f7ff ffd0 	bl	8007014 <_raise_r>
 8007074:	bd10      	pop	{r4, pc}
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	20000820 	.word	0x20000820

0800707c <_kill_r>:
 800707c:	2300      	movs	r3, #0
 800707e:	b570      	push	{r4, r5, r6, lr}
 8007080:	4d06      	ldr	r5, [pc, #24]	@ (800709c <_kill_r+0x20>)
 8007082:	0004      	movs	r4, r0
 8007084:	0008      	movs	r0, r1
 8007086:	0011      	movs	r1, r2
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	f7fb f8d3 	bl	8002234 <_kill>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d103      	bne.n	800709a <_kill_r+0x1e>
 8007092:	682b      	ldr	r3, [r5, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d000      	beq.n	800709a <_kill_r+0x1e>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	20000fa8 	.word	0x20000fa8

080070a0 <_getpid_r>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	f7fb f8c1 	bl	8002228 <_getpid>
 80070a6:	bd10      	pop	{r4, pc}

080070a8 <memchr>:
 80070a8:	b2c9      	uxtb	r1, r1
 80070aa:	1882      	adds	r2, r0, r2
 80070ac:	4290      	cmp	r0, r2
 80070ae:	d101      	bne.n	80070b4 <memchr+0xc>
 80070b0:	2000      	movs	r0, #0
 80070b2:	4770      	bx	lr
 80070b4:	7803      	ldrb	r3, [r0, #0]
 80070b6:	428b      	cmp	r3, r1
 80070b8:	d0fb      	beq.n	80070b2 <memchr+0xa>
 80070ba:	3001      	adds	r0, #1
 80070bc:	e7f6      	b.n	80070ac <memchr+0x4>
	...

080070c0 <_init>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	46c0      	nop			@ (mov r8, r8)
 80070c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c6:	bc08      	pop	{r3}
 80070c8:	469e      	mov	lr, r3
 80070ca:	4770      	bx	lr

080070cc <_fini>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	46c0      	nop			@ (mov r8, r8)
 80070d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d2:	bc08      	pop	{r3}
 80070d4:	469e      	mov	lr, r3
 80070d6:	4770      	bx	lr
